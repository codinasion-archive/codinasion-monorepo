{
  "slug": "convert-hexadecimal-to-binary",
  "title": "Convert Hexadecimal To Binary",
  "c": "#include<stdio.h>\nint main()\n{\n             char hexNum[100];\n\tlong int count=0;\n\tprintf(\"Input : \");\n\tscanf(\"%s\",hexNum);\n\tprintf(\"\\nOutput : \");\n\twhile(hexNum[count])\n\t{\n\t\tswitch(hexNum[count])\n\t\t{\n\t\t\tcase '0' : printf(\"0000\");\n\t\t\t\tbreak;\n\t\t\tcase '1' : printf(\"0001\");\n\t\t\t\tbreak;\n\t\t\tcase '2' : printf(\"0010\");\n\t\t\t\tbreak;\n\t\t\tcase '3' : printf(\"0011\");\n\t\t\t\tbreak;\n\t\t\tcase '4' : printf(\"0100\");\n\t\t\t\tbreak;\n\t\t\tcase '5' : printf(\"0101\");\n\t\t\t\tbreak;\n\t\t\tcase '6' : printf(\"0110\");\n\t\t\t\tbreak;\n\t\t\tcase '7' : printf(\"0111\");\n\t\t\t\tbreak;\n\t\t\tcase '8' : printf(\"1000\");\n\t\t\t\tbreak;\n\t\t\tcase '9' : printf(\"1001\");\n\t\t\t\tbreak;\n\t\t\tcase 'A' : printf(\"1010\");\n\t\t\t\tbreak;\n\t\t\tcase 'B' : printf(\"1011\");\n\t\t\t\tbreak;\n\t\t\tcase 'C' : printf(\"1100\");\n\t\t\t\tbreak;\n\t\t\tcase 'D' : printf(\"1101\");\n\t\t\t\tbreak;\n\t\t\tcase 'E' : printf(\"1110\");\n\t\t\t\tbreak;\n\t\t\tcase 'F' : printf(\"1111\");\n\t\t\t\tbreak;\n\t\t\tcase 'a' : printf(\"1010\");\n\t\t\t\tbreak;\n\t\t\tcase 'b' : printf(\"1011\");\n\t\t\t\tbreak;\n\t\t\tcase 'c' : printf(\"1100\");\n\t\t\t\tbreak;\n\t\t\tcase 'd' : printf(\"1101\");\n\t\t\t\tbreak;\n\t\t\tcase 'e' : printf(\"1110\");\n\t\t\t\tbreak;\n\t\t\tcase 'f' : printf(\"1111\");\n\t\t\t\tbreak;\n\t\t\tdefault : printf(\"\\nInvalid Entry, Please Try Again  %c\",hexNum[count]);\n\t\t}\n\t\tcount++;\n\t}\n\treturn 0;\n}\n",
  "c-plus-plus": "#include <iostream>\r\n#include <string>\r\n#include <unordered_map>\r\n#include <stdexcept>\r\n\r\nusing namespace std;\r\n\r\nstring hex_to_bin(string hex_num) {\r\n    // Map containing hexadecimal to binary conversion\r\n    unordered_map<char, string> hex_to_binary_map = {\r\n            {'0', \"0000\"},\r\n            {'1', \"0001\"},\r\n            {'2', \"0010\"},\r\n            {'3', \"0011\"},\r\n            {'4', \"0100\"},\r\n            {'5', \"0101\"},\r\n            {'6', \"0110\"},\r\n            {'7', \"0111\"},\r\n            {'8', \"1000\"},\r\n            {'9', \"1001\"},\r\n            {'A', \"1010\"},\r\n            {'B', \"1011\"},\r\n            {'C', \"1100\"},\r\n            {'D', \"1101\"},\r\n            {'E', \"1110\"},\r\n            {'F', \"1111\"}\r\n    };\r\n    string binary_str = \"\";\r\n    for (char d: hex_num) {\r\n        if (!hex_to_binary_map.count(d)) {\r\n            throw invalid_argument(\"Invalid hexadecimal digit: \" + string(1, d));\r\n        }\r\n        binary_str = binary_str + hex_to_binary_map[d];\r\n    }\r\n    return binary_str;\r\n}\r\n\r\nint main() {\r\n    string hex_num;\r\n    cout << \"Type a HexaDecimal number: \"; // Type a number and press enter\r\n    cin >> hex_num; // Get user input from the keyboard\r\n    try {\r\n        cout << \"Your Binary number is:\" << endl;\r\n        cout << hex_to_bin(hex_num) << endl;\r\n    } catch (invalid_argument& e) {\r\n        cerr << e.what() << endl;\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n",
  "c-sharp": "using System;\n\nclass MainClass {\n    public static void Main (string[] args) {\n    Console.WriteLine (\"Please enter the hexadecimal value : \");\n    var value = Console.ReadLine();\n    value = Convert.ToString(Convert.ToInt32(value.ToString(), 16), 2);\n    Console.WriteLine(\"Binary equivalent value :\"+value);\n  }\n}\n",
  "java": "import java.util.Scanner;\r\nclass ConvertHexadecimalToBinary {\r\n\t\r\n\t\r\n\t// HexaDecimal to Decimal Conversion\r\n\tstatic String convertHexaDecimalToBinary(String hexadecimal) {\r\n\t\t\r\n\t\tchar character;\r\n\t\tint decimal;\r\n\t\tString binary = \"\";\r\n\t\t\r\n\t\tfor(int i = 0; i < hexadecimal.length(); i++) {\r\n\t\t\tcharacter = hexadecimal.charAt(i);\r\n\t\t\tif (Character.isDigit(character) == false && ((int)character >= 65 && (int)character <= 70) == false) {\r\n                binary = \"Please enter valid hexadecimal string\";\r\n                return binary;\r\n            }\r\n\t\t\t\r\n            else if ((int)character >= 65 && (int)character <= 70)\r\n                decimal = (int)character - 55;\r\n            \r\n\t\t\telse\r\n                decimal = Integer.parseInt(String.valueOf(character));\r\n\t\t\t\t\r\n\t\t\tbinary += convertDecimalToBinary(decimal);\r\n\t\t\t\t\r\n\t\t}\r\n\t\treturn binary;\r\n\t\t\r\n\t}\r\n\t\r\n\t// Decimal to Binary Conversion\r\n\tstatic String convertDecimalToBinary(int decimal) {\r\n\t\tString binary = \"\";\r\n\t\twhile(decimal != 0) {\r\n\t\t\tbinary = (decimal % 2) + binary;\r\n\t\t\tdecimal /= 2;\r\n\t\t}\r\n\t\twhile(binary.length() % 4 != 0) {\r\n\t\t\tbinary = \"0\" + binary;\r\n\t\t}\r\n\t\treturn binary;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\tSystem.out.println(\"Enter a hexadecimal string: \");\r\n\t\t\r\n\t\tString hexadecimal = input.nextLine().toUpperCase();\r\n\t\tSystem.out.print(convertHexaDecimalToBinary(hexadecimal));\r\n\t\t\r\n\t}\r\n}",
  "javascript": "export function convertHexadecimalToBinary(hex) {\n  return parseInt(hex, 16).toString(2);\n}\n",
  "kotlin": "fun main() {\n    val hexaDecimalN = \"AA\"\n    var i = 0\n    var binaryNum = \"\"\n    while(i < hexaDecimalN.length) {\n        when(hexaDecimalN[i]) {\n            '0'  -> binaryNum += \"0000\"\n            '1'  -> binaryNum += \"0001\"\n            '2'  -> binaryNum += \"0010\"\n            '3'  -> binaryNum += \"0011\"\n            '4'  -> binaryNum += \"0100\"\n            '5'  -> binaryNum += \"0101\"\n            '6'  -> binaryNum += \"0110\"\n            '7'  -> binaryNum += \"0111\"\n            '8'  -> binaryNum += \"1000\"\n            '9'  -> binaryNum += \"1001\"\n            'A', 'a'  -> binaryNum += \"1010\"\n            'B', 'b'  -> binaryNum += \"1011\"\n            'C', 'c'  -> binaryNum += \"1100\"\n            'D', 'd'  -> binaryNum += \"1101\"\n            'E', 'e'  -> binaryNum += \"1110\"\n            'F', 'f'  -> binaryNum += \"1111\"\n        }\n        i++\n    }\n    println(\"$binaryNum\")\n}\n",
  "ruby": "puts \"A\".to_i(16).to_s(2)\n",
  "typescript": "function convertHexaDecimalToBinary(hex: string) {\n  return parseInt(hex, 16).toString(2).padStart(4, \"0\");\n}\n\nconsole.log(convertHexaDecimalToBinary(\"A\")); // 1010\n",
  "description": "\n## Write a program to convert hexadecimal to binary\n\nHexadecimal is a base-16 number system. It uses sixteen digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, and F. The digits are called hexits. A hexit is the smallest unit of information in a computer. A hexit can be used to represent a single value, such as 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, or F, or it can be used to represent a single state, such as on or off.\n\nBinary is a base-2 number system. It uses only two digits: 0 and 1. The digits are called bits. A bit is the smallest unit of information in a computer. A bit can be either 0 or 1. A bit can be used to represent a single value, such as 0 or 1, or it can be used to represent a single state, such as on or off.\n\nTo convert a hexadecimal number to binary, we can use the following algorithm:\n\n1. Convert the hexadecimal number to decimal.\n2. Convert the decimal number to binary.\n\n```txt\nInput  : A\nOutput : 1010\n```\n\n---\n",
  "trackId": 628,
  "lastUpdated": "2024-01-26T11:58:50Z",
  "contributors": [
    "Saipraneeth99",
    "harshraj8843",
    "apurvagandhi",
    "anandfresh",
    "RiteshK-611",
    "gsquareg2",
    "joao-vitor-souza",
    "Chirag8023",
    "imtiyaz786",
    "RShalman",
    "rakibul-islam-raju",
    "ynbh"
  ],
  "julia": "println(\"Enter a hexadecimal number: \") \nx = readline()\ny = parse(Int, x, base=16)\ny = string(y, base=2)\nprintln(\"Binary of \", x, \": \", y)",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc hexToBinary(hex string) string {\n\tdec, err := strconv.ParseUint(hex, 16, 64)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\tbinary := fmt.Sprintf(\"%064b\", dec)\n\tbinaryWithoutLeadingZeros := strings.TrimLeft(binary, \"0\")\n\treturn binaryWithoutLeadingZeros\n}\n\nfunc main() {\n\thex := \"3\"\n\tbinary := hexToBinary(hex)\n\tfmt.Println(\"Hexadecimal:\", hex)\n\tfmt.Println(\"Binary:\", binary)\n}\n",
  "php": "<?php\n\nfunction hexaToBinary($hex) {\n $binary = base_convert($hex, 16, 2);\n echo $hex . ' -> binary value is: ' . $binary;\n}\n\nhexaToBinary('A')\n?>\n",
  "perl": "#!/usr/bin/env perl\nuse strict;\nuse warnings;\n\nmy $hexa = 'A'; \nmy $value =  hex ( $hexa );\nprintf ( \"Binary Equivalent : %b\\n\", $value );\n",
  "python": "hnum = input()\n\nhnum = int(hnum, 16)\nbnum = bin(hnum)\n\nprint(bnum[2:])\n",
  "r": "# Function to convert a single hexadecimal digit to binary\nhexDigitToBinary <- function(hexDigit) {\n  decimalValue <- as.integer(strtoi(hexDigit, base=16))\n  binaryString <- sprintf(\"%04s\", paste(rev(as.integer(intToBits(decimalValue))), collapse = \"\"))\n  binaryString <- substr(binaryString, nchar(binaryString)-3, nchar(binaryString))\n  \n  return(binaryString)\n}\n\n# Function to convert full hexadecimal to binary\nhexToBinary <- function(hexNumber) {\n  hexNumber <- toupper(gsub(\"\\\\s\", \"\", hexNumber))\n  binaryResult <- \"\"\n  \n  for (i in 1:nchar(hexNumber)) {\n    singleHex <- substr(hexNumber, i, i)\n    binaryResult <- paste0(binaryResult, hexDigitToBinary(singleHex))\n  }\n\n  return(binaryResult)\n}\n\n# Check if an argument is provided\nargs <- commandArgs(trailingOnly = TRUE)\nif (length(args) == 0) {\n  stop(\"No hexadecimal number provided. Usage: Rscript convert_hexadecimal_to_binary.r <hex_number>\", call. = FALSE)\n}\n\n# Use the first argument as the input\nhexNumber <- args[1]\nbinaryResult <- hexToBinary(hexNumber)\ncat(\"Hexadecimal:\", hexNumber, \"- Binary:\", binaryResult, \"\\n\")\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "typescript",
    "julia",
    "go",
    "php",
    "perl",
    "python",
    "r"
  ]
}