{
  "slug": "print-fibonacci-series-by-recursion",
  "title": "Print Fibonacci Series By Recursion",
  "c": "#include <stdio.h>\n\nconst int num_one = 0;\nconst int num_two = 1;\n\nint main() {\n    int input;\n    printf(\"Input  : \");\n    scanf(\"%d\", &input);\n    switch (input) {\n        case 1:\n            printf(\"Output : 0\");\n            break;\n        case 2:\n            printf(\"Output : 0 1\");\n            break;\n        default: /* for more than 2 numbers */\n            int two_num_ago = num_one;\n            int one_num_ago = num_two;\n            int next_num = num_one + num_two;\n\n            /* print first two numbers first */\n            printf(\"Output : 0 1 \");\n\n            /* iteration starts from third number */\n            for (int i = 0; i < input - 2; i++) {\n                printf(\"%d \", next_num);\n\n                /* finding next number for next iteration */\n                two_num_ago = one_num_ago;\n                one_num_ago = next_num;\n                next_num = one_num_ago + two_num_ago;\n\n            }\n    }\n    printf(\"\\n\");\n    return 0;\n}\n",
  "c-plus-plus": "\n//PrintFibonacciSeriesByRecursion.cpp\n#include <iostream>\n\nusing namespace std;\n\nvoid PrintFibonacciSeriesByRecursion(int n,int a,int b){\n    int c;\n    if(n>=1){\n        c=a+b;\n        a=b;\n        b=c;\n        cout<<c<<\" \";\n        PrintFibonacciSeriesByRecursion(n-1,a,b);\n    }\n}\n\nint main()\n{\n    int n;cin>>n;\n    cout<<0<<\" \"<<1<<\" \";\n    PrintFibonacciSeriesByRecursion(n-2,0,1);\n}\n\n//Contributed by Raghav Garg",
  "c-sharp": "using System;\r\n\r\npublic class FibonacciSeries {\r\n    public static int fibonacciSeries(int n)\r\n    {\r\n        if (n == 0) return 0;   \r\n        if (n == 1) return 1; \r\n        return fibonacciSeries(n - 1) + fibonacciSeries(n - 2);\r\n    }\r\n    public static void Main()\r\n    {\r\n        Console.Write(\"Input: \");\r\n        int n = Convert.ToInt32(Console.ReadLine());\r\n        Console.Write(\"Output: \");\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            Console.Write(\"{0} \", fibonacciSeries(i));\r\n        }\r\n       \r\n    }\r\n       \r\n\r\n\r\n    \r\n}\r\n",
  "java": "public class print_fibonacci_series_by_recursion{\n \n    public static void main(String args[]){\n                \n        int n = 5;\n        for(int i=0;i<n;i++){                                     //prints the numbers  \n            System.out.println(fibonacci(i) + \" \");               // 0 1 1 2 3\n        }\n        \n    }\n    \n    public static int fibonacci(int i){              //recursive function to get fibonacci numbers\n        if(i == 0){\n            return 0;\n        }\n        if(i == 1){\n            return 1;\n        }        \n        return fibonacci(i - 1) + fibonacci(i - 2);\n    }    \n    \n}\n",
  "javascript": "function getFiboNumber(n) {\n  if (n <= 1) {\n    return n;\n  } else {\n    return getFiboNumber(n - 1) + getFiboNumber(n - 2);\n  }\n}\n\nlet input = 5;\nlet output = \"\";\nfor (let i = 0; i < input; i++) {\n  output = output + \" \" + getFiboNumber(i);\n}\nconsole.log(output);\n",
  "kotlin": "fun main() {\n    print(\"Enter No. to Print Fibonacci: \")\n    val num = readln().toInt()\n    print(\"Fibonacci Series of $num is: ${fibonacciRecursion(num).asList()}\")\n}\n\nprivate fun fibonacciRecursion(num: Int): IntArray {\n    val arr = IntArray(num)\n    fib(num, arr)\n    return arr\n}\n\nprivate fun fib(num: Int, arr: IntArray): Int {\n    if (num <= 1) {\n        arr[0] = 0\n        return 0\n    }\n    if (num == 2) {\n        arr[1] = 1\n        return 1\n    }\n    if (arr[num - 1] != 0) return arr[num - 1]\n    arr[num - 1] = fib(num - 1, arr) + fib(num - 2, arr)\n    return arr[num - 1]\n}\n",
  "ruby": "def printFibonacci(a,b,term) \n\tif term > 0 \n\t\tsum = a + b;\n\t\tprint sum, \" \";\n\t\ta = b;\n\t\tb = sum;\n\t\tprintFibonacci(a, b, term-1);\n\tend\nend\n\na=0;\nb=1;\n\nprintFibonacci(a, b, 6);\n",
  "typescript": "function getFiboNumber(n: number): number {\n  if (n <= 1) {\n    return n;\n  } else {\n    return getFiboNumber(n - 1) + getFiboNumber(n - 2);\n  }\n}\n\nconst input: number = 5;\nlet output: string = \"\";\nfor (let i = 0; i < input; i++) {\n  output = output + \" \" + getFiboNumber(i);\n}\nconsole.log(output);\n",
  "description": "\n## Write a program to print fibonacci series by recursion\n\n```txt\nInput  : 5\nOutput : 0 1 1 2 3\n```\n\n---\n",
  "trackId": 1489,
  "lastUpdated": "2023-08-03T20:39:16Z",
  "contributors": [
    "harshraj8843",
    "apurvagandhi",
    "roberanegussie",
    "anandfresh",
    "leslieyip02",
    "joao-vitor-souza",
    "Badboy-16",
    "vedha-vikash-pixel",
    "UsmanFani",
    "jyotik09",
    "grraghav120",
    "PraaneshSelvaraj"
  ],
  "go": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc fib(n int) int {\n\tif n == 0 {\n\t\treturn 0\n\t} else if n == 1 {\n\t\treturn 1\n\t} else {\n\t\treturn fib(n-1) + fib(n-2)\n\t}\n}\n\nfunc main() {\n\tn := 5\n\tfor i := 0; i < n; i++ {\n\t\tfmt.Print(fib(i), \" \")\n\t}\n}\n",
  "haskell": "fib :: Integer -> Integer\nfib 0 = 0\nfib 1 = 1\nfib x = fib (x - 1) + fib (x - 2)\n\nmain = do\n    let n = 5\n    let s = [fib x | x <- [0 .. n - 1]]\n\n    putStrLn . unwords . map show $ s",
  "php": "<?php  \n\nfunction fibonacciSeries($num){\n      \n    if ($num == 0)\n        return 0;    \n    else if ($num == 1)\n        return 1;    \n    else\n        return fibonacciSeries($num-1) + fibonacciSeries($num-2);\n}\n  \n$num = 5;\nfor ($counter = 0; $counter < $num; $counter++){  \n    echo fibonacciSeries($counter),' ';\n}\n\n?>\n",
  "python": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n\nnumber = int(input())\nfor i in range(number):\n    print(fibonacci(i), end=\" \")\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "typescript",
    "go",
    "haskell",
    "php",
    "python"
  ]
}