{
  "slug": "check-pangram-string",
  "title": "Check Pangram String",
  "c": "#include <stdio.h> /*printf, scanf */\n#include <string.h> /* strlen */\n#include <ctype.h> /* tolower */\n\nint isPangram(char *str);\n\nint main()\n{\n    /* assuming string won't be greater then 100 chars */\n    char str[100] = {0};\n\n    fgets(str,100,stdin);\n\n    if(isPangram(str))\n    {\n        printf(\"Pangram sentence\\n\");\n    }\n\n    else\n    {\n        printf(\"Not a pangram\\n\");\n    }\n\n    return 0;\n}\n\nint isPangram(char *str)\n{\n    char abc[26] = {0};\n    size_t i = 0;\n    int idx = 0;\n\n    for(i = 0; i < strlen(str); ++i)\n    {\n        idx = tolower(str[i]) - 'a';\n        \n        if(idx >= 0 && idx <= 25)\n        {\n            ++abc[idx];\n        }\n    }\n\n    for(i = 0; i < 26; ++i)\n    {\n        if(abc[i] == 0)\n        {\n            /* false */\n            return 0;\n        }\n    }\n\n    /* true */\n    return 1;\n}",
  "c-plus-plus": "#include <iostream>\n\nusing namespace std;\n\nbool IsPangram(string str);\n\nint main()\n{\n    string str;\n    cout << \"Input  : \";\n    getline(cin,str);\n\n    cout << \"Output : \";\n    if(IsPangram(str) == 1) {\n        cout << \"Pangram sentence\";\n    } else {\n        cout << \"Not a Pangram sentence\";\n    }\n\n    return 0;\n}\n\nbool IsPangram(string str)\n{\n    int arr[26] = {0};\n\n    for(size_t i = 0; i < str.size(); ++i) {\n        if((tolower(str[i]) >= 'a') && (tolower(str[i]) <= 'z')) {\n            ++arr[tolower(str[i]) - 'a'];\n        }\n    }\n\n    for(size_t i = 0; i < 26; ++i) {\n        if(!arr[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n",
  "c-sharp": "using System;\nclass Pangram {\n    public static bool checkPangram(string str)\n    {\n        bool[] mark = new bool[26];\n        int index = 0;\n\n        for (int i = 0; i < str.Length; i++) {\n            if ('A' <= str[i] && str[i] <= 'Z')\n                index = str[i] - 'A';\n            else if ('a' <= str[i] && str[i] <= 'z')\n                index = str[i] - 'a';\n            else\n                continue;\n\n            mark[index] = true;\n        }\n \n        for (int i = 0; i <= 25; i++)\n            if (mark[i] == false)\n                return (false);\n        return (true);\n    }\n \n    public static void Main()\n    {\n        string str = \"The quick brown fox jumps over the lazy dog\";\n \n        if (checkPangram(str) == true)\n            Console.WriteLine(str + \" \\n is a pangram.\");\n        else\n            Console.WriteLine(str + \" \\n is not a pangram.\");\n    }\n}\n \n",
  "java": "import java.util.*;\n\npublic class CheckPangramString {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String str = sc.nextLine();\n        boolean[] mark = new boolean[26];\n\n        for (int i = 0; i < str.length(); i++) {\n            if ('A' <= str.charAt(i) && str.charAt(i) <= 'Z') {\n                mark[str.charAt(i) - 'A'] = true;\n            } else if ('a' <= str.charAt(i) && str.charAt(i) <= 'z') {\n                mark[str.charAt(i) - 'a'] = true;\n            }\n        }\n\n        for (int i = 0; i < 26; i++) {\n            if (!mark[i]) {\n                System.out.println(\"Not a pangram\");\n                sc.close();\n                return;\n            }\n        }\n\n        System.out.println(\"Pangram Sentence\");\n        sc.close();\n    }\n}",
  "javascript": "function checkPangramString(string) {\n  let isPangram = false;\n\n  const lowerCasedSentence = string.toLowerCase();\n  const letters = lowerCasedSentence.match(/[a-z]/g);\n  const uniqueLetters = new Set(letters);\n\n  if (uniqueLetters.size === 26) {\n    isPangram = true;\n  }\n\n  if (isPangram) {\n    return \"Pangram sentence\";\n  } else {\n    return \"Not Pangram sentence\";\n  }\n}\n",
  "kotlin": "fun main() {\n    print(\"Enter text : \")\n    println()\n    var input = readLine()\n\n    try {\n        println(\"Is Pangram = \" + CheckPangramString(input!!))\n    } catch (exception: Exception) {\n        println(\"Input string was not in a correct format\")\n    }\n\n}\n\nprivate fun CheckPangramString(statement: String): Boolean {\n    val letters = \"abcdefghijklmnopqrstuvwxyz\".split(\"\")\n    return statement.lowercase().split(\"\").containsAll(letters)\n\n}\n",
  "ruby": "def pangram (string)\n   # downcase the string, scan it for letters of the alphabet (a-z), remove duplicates and examine the length of the returned array\n   if string.downcase.scan(/[a-z]/).uniq.length == 26 \n     puts \"Pangram sentence\"\n   else\n     puts \"Not a Pangram sentence\"\n   end\nend\n",
  "swift": "import Swift\nimport Foundation\n\nfunc CheckPangram(str: String) -> Bool {\n   let lowercaseString = str.lowercased()\n   let alphabet = \"abcdefghijklmnopqrstuvwxyz\" \n   for l in alphabet {\n      if !lowercaseString.contains(l) {\n         return false\n      }\n   }\n   return true\n}\n\nlet str1 = \"The quick brown fox jumps over the lazy dog\"\nprint(\"'\\(str1)' is pangram?:\", CheckPangram(str: str1))\n",
  "typescript": "/**\n *\n * @param {string} string - the string to be checked\n * @returns {string} if the string is Pangram or not\n */\n\nconst checkPangramString = (string: string) => {\n  string = string.toLowerCase();\n\n  const len: number = string.length;\n  const alphabets: string = \"abcdefghijklmnopqrstuvwxyz\";\n  const aplhabetsArray: string[] = alphabets.split(\"\");\n\n  for (let i: number = 0; i < len; i++) {\n    const elem = string[i];\n    const index = aplhabetsArray.indexOf(elem);\n\n    if (index !== -1) {\n      aplhabetsArray.splice(index, 1);\n    }\n  }\n\n  if (!aplhabetsArray.length === true) {\n    return \"Pangram sentence\";\n  } else {\n    return \"Not a pangram sentence\";\n  }\n};\n\n// Test Case\nconsole.log(checkPangramString(\"The quick brown fox jumps over the lazy dog\"));\n// Returns Pangram sentence\n",
  "description": "\n## Write a program to check pangram string\n\nA pangram is a sentence containing every letter in the English Alphabet.\n\n```txt\nInput  : The quick brown fox jumps over the lazy dog\nOutput : Pangram sentence\n```\n\n---\n",
  "trackId": 1260,
  "lastUpdated": "2023-12-05T18:14:51Z",
  "contributors": [
    "anandfresh",
    "harshraj8843",
    "esivakumar26",
    "Osher160",
    "rksp25",
    "joao-vitor-souza",
    "amoghrajesh",
    "MufaddalHakim",
    "Denice-S",
    "rakibul-islam-raju",
    "Jordan6794",
    "metaloozee"
  ],
  "julia": "function ispangram(input::AbstractString)\n    input = lowercase(input)\n    letters = Set('a':'z')\n    for ch in input\n        delete!(letters, ch)\n    end\n    isempty(letters)\nend\n\nif ispangram(\"The quick brown fox jumps over the lazy dog\")\n  println(\"Pangram\")\nelse\n println(\"Not a Pangram\")\nend\n",
  "dart": "bool isPangram(String text){\n  Set<String> letters = \"abcdefghijklmnopqrstuvwxyz\".split(\"\").toSet();\n  text.toLowerCase().split(\"\").forEach((l) => letters.remove(l));\n  return letters.length == 0;\n}\n\nvoid main() {\n  print(isPangram(\"The quick brown fox jumps over the lazy dog\"));\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc checkIfPangram(s string) bool {\n\tif len(s) < 26 {\n\t\treturn false\n\t}\n\tvar data = make(map[rune]bool)\n\tfor _, i := range s {\n\t\tdata[i] = true\n\t}\n\treturn len(data) == 26\n}\n\nfunc main() {\n\tvar s string\n\tfmt.Scanln(&s)\n\n\tisPangram := checkIfPangram(s)\n\n\tif isPangram {\n\t\tfmt.Printf(\"%s is a pangram\\n\", s)\n\t} else {\n\t\tfmt.Printf(\"%s is not a pangram\\n\", s)\n\t}\n}\n",
  "php": "<?php\nfunction isPangram($param) {\n\t\t\n\t\t$sentences = strtolower(trim($param));\n\t\t$letters = str_split(\"thequickbrownfoxjumpsoverthelazydog\");\n\n\t\tforeach ($letters as $letter) {\n\t\t\tif (!strstr($sentences, $letter))\n\t\t\t\treturn 'Not a Pangram sentence';\n\t\t}\n\n\t\treturn 'Pangram sentence';\n\t}\n\necho isPangram('The quick brown fox jumps over the lazy dog');\n?>\n",
  "perl": "$string=\"The quick brown fox jumps over the lazy dog\";\n$string = lc($string);\n$string =~ s/\\s*//g;\n$string =~s/(.)(?=.*?\\1)//g;\nprint $string;\nprint length($string);\nif(length($string) == 26){\n    print 'Pangram Sentence';\n} else {\n    print 'Not a Pangram Sentence';\n}\n",
  "python": "import string\n\nalphabet = set(string.ascii_lowercase)\n\n\ndef ispangram(str):\n    return sum(1 for i in set(str) if 96 < ord(i) <= 122) == 26\n\n\nstring = input()\nif ispangram(string) == True:\n    print(\"Pangram sentence\")\nelse:\n    print(\"Not pangram sentence\")\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "dart",
    "go",
    "php",
    "perl",
    "python"
  ]
}