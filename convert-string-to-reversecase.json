{
  "slug": "convert-string-to-reversecase",
  "title": "Convert String To Reversecase",
  "c": "#include <stdio.h> /* printf */\n\nvoid ConvertStringToReverseCase(char *str);\n\nint main()\n{\n    char str[40];\n    \n    fgets(str, 40, stdin);\n\n    ConvertStringToReverseCase(str);\n\n    printf(\"%s\\n\", str);\n\n    return 0;\n}\n\nvoid ConvertStringToReverseCase(char *str)\n{\n    char *curr = str;\n\n    while(*curr != '\\0')\n    {\n        /* -checks if the curr place of the string is high | low case*/\n\n        /* -add / remove 32( the difference between lower case and high case) to match the new ascii value*/\n        if((*curr >= 'A') && (*curr <= 'Z'))\n        {\n            *curr = *curr + 32;\n        }\n\n        else if((*curr >= 'a') && (*curr <= 'z'))\n        {\n            *curr = *curr - 32;\n        }\n\n        ++curr;\n    }\n}\n",
  "c-plus-plus": "#include <iostream>\nusing namespace std;\n\nstring reversecase(string str){\n    for (int i = 0; i < str.length(); i++){\n        if (str[i] >= 'a' && str[i] <= 'z')\n            str[i] = str[i] - 32;\n        else if (str[i] >= 'A' && str[i] <= 'Z')\n            str[i] = str[i] + 32;\n    }\n    return str;\n}\n\nint main(){\n    string str;\n    cout << \"Enter a string: \";\n    getline(cin, str);\n    cout << reversecase(str);\n    return 0;\n}",
  "c-sharp": "using System;\npublic class GFG {\n \nstatic public void Main()\n  {\n Console.WriteLine(\"Enter a String : \");\n\n string str = Console.ReadLine();\n    string x = \"\";\n    for (int i = 0; i < str.Length; i++) {\n      char ch = str[i];\n      if (Char.IsUpper(ch)) {\n        x += Char.ToLower(ch);\n      }\n      else {\n        x += Char.ToUpper(ch);\n      }\n    }\n    Console.WriteLine(\"Reversecase of given String : \"+x);\n  }\n}\n",
  "f-sharp": "open System\n\n// function to reverse the case of a given string\nlet reverseCase (inputString: string) =\n    let mutable result = System.Text.StringBuilder()\n    for c in inputString do\n        if Char.IsLower c then\n            result.Append(Char.ToUpper(c) |> string)\n        else\n            result.Append(Char.ToLower(c) |> string)\n    result.ToString()\n\nlet inputString = \"hello world\"\nlet reversedString = reverseCase inputString\nprintfn \"%s\" reversedString\n",
  "java": "class Main\n{\n    public static String reverseCase(String str)\n    {\n        char[] chars = str.toCharArray();\n        for (int i = 0; i < chars.length; i++)\n        {\n            chars[i] = Character.isUpperCase(chars[i])\n                                ? Character.toLowerCase(chars[i])\n                                : Character.toUpperCase(chars[i]);\n        }\n        return new String(chars);\n    }\n \n    public static void main(String[] args)\n    {\n        String str = \"hello world\";\n        System.out.println(reverseCase(str));\n    }\n}\n",
  "javascript": "function convertStringToReverseCase(str) {\n  return str\n    .split(\"\")\n    .map((char) =>\n      char.match(/[a-z]/) ? char.toUpperCase() : char.toLowerCase(),\n    )\n    .join(\"\");\n}\n",
  "kotlin": "fun String.reverseCaseOfString(): String {\n    val inputCharArr = toCharArray() // Converting the input to char array\n    var output = \"\"\n    for (i in inputCharArr.indices) {\n        output += if (inputCharArr[i].isUpperCase()) { // Checking the character is in uppercase or not\n            inputCharArr[i].lowercaseChar() // Converting the char to lower case\n        } else {\n            inputCharArr[i].uppercaseChar() // Converting the char to upper case\n        }\n    }\n    return output\n}\n",
  "ruby": "def convertStringToReverseCase string\n    puts string.swapcase\nend\n\nconvertStringToReverseCase \"hello world\"",
  "scala": "object ReverseCaseConverter {\n  def reverseCase(input: String): String = {\n    input.map {\n      case c if c.isLower => c.toUpper\n      case c if c.isUpper => c.toLower\n      case c => c\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(\"Enter a string: \")\n    val inputString = scala.io.StdIn.readLine()\n    val reversedString = reverseCase(inputString)\n    println(\"Reversed Case String: \" + reversedString)\n  }\n}\n",
  "swift": "func reverseCase(_ input: String) -> String {\n    var result = \"\"\n    \n    for char in input {\n        if char.isLowercase {\n            result.append(char.uppercased())\n        } else {\n            result.append(char.lowercased())\n        }\n    }\n    \n    return result\n}\n\n// Take input from the user\nprint(\"Enter a string:\")\nif let inputString = readLine() {\n    let outputString = reverseCase(inputString)\n    print(\"Output:\", outputString)\n} else {\n    print(\"Error reading input.\")\n}\n",
  "typescript": "const string2ReverseCase = (str: string): string => {\n  return str\n    .split(\"\")\n    .map((char) =>\n      char.match(/[a-z]/) ? char.toUpperCase() : char.toLowerCase(),\n    )\n    .join(\"\");\n};\n\nconsole.log(string2ReverseCase(\"hello world\"));\n",
  "description": "\n## Write a program to convert string to reversecase\n\nReversecase is a style of writing in which all lowercase letters are converted to uppercase and all uppercase letters are converted to lowercase.\n\n```txt\nInput  : \"hello world\"\nOutput : \"HELLO WORLD\"\n```\n\n---\n",
  "trackId": 5163,
  "lastUpdated": "2024-06-16T13:55:26Z",
  "contributors": [
    "harshraj8843",
    "pradeepch2107",
    "Shreyash3110",
    "Rohan-Kalgutkar",
    "bhushanmarathe",
    "pranavsilimkhan",
    "devbyharshit",
    "vedantpople4",
    "rsitters",
    "RiteshK-611",
    "Noriomusha",
    "yashasvini121",
    "Osher160",
    "anandfresh",
    "jfinley6",
    "skevprog"
  ],
  "julia": "println(\"Enter s string: \")\nstr = readline()\nreversed = \"\"\nfor c in str \n  if islowercase(c)\n    global reversed *= uppercase(c)\n  elseif isuppercase(c)\n    global reversed *= lowercase(c)\n  else\n    global reversed *= c\n  end\nend\n\nprintln(\"Given string in reversecase: \", reversed)",
  "dart": "import 'dart:io';\n\nvoid main() {\n  //Asks user to enter a string\n  stdout.write('Enter a string: ');\n  //Reads users input\n  String input = stdin.readLineSync()!;\n  //Calls function to convert input to reverse case\n  String reverseCaseString = reverseCase(input);\n  //Prints reversed case string\n  print(reverseCaseString);\n}\n\nString reverseCase(String str) {\n  String reversed = '';\n  //Iterates through each character of input string\n  for (int i = 0; i < str.length; i++) {\n    String char = str[i];\n    //Checks if character is uppercase\n    if (char == char.toUpperCase()) {\n      //Converts uppercase character to lowercase and adds it to reversed string\n      reversed += char.toLowerCase();\n    } else {\n      //Converts lowercase character to uppercase and adds it to reversed string\n      reversed += char.toUpperCase();\n    }\n  }\n  //Returns reversed case string\n  return reversed;\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar s string\n\tfmt.Scanf(\"%s\", &s)\n\tfor int i=0;i<len(s);i++{\n\t\tif(s[i])\n\t}\n\tfmt.Println(s)\n}\n",
  "haskell": "import Data.Char (toUpper, toLower)\n\nreverseCase :: String -> String\nreverseCase = map (\\c -> if isLower c then toUpper c else toLower c)\n\nisLower :: Char -> Bool\nisLower c = c >= 'a' && c <= 'z'\n\nmain :: IO ()\nmain = do\n  let inputString = \"hello world\"\n      outputString = reverseCase inputString\n  putStrLn $ \"Input: \" ++ inputString\n  putStrLn $ \"Output: \" ++ outputString\n",
  "php": "<?php\n\n$str = \"hello world\";\n\nprint strtolower($str) ^ strtoupper($str) ^ $str;\n\n?>\n",
  "perl": "sub reverseCase {\n    my ($str) = @_;\n    \n\n    $str =~ tr/a-zA-Z/A-Za-z/;\n    \n    return $str;\n}\n\n\nmy $inputString = \"hello world\";\nmy $outputString = reverseCase($inputString);\n\n\nprint \"Input: $inputString\\n\";\nprint \"Output: $outputString\\n\";\n",
  "python": "string = input(\"Enter the String:\")\nprint(\"Reversecase for the given String : \", string.swapcase())\n",
  "r": "convert_to_reverse_case <- function(input_string) {\n  result <- \"\"\n  \n  for (char in strsplit(input_string, NULL)[[1]]) {\n    if (char %in% letters) {\n      result <- paste0(result, ifelse(char %in% toupper(letters), tolower(char), toupper(char)))\n    } else {\n      result <- paste0(result, char)\n    }\n  }\n  \n  return(result)\n}\n\n# Example usage\ninput_str <- \"hello world\"\noutput_str <- convert_to_reverse_case(input_str)\n\n# Print the result\ncat(\"Input String: \", input_str, \"\\n\")\ncat(\"Output String: \", output_str, \"\\n\")\n",
  "rust": "fn main(){\n    let input = \"hello world\";\n    let mut ans = String::with_capacity(input.len());\n    for i in input.chars(){\n        if i.is_ascii_uppercase(){\n            ans.push(i.to_ascii_lowercase());\n        } else if i.is_ascii_lowercase(){\n            ans.push(i.to_ascii_uppercase());\n        } else {ans.push(i);}\n    }\n    println!(\"{}\", ans);\n}",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "scala",
    "swift",
    "typescript",
    "julia",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}