{
  "slug": "find-gcd-of-two-numbers",
  "title": "Find Gcd Of Two Numbers",
  "c": "#include <stdio.h>\n\nint find_gcd(int a,int b){\n    int gcd=0;\n    for(int i=1;i<=a && i<=b;i++){\n        if(a%i==0 && b%i==0) gcd=i;\n    }\n    return gcd;\n}\nint main(){\n    \n    int number1,number2,gcd=0;\n    printf(\"Please enter number1 : \");\n    scanf(\"%d\",&number1);\n    printf(\"Please enter number2 : \");\n    scanf(\"%d\",&number2);\n    gcd=find_gcd(number1,number2);\n    printf(\"%d\\n\",gcd);\n    return 0;\n}\n",
  "c-plus-plus": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b)\n{\n    int result = min(a, b); \n    while (result > 0) {\n        if (a % result == 0 && b % result == 0) {\n            break;\n        }\n        result--;\n    }return result;\n}\n \nint main()\n{\n    int a = 10, b = 5;\n    cout << \"GCD of \" << a << \" and \" << b << \" is \"\n         << gcd(a, b);\n    return 0;\n}",
  "c-sharp": "using System;\n\nclass GCD {\n  static void Main(string[] args) {\n    int x = 12;\n    int y = 18;\n    int gcd = 1;\n    int temp;\n\n    if (x > y) {\n      temp = x;\n      x = y;\n      y = temp;\n    }\n\n    for(int i = 1; i < (x+1); i++) {\n      if (x%i == 0 && y%i == 0)\n        gcd = i;\n    }\n\n    Console.WriteLine(\"GCD of \"+ x +\" and \"+ y +\" is: \"+ gcd);\n  }\n}\n",
  "java": "import java.util.*;\npublic class FindGcdOfTwoNumbers\n{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        System.out.println(\"Enter two numbers :\");\n        int a=sc.nextInt();\n        int b=sc.nextInt();\n\n\t\tint result = Math.min(a, b); // Find Minimum of a nd b\n\t\twhile (result > 0) {\n\t\t\tif (a % result == 0 && b % result == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tresult--;\n\t\t}\n\t\tSystem.out.println(result); \n\t}\n}",
  "javascript": "function gcd(a, b) {\n  let result = Math.min(a, b);\n  while (result > 0) {\n    if (a % result == 0 && b % result == 0) {\n      break;\n    }\n    result--;\n  }\n  return result;\n}\n\nlet a = 10;\nlet b = 5;\nconsole.log(\"GCD of \", a, \" and \", b, \" is \", gcd(a, b));\n",
  "kotlin": "import java.util.Scanner\n\n// contributed by Nudennie White / Tc2r1 www.github.com/tc2r1\nfun main() {\n    val scanner = Scanner(System.`in`)\n\n    print(\"Enter First Positive Whole Number: \")\n    val number1 = scanner.nextInt()\n\n    print(\"Enter Second Positive Whole Number: \")\n    val number2 = scanner.nextInt()\n\n    var gcd = gcdBySteinsAlgorithm(number1, number2)\n    println(\"Stein's Algorithm says it is: $gcd\")\n\n    gcd = gcdByEuclidsAlgorithm(number1, number2)\n    println(\"Euclid's Algorithm says it is: $gcd\")\n}\n\nfun gcdByEuclidsAlgorithm(n1: Int, n2: Int): Int {\n    return if (n2 == 0) {\n        n1\n    } else gcdByEuclidsAlgorithm(n2, n1 % n2)\n}\n\nfun gcdBySteinsAlgorithm(number1: Int, number2: Int): Int {\n    var n1 = number1\n    var n2 = number2\n    if (n1 == 0) {\n        return n2\n    }\n    if (n2 == 0) {\n        return n1\n    }\n    var n = 0\n    while (n1 or n2 and 1 == 0) {\n        n1 = n1 shr 1\n        n2 = n2 shr 1\n        n++\n    }\n    while (n1 and 1 == 0) {\n        n1 = n1 shr 1\n    }\n    do {\n        while (n2 and 1 == 0) {\n            n2 = n2 shr 1\n        }\n        if (n1 > n2) {\n            val temp = n1\n            n1 = n2\n            n2 = temp\n        }\n        n2 -= n1\n    } while (n2 != 0)\n    return n1 shl n\n}",
  "ruby": "puts \"Please enter the first number to check greatest common divisor: \"\nfirst_number = gets.to_i\nputs \"Please enter the second number to check greatest common divisor: \"\nsecond_number = gets.to_i\n\ndef findGCDOfTwoNumbers(num1, num2)\n    result = num1.gcd(num2)\n    puts \"The greatest common divisor is #{result}\"\nend\n\nfindGCDOfTwoNumbers(first_number, second_number)",
  "swift": "import Swift\nimport Foundation\n\nfunc findGCD(num1: Int, num2: Int) -> Int {\n   var x = 0\n\n   var y: Int = max(num1, num2)\n   var z: Int = min(num1, num2)\n\n   while z != 0 {\n      x = y\n      y = z\n      z = x % y\n   }\n   return y\n}\n\nvar result = findGCD(num1:12, num2:18)\nprint(\"GCD: \", result)\n",
  "typescript": "function findGCD(number1: number, number2: number): number {\n  let result: number = Math.min(number1, number2);\n  while (result > 0) {\n    if (number1 % result == 0 && number2 % result == 0) {\n      break;\n    }\n    result--;\n  }\n  return result; // return GCD between number1 and number2\n}\n\nfindGCD(12, 18);\n",
  "description": "\n## Write a program to find gcd of two numbers\n\nGCD (Greatest Common Divisor) of two numbers is the largest number that divides both of them. A simple way to find GCD is to factorize both numbers and multiply common factors.\n\n```txt\nInput  : 12 18\nOutput : 6\n```\n\n---\n",
  "trackId": 2860,
  "lastUpdated": "2023-08-30T13:19:14Z",
  "contributors": [
    "anandfresh",
    "harshraj8843",
    "esivakumar26",
    "jfinley6",
    "joao-vitor-souza",
    "SnehaNarendran01071998",
    "anshu-6537",
    "Tc2r1",
    "horerick46",
    "sksachin7z2",
    "shailendrakanherkar18"
  ],
  "scala": "object HelloWorld {\n  \n  def gcd(a:Int,b:Int):Int={\n    if(b==0){\n      return a\n    }\n    else{\n      gcd(b,a%b)\n    }\n  }\n  \n\t def main(args: Array[String]): Unit=\n\t {\n\t   var a = scala.io.StdIn.readInt\n\t   var b = scala.io.StdIn.readInt\n\t   \n\t    if (a == 0){\n\t      println( b)\n\t    }\n\t    \n      if (b == 0){\n        println( a)\n      }\n        \n      println(gcd(a,b))\n\t }\n}\n",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc main() {\n\tfmt.Println(\"Enter the first number: \")\n\tvar firstNumber int\n\tfmt.Scanln(&firstNumber)\n\tfmt.Println(\"Enter the second number: \")\n\tvar secondNumber int\n\tfmt.Scanln(&secondNumber)\n\tvar greatestCommonDivisor = gcd(firstNumber, secondNumber)\n\tfmt.Println(\"The GCD of \" + strconv.Itoa(firstNumber) + \" and \" + strconv.Itoa(secondNumber) + \" is \" + strconv.Itoa(greatestCommonDivisor))\n}\n\nfunc gcd(firstNumber int, secondNumber int) int {\n\tvar gcd int\n\tif(firstNumber == 0){\n\t\treturn secondNumber\n\t}\n\tif(secondNumber == 0){\n\t\treturn firstNumber\n\t}\n\tfor i := 1; i <= firstNumber && i <= secondNumber; i++ {\n\t\tif firstNumber%i == 0 && secondNumber%i == 0 {\n\t\t\tgcd = i\n\t\t}\n\t}\n\treturn gcd\n}\n",
  "php": "<?php\n$x = 50;\n$y = 100;\nif ($x > $y) {\n  $temp = $x;\n  $x = $y;\n  $y = $temp;\n}\n\nfor($i = 1; $i < ($x+1); $i++) {\n  if ($x%$i == 0 and $y%$i == 0)\n    $gcd = $i;\n}\n\necho \"GCD of $x and $y is: $gcd\";\n?>",
  "perl": "sub gcd {\n  my ($a, $b) = @_;\n  ($a,$b) = ($b,$a) if $a > $b;\n  while ($a) {\n    ($a, $b) = ($b % $a, $a);\n  }\n  return $b;\n}\n\nprint gcd(12, 18);\n",
  "python": "def findGCD(x, y):\n    while x != y:\n        if x > y:\n            x = x - y\n        elif x < y:\n            y = y - x\n    return x\n\n\nx = int(input(\"n1: \"))\ny = int(input(\"n2: \"))\nprint(f\"GCD of {x} and {y} : {findGCD(x,y)}\")\n",
  "rust": "// Rust program to find the GCD \r\n\r\nuse std::io;\r\n\r\nfn main() \r\n{\r\n    let mut n1:i32 = 0;\r\n    let mut n2:i32 = 0;\r\n    let mut rem:i32= 0;\r\n    let mut x:i32  = 0;\r\n    let mut y:i32  = 0;\r\n    \r\n    let mut input1 = String::new();\r\n    let mut input2 = String::new();\r\n    \r\n    println!(\"Enter Number1: \");\r\n    io::stdin().read_line(&mut input1).expect(\"Not a valid string\");\r\n    n1 = input1.trim().parse().expect(\"Not a valid number\");\r\n\r\n    println!(\"Enter Number2: \");\r\n    io::stdin().read_line(&mut input2).expect(\"Not a valid string\");\r\n    n2 = input2.trim().parse().expect(\"Not a valid number\");\r\n    \r\n    if (n1 > n2) \r\n    {\r\n        x = n1;\r\n        y = n2;\r\n    }\r\n    else \r\n    {\r\n        x = n2;\r\n        y = n1;\r\n    }\r\n\r\n    rem = x % y;\r\n\r\n    while (rem != 0) {\r\n        x = y;\r\n        y = rem;\r\n        rem = x % y;\r\n    }\r\n\r\n    println!(\"Greatest Common Divisor is: {}\", y);\r\n}",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "scala",
    "go",
    "php",
    "perl",
    "python",
    "rust"
  ]
}