{
  "slug": "check-anagram-string",
  "title": "Check Anagram String",
  "c": "#include<stdio.h>\r\n#include<string.h>\r\nint SIZE = 1000;\r\nint isAnagram(char s1[],char s2[]){\r\n\tif(strlen(s1) != strlen(s2)) return 0;\r\n\tint mp[26] = {0};\r\n\tfor(int i = 0;i<strlen(s1);i++){\r\n\t\tmp[s1[i] - 'a']++;\r\n\t\tmp[s2[i] - 'a']--;\r\n\t}\r\n\tfor(int i=0;i<26;i++)\r\n\t\tif(mp[i]!=0) return 0;\r\n\t\t\t\r\n\treturn 1;\r\n}\r\nvoid main() {\r\n\tchar s1[SIZE],s2[SIZE];\r\n\tprintf(\"Enter string1: \");\r\n\tscanf(\"%s\",s1);\r\n\t\r\n\tprintf(\"\\nEnter string2: \");\r\n\tscanf(\"%s\",s2);\r\n\t\r\n\tint flag = isAnagram(s1,s2);\r\n\tif(flag == 1)\r\n\t\tprintf(\"%s and %s are anagrams\\n\",s1,s2);\r\n\telse\r\n\t\tprintf(\"%s and %s are not anagrams\\n\",s1,s2);\r\n\t\r\n}",
  "c-plus-plus": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n// Function to check if two strings are anagrams\nbool areAnagrams(string str1, string str2) {\n    // If the strings have different lengths, they cannot be anagrams\n    if (str1.length() != str2.length()) return false;\n    \n    // Sort both strings\n    sort(str1.begin(), str1.end());\n    sort(str2.begin(), str2.end());\n    \n    // If the sorted strings are equal, they are anagrams\n    return str1 == str2;\n}\n\nint main() {\n    string s1, s2;\n    \n    // Take input from user for both strings\n    cin>> s1 >> s2;\n    \n    // Check if the strings are anagrams and output result\n    if (areAnagrams(s1, s2)) cout << \"Anagram Strings\" << endl;\n    else cout << \"Not Anagram Strings\" << endl;\n}\n",
  "c-sharp": "using System;\n \npublic class Anagram {\n   public static void Main () {\n      string str1 = \"pan\";\n      string str2 =  \"nap\";\n      char[] ch1 = str1.ToLower().ToCharArray();  \n      char[] ch2 = str2.ToLower().ToCharArray();  \n      Array.Sort(ch1);  \n      Array.Sort(ch2);  \n      string val1 = new string(ch1);  \n      string val2 = new string(ch2);  \n      if (val1 == val2) {  \n         Console.WriteLine(\"Anagram Strings\");  \n      } else {  \n         Console.WriteLine(\"Not an Anagram Strings\");  \n      }  \n   }\n}\n",
  "f-sharp": "let isAnagram (s1:string) (s2:string) =\n    let sortedS1 = s1.ToLower().ToCharArray() |> Array.sort\n    let sortedS2 = s2.ToLower().ToCharArray() |> Array.sort\n    sortedS1 = sortedS2\n\nlet s1 = \"pan\"\nlet s2 = \"nap\"\n\nif isAnagram s1 s2 then\n    printfn \"Anagram Strings\"\nelse\n    printfn \"Not Anagram Strings\"\n",
  "javascript": "const anagramChecker = (str1, str2) => {\n  if (str1.length !== str2.length) {\n    return false;\n  }\n\n  return (\n    str1.toLowerCase().split(\"\").sort().join(\"\") ===\n    str2.toLowerCase().split(\"\").sort().join(\"\")\n  );\n};\n\n// console.log(anagramChecker('aAbb', 'bBaa'))\n",
  "kotlin": "fun anagramChecker(s: String, t: String): Boolean {\n    if (s.length != t.length) return false\n\n    val sMap = mutableMapOf<Char, Int>()\n    val tMap = mutableMapOf<Char, Int>()\n\n    for (i in s.indices){\n        sMap[s[i]] = sMap.getOrDefault(s[i], 0) + 1\n        tMap[t[i]] = tMap.getOrDefault(t[i], 0) + 1\n    }\n\n    for (ch in sMap.keys){\n        if (sMap[ch] != tMap[ch]) return false\n    }\n    return true\n}\n\n//println(anagramChecker(\"pan\", \"nap\"))",
  "ruby": "def checkAnagram str1, str2\n    if str1.reverse == str2\n        \"Anagram Strings\"\n    else\n        \"Not Anagram Strings\"\n    end\nend\n\nputs checkAnagram \"pan\", \"nap\"\n",
  "swift": "func sortedString(str: String) -> String {\n    let str1 = str.sorted()\n    let str2 = String(str1)\n    return str2\n}\n\nfunc AreAnagram(str1: String, str2: String){\n    let str1lowerCase = str1.lowercased()\n    let str2lowerCase = str2.lowercased()\n    let str1 = sortedString(str: str1lowerCase)\n    let str2 = sortedString(str: str2lowerCase)\n    if str1 == str2 {\n        print(\"Are Anagram\")\n    }\n    else {\n        print(\"Are not Anagram\")\n    }\n}\n\nAreAnagram(str1: \"listen\", str2: \"SiLent\")\n\n\n",
  "typescript": "function isAnagram(str1: string, str2: string): boolean {\n  // Remove any whitespace and convert to lowercase\n  str1 = str1.replace(/\\s/g, \"\").toLowerCase();\n  str2 = str2.replace(/\\s/g, \"\").toLowerCase();\n\n  // Check if the strings have the same length\n  if (str1.length !== str2.length) {\n    return false;\n  }\n\n  // Create objects to count the number of occurrences of each letter\n  const counts1 = {};\n  const counts2 = {};\n\n  // Count the occurrences of each letter in the first string\n  for (const char of str1) {\n    counts1[char] = (counts1[char] || 0) + 1;\n  }\n\n  // Count the occurrences of each letter in the second string\n  for (const char of str2) {\n    counts2[char] = (counts2[char] || 0) + 1;\n  }\n\n  // Compare the counts of each letter\n  for (const char in counts1) {\n    if (counts1[char] !== counts2[char]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// Read user input for the two strings\nconst readline = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nreadline.question(\"Enter the first string: \", (str1) => {\n  readline.question(\"Enter the second string: \", (str2) => {\n    // Check if the strings are anagrams of each other\n    if (isAnagram(str1, str2)) {\n      console.log(`${str1} and ${str2} are anagrams of each other.`);\n    } else {\n      console.log(`${str1} and ${str2} are not anagrams of each other.`);\n    }\n\n    // Close the readline interface\n    readline.close();\n  });\n});\n",
  "description": "\n## Write a program to check Anagram strings\n\nTwo strings are said to be anagrams if they make a meaningful word by rearranging or shuffling the letters of the string. In other words, we can say that two strings are anagrams if they contain the same characters but in different order.\n\n```txt\nInput  : pan, nap\nOutput : Anagram Strings\n```\n\n---\n",
  "trackId": 6642,
  "lastUpdated": "2024-06-16T16:59:29Z",
  "contributors": [
    "harshraj8843",
    "anandfresh",
    "akaliacius",
    "abhisek-1221",
    "Preetiraj3697",
    "nishadmahmud",
    "andrey100f",
    "deepakkhanna18"
  ],
  "julia": "function is_anagram(str1::String, str2::String)\n    # Remove any spaces and convert both strings to lowercase\n    str1 = replace(lowercase(str1), r\"\\s+\" => \"\")\n    str2 = replace(lowercase(str2), r\"\\s+\" => \"\")\n\n    # Check if the length of both strings is the same\n    if length(str1) != length(str2)\n        return false\n    end\n\n    # Sort the characters in both strings and check if they are equal\n    if sort(collect(str1)) == sort(collect(str2))\n        return true\n    else\n        return false\n    end\nend\n\n# Example usage\nprintln(\"Enter 2 Strings\") #take input\nstr1 = readline()\nstr2 = readline()\n\nif is_anagram(str1, str2)\n    println(\"Anagram Strings\")\nelse\n    println(\"Not Anagram Strings\")\nend",
  "scala": "def areAnagram(str1: String, str2: String): Boolean =\n  str1.sorted == str2.sorted\n\nprintln(areAnagram(\"pan\", \"nap\")) \n",
  "dart": "import 'dart:io';\nimport 'dart:core';\n\nvoid main(){\n    stdout.write(\"Enter first string: \");\n    String? str1 = stdin.readLineSync();\n    stdout.write(\"Enter second string: \");\n    String? str2 = stdin.readLineSync();\n    List <String> str1_lst = str1!.split('');\n    List <String> str2_lst = str2!.split('');\n    str1_lst.sort();\n    str2_lst.sort();\n    if (str1_lst.join() == str2_lst.join()){\n        print(\"$str1 and $str2 are anagrams.\");\n    }\n    else{\n        print(\"$str1 and $str2 are not anagrams.\");\n    }\n}",
  "go": "package main\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\nfunc sortString(str string) string {\n\t// Convert the string to a slice of runes\n\truneSlice := []rune(str)\n\n\t// Sort the slice of runes\n\tsort.Slice(runeSlice, func(i, j int) bool {\n\t\treturn runeSlice[i] < runeSlice[j]\n\t})\n\n\t// Convert the sorted slice of runes back to a string\n\tsortedString := string(runeSlice)\n\n\treturn sortedString\n}\nfunc AreAnagrams(a string,b string){\n\ta = sortString(a)\n\tb = sortString(b)\n\tif a==b{\n\t\tfmt.Println(\"Anagram strings\")\n\t} else{\n\t\tfmt.Println(\"Not Anagram strings\")\n\t}\n}\nfunc main(){\n\tAreAnagrams(\"pan\",\"nap\")\n}",
  "haskell": "import Data.List\nmain = do\n    putStrLn \"enter word 1: \"\n    word1 <- getLine\n\n    putStrLn \"enter word 2: \"\n    word2 <- getLine\n    \n    putStrLn (toResult word1 word2)\n\ntoResult [] [] = \"word1 and word2 are empty\"\ntoResult [] word2 = \"word1 is empty!\"\ntoResult word1 [] = \"word2 is empty!\"\n\ntoResult word1 word2 \n    | sort word1 == sort word2 = \"Strings are Anagrams\" \n    | otherwise = \"Strings are not Anagrams\"",
  "php": "<?php\n\nfunction anagram($pharse1, $pharse2){\n   $status = 'Not an Anagram Strings';\n  if($pharse1 && $pharse2){\n   $pharse1=strtolower(str_replace(\" \",\"\", $pharse1));\n   $pharse2=strtolower(str_replace(\" \",\"\", $pharse2));\n   $pharse1 = str_split($pharse1);\n   $pharse2 = str_split($pharse2);\n   sort($pharse1);\n   sort($pharse2);\n   if($pharse1 === $pharse2){\n   $status = 'Anagram Strings';\n   } \n  }\n  return $status;\n\n}\n\necho anagram('pan' , 'nap');\n?>\n",
  "perl": "use warnings;\nuse strict;\nprint \"Enter the first word : \";\nmy $word1 = <STDIN>;\nprint \"Enter the second word : \";\nmy $word2 = <STDIN>;\nmy $letters1 = join \"\", sort split \"\", $word1;\nmy $letters2 = join \"\", sort split \"\", $word2;\nprint $letters1;\nprint $letters2;\nif ($letters1 eq $letters2) {\n  print \"String are Anagram\"; \n}\nelse {\n  print \"String are not Anagram\";\n}\n",
  "python": "# Function to check if string is anagram or not\ndef isanagram(str1, str2):\n    return sorted(str1) == sorted(str2)\n\n\nstring1 = input()\nstring2 = input()\nif isanagram(string1, string2) == True:\n    print(\"Anagram Strings\")\nelse:\n    print(\"Not Anagram Strings\")\n",
  "r": "checkAnagram <- function(string1, string2) {\n  if (nchar(string1) != nchar(string2)) {\n    return(\"Not Anagram Strings\")\n  } else {\n    if (all(sort(strsplit(string1, \"\")[[1]]) == sort(strsplit(string2, \"\")[[1]]))) {\n      return(\"Anagram Strings\")\n    } else {\n      return(\"Not Anagram Strings\")\n    }\n  }\n}\n\n# Here's how to use the function:\n\nstring1 <- \"pan\"\nstring2 <- \"nap\"\nresult <- checkAnagram(string1, string2)\ncat(result) # Output: Anagram Strings\n",
  "rust": "use std::io;\n\nfn main() {\n\n  let mut buff = String::new();\n\n  io::stdin().read_line(&mut buff);\n\n  let strs: Vec<&str> = buff.split(\",\").collect();\n\n  let mut char_vec_a : Vec<char> = strs[0].to_owned().chars().collect();\n  let mut char_vec_b : Vec<char> = strs[1].to_owned().chars().collect();\n\n  char_vec_a.sort();\n  char_vec_b.sort();\n\n  if  char_vec_a==char_vec_b {\n      println!(\"Anagram Strings\");\n  } else {\n      println!(\"Not Anagram Strings\");\n  }\n\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}