{
  "slug": "find-the-eigenvalues-of-a-matrix",
  "title": "Find The Eigenvalues Of A Matrix",
  "c": "#include math.h\n#include stdio.h\n\n#define MAX_ITER 100\n#define TOLERANCE 1e-6\n\nvoid jacobi(double a[][3], int n)\n{\n    int i, j, k;\n    double b[3], c[3], sum, tmp;\n\n    for (k = 0; k < MAX_ITER; k++)\n    {\n        for (i = 0; i < n; i++)\n        {\n            for (j = 0; j < n; j++)\n            {\n                if (i != j)\n                {\n                    sum = 0.0;\n                    for (int l = 0; l < n; l++)\n                        if (l != i && l != j)\n                            sum += fabs(a[i][l] * a[l][j]);\n\n                    if (fabs(a[i][j]) > TOLERANCE + sum)\n                    {\n                        tmp = (a[j][j] - a[i][i]) / (2 * a[i][j]);\n                        b[i] = tmp + sqrt(1.0 + tmp * tmp);\n                        b[j] = tmp - sqrt(1.0 + tmp * tmp);\n\n                        for (int l = 0; l < n; l++)\n                        {\n                            if (l != i && l != j)\n                            {\n                                c[l] = a[l][i] / b[i];\n                                a[l][j] = a[l][j] / b[j];\n                            }\n                        }\n\n                        for (int l = 0; l < n; l++)\n                        {\n                            if (l != i && l != j)\n                            {\n                                a[i][l] = a[l][i] * b[j];\n                                a[l][j] = c[l] * b[i];\n                            }\n                        }\n\n                        a[i][j] = -a[i][j] * b[i] * b[j];\n                    }\n                }\n            }\n        }\n    }\n\n    printf(\"Eigenvalues: \");\n    for (i = 0; i < n; i++)\n        printf(\"%.6lf \", a[i][i]);\n}\n\nint main()\n{\n    double a[3][3] = {{2, 1, 1},\n                      {1, 2, 1},\n                      {1, 1, 2}};\n    int n = 3;\n\n    jacobi(a, n);\n\n    return 0;\n}\n",
  "c-plus-plus": "#include <armadillo>\n#include <iostream>\n\nusing namespace std;\nusing namespace arma;\n\nvoid findTheEigenValuesOfAMatrix(arma::mat& X)\n{\n    cx_vec eigval;\n\n    eig_gen(eigval, X);\n\n    cout << \"Found following eigenvalues \\n\";\n    cout << eigval << endl;\n}\n\nint main()\n{\n    mat X = {{1,2,3},{4,5,6},{7,8,9}};\n    findTheEigenValuesOfAMatrix(X);\n}",
  "c-sharp": "\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Eigenvalues\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int[,] matrix = new int[3, 3];\n            int i, j;\n            Console.WriteLine(\"Enter the 9 elements of the matrix: \");\n            for (i = 0; i < 3; i++)\n            {\n                for (j = 0; j < 3; j++)\n                {\n                    matrix[i, j] = Convert.ToInt32(Console.ReadLine());\n                }\n            }\n            Console.WriteLine(\"The matrix is: \");\n            for (i = 0; i < 3; i++)\n            {\n                Console.WriteLine();\n                for (j = 0; j < 3; j++)\n                {\n                    Console.Write(\"\\t\" + matrix[i, j]);\n                }\n            }\n            Console.WriteLine(\"\\nThe eigenvalues of the matrix are: \");\n            for (i = 0; i < 3; i++)\n            {\n                Console.WriteLine((matrix[0, 0] + matrix[1, 1] + matrix[2, 2]) - (matrix[0, i] + matrix[1, i] + matrix[2, i]));\n            }\n            Console.ReadLine();\n        }\n    }\n}\n",
  "f-sharp": "#r \"nuget: MathNet.Numerics\"\n\nopen MathNet.Numerics.LinearAlgebra\n\n// Define a function to calculate eigenvalues\nlet calculateEigenvalues (matrix : Matrix<float>) =\n    // Use the EigenValues method to compute eigenvalues\n    let eigenvalues = matrix.Evd().EigenValues\n\n    // Convert the eigenvalues to a list\n    eigenvalues.AsArray() |> Array.toList\n\n// Define the input matrix\nlet inputMatrix = matrix [\n    [1.0; 2.0; 3.0];\n    [4.0; 5.0; 6.0];\n    [7.0; 8.0; 9.0]\n]\n\n// Call the function to calculate eigenvalues\nlet eigenvalues = calculateEigenvalues inputMatrix\n\n// Print the eigenvalues\nprintfn \"Eigenvalues:\"\neigenvalues |> List.iter (printfn \"%f\")\n",
  "java": "import java.util.Arrays;\n\npublic class FindTheEigenvaluesOfAMatrix {\n    public static void main(String[] args) {\n        // Read the input matrix\n        Scanner scanner = new Scanner(System.in);\n        double[][] matrix = {{1,2,3},{4,5,6},{7,8,9}};\n\n        // Calculate the eigenvalues\n        double[] eigenvalues = calculateEigenvalues(matrix);\n\n        // Print the eigenvalues\n        System.out.println(Arrays.toString(eigenvalues));\n    }\n\n    public static double[] calculateEigenvalues(double[][] matrix) {\n        // Create the companion matrix\n        double[][] companionMatrix = createCompanionMatrix(matrix);\n\n        // Calculate the eigenvalues of the companion matrix\n        double[] eigenvalues = calculateEigenvalues(companionMatrix);\n\n        return eigenvalues;\n    }\n\n    public static double[][] createCompanionMatrix(double[][] matrix) {\n        // Get the size of the matrix\n        int size = matrix.length;\n\n        // Create the companion matrix\n        double[][] companionMatrix = new double[size][size];\n        for (int i = 0; i < size; i++) {\n            for (int j = 0; j < size; j++) {\n                if (i < size - 1) {\n                    companionMatrix[i][j] = -matrix[i + 1][j] / matrix[i][0];\n                } else {\n                    companionMatrix[i][j] = 0;\n                }\n            }\n        }\n\n        return companionMatrix;\n    }\n}\n",
  "javascript": "import { eigs, round } from \"mathjs\";\n\n/* Sample matrix. */\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\n/* Destructuring the object returned by `eigs(matrix)` and assigning the `values` property to the\nvariable `eigenvalues`. */\nconst { values } = eigs(matrix);\n/* Rounding the eigenvalues to 15 decimal places. */\nconst eigenvalues = values.map()(round(num, 15));\n\nconsole.log(eigenvalues); // Expected: [ 1e-15, -1.116843969807044, 16.116843969807043 ]\n",
  "ruby": "require \"matrix\"\n   \nmat1 =  Matrix[[1, 2, 3], [4, 5, 6], [7, 8, 9]]        \n   \nputs  mat1.eigen()\n",
  "swift": "import Foundation\n\nfunc eigenvalues(ofMatrix matrix: [[Double]]) -> [Double] {\n    let size = matrix.count\n    var a = matrix\n    var q = Array(repeating: Array(repeating: 0.0, count: size), count: size)\n    for i in 0..<size {\n        q[i][i] = 1.0\n    }\n\n    for i in 0..<50 {\n        var maxIndex = i\n        var maxValue = abs(a[i][i])\n        for row in i + 1..<size {\n            if abs(a[row][i]) > maxValue {\n                maxIndex = row\n                maxValue = abs(a[row][i])\n            }\n        }\n\n        if maxValue < 1e-10 {\n            break\n        }\n\n        if maxIndex != i {\n            (a[i], a[maxIndex]) = (a[maxIndex], a[i])\n            (q[i], q[maxIndex]) = (q[maxIndex], q[i])\n        }\n\n        for row in i + 1..<size {\n            let factor = a[row][i] / a[i][i]\n            for col in i..<size {\n                a[row][col] -= factor * a[i][col]\n            }\n            for col in 0..<size {\n                q[row][col] -= factor * q[i][col]\n            }\n        }\n    }\n\n    var eigenValues = [Double](repeating: 0.0, count: size)\n    for i in 0..<size {\n        eigenValues[i] = a[i][i]\n    }\n\n    return eigenValues\n}\n\nfunc getInput() -> [[Double]] {\n    let rows = 3\n    print(\"Input:\")\n    var matrix = [[Double]](repeating: [Double](repeating: 0.0, count: rows), count: rows)\n    for i in 0..<rows {\n        let values = readLine()!.split(separator: \" \").map { Double($0)! }\n        matrix[i] = Array(values)\n    }\n    return matrix\n}\n\nlet matrix = getInput()\nlet eigenValues = eigenvalues(ofMatrix: matrix)\nprint(\"Output: \\(eigenValues)\") \n",
  "typescript": "import { eigs, MathNumericType, round } from \"mathjs\";\n\n/* Sample matrix. */\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\n/* Destructuring the object returned by `eigs(matrix)` and assigning the `values` property to the\nvariable `eigenvalues`. */\nconst { values } = eigs(matrix);\n/* Rounding the eigenvalues to 15 decimal places. */\nconst eigenvalues = values.map((num: MathNumericType | MathNumericType[]) =>\n  round(num, 15),\n);\n\nconsole.log(eigenvalues); // Expected: [ 1e-15, -1.116843969807044, 16.116843969807043 ]\n",
  "description": "\n## Write a program to find the eigenvalues of a matrix\n\nThe eigenvalues and eigenvectors of a linear transformation are the values and vectors that determine the transformation. The eigenvalues of a matrix A are the values λ for which the matrix equation Av = λv has a non-trivial solution.\n\n```txt\nInput  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n16.116843969807043\n-1.1168439698070427\n0.9999999999999998\n```\n\n---\n",
  "trackId": 5575,
  "lastUpdated": "2023-11-27T09:24:09Z",
  "contributors": [
    "harshraj8843",
    "farhan-sayeed",
    "MadhuS-1605",
    "ReprogramAkash",
    "KyleWynne",
    "Iqbalmde",
    "harisdev-netizen",
    "anandfresh",
    "abhisek-1221",
    "Bogumil-Sapinski-Mobica",
    "Preetiraj3697",
    "MustansarFarooq",
    "ANUSHRAV01",
    "patel-aum",
    "vikasgond807",
    "aarishmkhan",
    "Heyeso",
    "ShadyResurrected"
  ],
  "julia": "using LinearAlgebra\narr = [1 2 3; 4 5 6; 7 8 9]\ndata = eigen(arr)\nprint(data.values)",
  "scala": "import org.apache.commons.math3.linear.{EigenDecomposition, Array2DRowRealMatrix}\n\nval matrix = new Array2DRowRealMatrix(Array(\n  Array(1.0, 2.0, 3.0),\n  Array(4.0, 5.0, 6.0),\n  Array(7.0, 8.0, 9.0)\n))\n\nval eigen = new EigenDecomposition(matrix)\nval eigenvalues = eigen.getRealEigenvalues\n\nprintln(\"Eigenvalues:\")\neigenvalues.foreach(println)\n",
  "dart": "import 'dart:io';\nimport 'dart:math';\n\n// A function to read a matrix from standard input\nList<List<double>> readMatrix() {\n  // Read the number of rows and columns\n  print('Enter the number of rows:');\n  int rows = int.parse(stdin.readLineSync()!);\n  print('Enter the number of columns:');\n  int cols = int.parse(stdin.readLineSync()!);\n\n  // Create an empty matrix\n  List<List<double>> matrix = [];\n\n  // Read each row of the matrix\n  for (int i = 0; i < rows; i++) {\n    print('Enter row ${i + 1}:');\n    List<double> row = stdin\n        .readLineSync()!\n        .split(' ')\n        .map((e) => double.parse(e))\n        .toList();\n    // Check if the row has the correct length\n    if (row.length != cols) {\n      throw Exception('The row has an invalid length');\n    }\n    // Add the row to the matrix\n    matrix.add(row);\n  }\n\n  // Return the matrix\n  return matrix;\n}\n\n// A function to find the eigenvalues of a matrix\nList<double> eigenvalues(List<List<double>> matrix) {\n  // Check if the matrix is square\n  int n = matrix.length;\n  for (int i = 0; i < n; i++) {\n    if (matrix[i].length != n) {\n      throw Exception('The matrix is not square');\n    }\n  }\n\n  // Find the trace and determinant of the matrix\n  double trace = 0;\n  double det = 0;\n  for (int i = 0; i < n; i++) {\n    trace += matrix[i][i];\n    det += matrix[i][i] * matrix[(i + 1) % n][(i + 1) % n] -\n        matrix[i][(i + 1) % n] * matrix[(i + 1) % n][i];\n  }\n\n  // Find the discriminant of the characteristic polynomial\n  double d = trace * trace - 4 * det;\n\n  // If the discriminant is negative, there are no real eigenvalues\n  if (d < 0) {\n    throw Exception('The matrix has no real eigenvalues');\n  }\n\n  // If the discriminant is zero, there is one repeated eigenvalue\n  if (d == 0) {\n    return [trace / 2];\n  }\n\n  // If the discriminant is positive, there are two distinct eigenvalues\n  return [(trace + sqrt(d)) / 2, (trace - sqrt(d)) / 2];\n}\n\n// A sample main function to test the program\nvoid main() {\n  // Read a matrix from standard input\n  print('Enter a square matrix:');\n  List<List<double>> matrix = readMatrix();\n\n  // Print the eigenvalues of the matrix\n  print('The eigenvalues of the matrix are:');\n  print(eigenvalues(matrix));\n}",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"gonum.org/v1/gonum/mat\"\n)\n\nfunc main() {\n\n\tdata := []float64{\n\t\t1, 2, 3,\n\t\t4, 5, 6,\n\t\t7, 8, 9,\n\t}\n\n\n\tA := mat.NewDense(3, 3, data)\n\n\n\tvar eig mat.Eigen\n\tok := eig.Factorize(A, false)\n\tif !ok {\n\t\tlog.Fatal(\"Eigenvalue computation failed\")\n\t}\n\n\n\teigenvalues := eig.Values(nil)\n\n\n\tfmt.Println(\"Eigenvalues:\")\n\tfor _, lambda := range eigenvalues {\n\t\tfmt.Printf(\"%.15f\\n\", real(lambda))\n\t}\n}\n",
  "php": "<?php\n\nfunction findEigenvalues($matrix) {\n  // calculate the characteristic polynomial of the matrix\n  $charPoly = array();\n  $n = count($matrix);\n  for ($i = 0; $i < $n; $i++) {\n    $charPoly[$i] = -$matrix[$i][$i];\n  }\n  $charPoly[$n] = 1;\n\n  for ($k = 1; $k < $n; $k++) {\n    for ($i = $k; $i < $n; $i++) {\n      $mult = $matrix[$i][$k - 1] / $matrix[$k - 1][$k - 1];\n      for ($j = $k; $j < $n; $j++) {\n        $matrix[$i][$j] -= $mult * $matrix[$k - 1][$j];\n      }\n      $charPoly[$n - $k] *= (1 - $mult);\n    }\n  }\n\n  // find the roots of the characteristic polynomial using the quadratic formula\n  $eigenvalues = array();\n  $a = $charPoly[0];\n  $b = $charPoly[1];\n  $c = $charPoly[2];\n  $discriminant = $b * $b - 4 * $a * $c;\n  if ($discriminant > 0) {\n    $eigenvalues[] = (-$b + sqrt($discriminant)) / (2 * $a);\n    $eigenvalues[] = (-$b - sqrt($discriminant)) / (2 * $a);\n  } else if ($discriminant == 0) {\n    $eigenvalues[] = -$b / (2 * $a);\n  } else {\n    $realPart = -$b / (2 * $a);\n    $imaginaryPart = sqrt(abs($discriminant)) / (2 * $a);\n    $eigenvalues[] = $realPart + $imaginaryPart . 'i';\n    $eigenvalues[] = $realPart - $imaginaryPart . 'i';\n  }\n\n  return $eigenvalues;\n}\n\n// test the function\n$matrix = array(\n  array(1, 2, 3),\n  array(4, 5, 6),\n  array(7, 8, 9)\n);\n\n$eigenvalues = findEigenvalues($matrix);\n\nforeach ($eigenvalues as $eigenvalue) {\n  echo $eigenvalue . \"\\n\";\n}\n\n/* The output of this program is:\n\n    16.116843969807043\n    -1.1168439698070427\n    0.9999999999999998 */",
  "perl": "#!/usr/local/bin/perl\n#\n#this is how to install cpanm modules needed on mac\n#curl -L http://xrl.us/installperlosx | bash\n#cpanm Math::Matrix\n#cpanm Math::MatrixDecomposition\n#cpanm Math::MatrixDecomposition::Eigen\nuse Math::MatrixDecomposition qw(eig);\nuse Math::Matrix;\n\n$matrix = Math::Matrix -> new([1,2,3],[4,5,6],[7,8,9]);\n$matrix -> print(\"Matrix\\n\");\n\n$row = $matrix -> getrow(0);\n\n$eigen = eig ($A = [1,2,3,4,5,6,7,8,9]);\n\nprint \"Print eigen values\\n\";\n@all_values = $eigen->values();\nforeach $value (@all_values) {\n  print \"$value\\n\";\n}\n",
  "python": "import numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nw, v = np.linalg.eig(arr)\n\n[print(x) for x in np.round(w, decimals=4)]\n",
  "r": "# Define the matrix\nA <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3, byrow = TRUE)\n\n# Find the eigenvalues\neigenvalues <- eigen(A)$values\n\n# Print the eigenvalues\nprint(eigenvalues)\n",
  "rust": "use ndarray::{Array1, Array2};\nuse ndarray_linalg::Eigen;\n\nfn main() {\n    // Read the matrix from standard input\n    let mut input = String::new();\n    std::io::stdin().read_line(&mut input).unwrap();\n    let matrix: Array2<f64> = input.trim().split(';')\n        .map(|row| row.trim().split(' ')\n            .map(|val| val.parse().unwrap())\n            .collect::<Vec<f64>>())\n        .collect::<Vec<Vec<f64>>>()\n        .into_iter()\n        .map(|row| row.into_iter().collect::<Array1<f64>>())\n        .collect::<Array2<f64>>();\n\n    // Calculate the eigenvalues\n    let eigenvalues = matrix.eigvals().unwrap();\n\n    // Print the eigenvalues to standard output\n    for (i, &value) in eigenvalues.iter().enumerate() {\n        println!(\"Eigenvalue {}: {}\", i, value);\n    }\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}