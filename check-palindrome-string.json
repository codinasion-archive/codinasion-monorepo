{
  "slug": "check-palindrome-string",
  "title": "Check Palindrome String",
  "c": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    int i, j;\n    char str[20] = \"abba\";\n    \n    j = strlen(str) - 1;\n\n    while (i <= j) {\n        if (str[i] != str[j]) {\n            printf(\"Not a Palindrome String\");\n            return 0;\n        } else {\n            i++;\n            j--;\n        }\n    }\n    printf(\"Palindrome String\");\n    return 1;\n}",
  "c-plus-plus": "#include <iostream>\n\nusing namespace std;\n\nbool isPal (string text)\n{\n\n  int n = text.length ();\n    \n  for (int i = 0; i < n / 2; i++)\n  {\n    if (text[i] != text[n - i - 1])\n      return false;\n  }\n  return true;\n}\n\nint main ()\n{\n  string text = \"abba\";\n\n  if (isPal (text))\n    {\n      cout << \"Palindrome String\" << endl;\n      return 0;\n    }\n  else\n    {\n      cout << \"Not a Palindrome String\" << endl;\n      return 1;\n    }\n\n  return 1;\n}\n",
  "c-sharp": "using System;\nnamespace palindromecheck {\n   class Program {\n      static void Main(string[] args) {\n         string string1, rev;\n         Console.WriteLine (\"Please enter a string : \");\n         string1 = Console.ReadLine();\n         char[] ch = string1.ToCharArray();\n         Array.Reverse(ch);\n         rev = new string(ch);\n         bool b = string1.Equals(rev, StringComparison.OrdinalIgnoreCase);\n         if (b == true) {\n            Console.WriteLine(\"\" + string1 + \" is a Palindrome!\");\n         } else {\n            Console.WriteLine(\" \" + string1 + \" is not a Palindrome!\");\n         }\n         Console.Read();\n      }\n   }\n}\n",
  "java": "import java.util.Scanner;\n\npublic class CheckPalindromeString {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString str = sc.next();\n\t\tint i = 0;\n\t\tint j = str.length() - 1;\n\t\tboolean check = true;\n\t\tsc.close();\n\t\twhile (i <= j) {\n\t\t\tif (str.charAt(i) != str.charAt(j)) {\n\t\t\t\tcheck = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\tSystem.out.println((check) ? \"Palindrome String\" : \"Not Palindrome String\");\n\t}\n}\n",
  "javascript": "function checkPalindromeString(str) {\n  const reverseStr = [...str].reverse().join(\"\");\n  return str === reverseStr;\n}\n\nconsole.log(\n  checkPalindromeString(\"abba\") ? \"Palindrome String\" : \"Not Palindrome String\",\n);\n",
  "kotlin": "fun main() {\n    print(\"Input : \")\n    println()\n    var input = readLine()\n\n    println(\"Is $input palindrome : \" + CheckPalindromeString(input!!))\n\n}\n\nprivate fun CheckPalindromeString(inputStr: String): Boolean {\n    val sb = StringBuilder(inputStr)\n\n    //reverse the string\n    val reverseStr = sb.reverse().toString()\n\n    //compare reversed string with input string\n    return inputStr.equals(reverseStr, ignoreCase = true)\n}\n",
  "ruby": "print \"Please enter a string: \"\ninput_string = gets.chomp\n\ndef checkPalindromeString string\n    if string.downcase == string.reverse.downcase\n        \"Palindrome String\"\n    else\n        \"Not Palindrome String\"\n    end\nend\n\nprint checkPalindromeString input_string\n",
  "swift": "import Swift\nimport Foundation\n\nfunc checkPalindrome(str: String) -> Bool {\n   var reversedString = String(str.reversed())\n   return str == reversedString\n}\n\nvar str1 = \"abba\"\nvar result1 = checkPalindrome(str: str1)\nprint(\"Is String - \\(str1) is palindrome?:\", result1) \n\nvar str2 = \"abba123\"\nvar result2 = checkPalindrome(str: str2)\nprint(\"Is String - \\(str2) is palindrome?:\", result2) \n",
  "typescript": "const checkPalindromeString = (text: string) => {\n  text = text.toLowerCase();\n  const n = text.length;\n  let low = 0;\n  let high = n - 1;\n\n  while (high > low) {\n    if (text[high] != text[low]) {\n      return false;\n    }\n    low++;\n    high--;\n  }\n  return true;\n};\n\n/**\n * Test Case 1:\n * text = \"abba\"\n */\n\nconst string = \"abba\";\nif (checkPalindromeString(string)) {\n  console.log(\"Palindrome String\");\n} else {\n  console.log(\"Not a Palindrome String\");\n}\n",
  "description": "\n## Write a program to check palindrome string\n\nPalindrome string is a string that is same when read from left to right and right to left. For example, \"aba\" is a palindrome string, \"abc\" is not.\n\n```txt\nInput  : abba\nOutput : Palindrome String\n```\n\n---\n",
  "trackId": 1538,
  "lastUpdated": "2023-11-27T09:24:09Z",
  "contributors": [
    "harshraj8843",
    "pedram-mohajer",
    "thecomputerfella",
    "anandfresh",
    "Tushar12222",
    "esivakumar26",
    "Aroskar17",
    "sancoLgates",
    "jfinley6",
    "rksp25",
    "joao-vitor-souza",
    "kangjung",
    "metaloozee",
    "rahmat-dev"
  ],
  "julia": "function is_palindrome(str)\n    cleaned_str = lowercase(strip(str))\n    return cleaned_str == reverse(cleaned_str)\nend\n\n# Example usage:\ninput_str = \"abba\"\nif is_palindrome(input_str)\n    println(\"$input_str is a palindrome.\")\nelse\n    println(\"$input_str is not a palindrome.\")\nend\n",
  "scala": "object HelloWorld {\n\tdef main(args: Array[String]): Unit = {\n\t  val word = scala.io.StdIn.readLine();\n\t  val reverseWord = reverse(word);\n\t  if(reverseWord == word) {\n\t    println(\"Palindrome\")\n\t  } else {\n\t    println(\"Not a Palindrome\")\n\t  }\n\t}\n\n\tdef reverse(s: String): String = {\n   if (s.isEmpty) \"\"\n   else reverse(s.tail) + s.head\n }\n}\n",
  "dart": "bool checkPalin(String s){\n  int l = 0;\n  int r = s.length - 1;\n  while(l < r){\n    if(s[l] != s[r]){\n      return false;\n    }\n    l += 1;\n    r -= 1;\n  }\n  return true;\n}\n\nvoid main() {\n  print(checkPalin(\"abqa\"));\n}",
  "go": "package main\n\nimport \"fmt\"\n\nfunc isPalindrome(str string) bool {\n\tvar reverse string\n\tfor _, v := range str {\n\t\treverse = string(v) + reverse\n\t}\n\treturn str == reverse\n}\n\nfunc main() {\n\tvar input string\n\n\tfmt.Print(\"Input String: \")\n\tfmt.Scan(&input)\n\n\tif (isPalindrome(input)) {\n\t\tfmt.Println(\"Palindrome String\")\n\t} else {\n\t\tfmt.Println(\"Not Palindrome String\")\n\t}\n}\n",
  "php": "<?php\n\nfunction check_palindrome_string($str)\n{\n\treturn strrev($str) == $str;\n}\n\necho check_palindrome_string('abba') ? 'Palindrome String' : 'Not Palindrome String';\n",
  "perl": "print \"Enter a word :\";\nmy $name=<STDIN>;\nchomp($name);\n@arr=split(//,$name);\n$count=@arr;\n$num=0;\nfor ($i=0;$i<$count;$i++){\n    if ($arr[$i] eq $arr[$count-1]){\n        $count--;\n    }else{\n        $num++;\n        last;\n    }\n}\nif ($num == 0){\n    print \"It is a palindrome\";\n}else{\n    print \"It is not a palindrome\";\n}\n",
  "python": "def checkPalindromeString(str):\n    return str == str[::-1]\n\n\nprint(\"Palindrome String\" if checkPalindromeString(\"abba\") else \"Not Palindrome String\")\n",
  "r": "# Function to check if a string is a palindrome\nisPalindrome <- function(s) {\n  s <- tolower(s) \n  s <- gsub(\" \", \"\", s)\n  rev_s <- paste(rev(unlist(strsplit(s, \"\"))), collapse = \"\")\n  return(s == rev_s)\n}\n \n#input\nuser_input <- \"racecar\"\n \n# Check if the user input is a palindrome and print YES or NO\nif (isPalindrome(user_input)) {\n  cat(\"Palindrome String\\n\")\n} else {\n  cat(\"Not Palindrome String\\n\")\n}\n",
  "rust": "fn check_palindrome_string(string: &str) {\n\tlet reverse_string: String = string.chars().rev().collect();\n\n\tif string == reverse_string {\n\t\tprintln!(\"Palindrome String\");\n\t} else {\n\t\tprintln!(\"Not Palindrome String\");\n\t}\n}\n\nfn main() {\n\tcheck_palindrome_string(\"abba\");\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}