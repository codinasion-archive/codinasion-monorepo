{
  "slug": "find-average-of-digits-of-a-number-by-recursion",
  "title": "Find Average Of Digits Of A Number By Recursion",
  "c": "#include <stdio.h>\n\nint sumOfDigits(int n) {\n  if (n == 0) return 0;\n  return (n % 10) + sumOfDigits(n / 10);\n}\n\nvoid main() {\n  int n;\n  printf(\"Enter a number: \");\n  scanf(\"%d\",&n);\n  \n  int sum = sumOfDigits(n);\n  int digit_count = 0;\n  \n  while (n > 0) {\n    digit_count++;\n    n /= 10;\n  }\n  double average = (double)sum/digit_count;\n  printf(\"Average of digits: %lf\\n\",average);\n\n}\n",
  "c-plus-plus": "#include <iostream>\nusing namespace std;\nint sumOfDigits(int n) {\n  if (n == 0) {\n    return 0;\n  }\n  return (n % 10) + sumOfDigits(n / 10);\n}\n\nint main() {\n  int n;\n  cout << \"Enter a number: \";\n  cin >> n;\n  int sum = sumOfDigits(n);\n  int digit_count = 0;\n  while (n > 0) {\n    digit_count++;\n    n /= 10;\n  }\n  cout << \"Average of digits: \" << (double)sum/digit_count << endl;\n  return 0;\n}\n",
  "c-sharp": "using System;\n \nclass AVERAGE {\n\n    static double avgRec(int[] a, int i)\n    {\n        int n = a.Length;\n        if (i == n-1)\n            return a[i];\n     \n        if (i == 0)\n            return ((a[i] + avgRec(a, i+1))/n);\n     \n        return (a[i] + avgRec(a, i+1));\n    }\n     \n \n    public static void Main ()\n    {   \n       int []arr = {1,2,3}; \n       Console.Write(avgRec(arr, 0));\n    }\n}\n",
  "f-sharp": "let rec sumAndCountDigits n sum count =\n    if n = 0 then (sum, count)\n    else sumAndCountDigits (n / 10) (sum + n % 10) (count + 1)\n\nlet averageOfDigits n =\n    let (sum, count) = sumAndCountDigits n 0 0\n    if count = 0 then 0 else sum / count\n\n[<EntryPoint>]\nlet main argv =\n    let number = 123\n    let average = averageOfDigits number\n    printfn \"Input  : %d\" number\n    printfn \"Output : %d\" average\n    0 // Return an integer exit code\n",
  "javascript": "var averageOfDigits = function (num, digitsCount, digitsSum) {\n  if (digitsCount === void 0) {\n    digitsCount = 0;\n  }\n  if (digitsSum === void 0) {\n    digitsSum = 0;\n  }\n  if (num < 10) {\n    digitsCount++;\n    digitsSum += num;\n    return digitsSum / digitsCount;\n  } else {\n    var digit = num % 10;\n    digitsCount++;\n    digitsSum += digit;\n    num = Math.floor(num / 10);\n    return averageOfDigits(num, digitsCount, digitsSum);\n  }\n};\nconsole.log(averageOfDigits(455));\n",
  "kotlin": "import java.util.Scanner\n\nfun averageOfDigits(n: Int, sum: Float = 0.0f, digits: Float = 0.0f) : Float {\n    if (n == 0) return sum / digits;\n\n    var s = sum\n    var d = digits\n\n    s += n % 10\n    d += 1\n\n    return averageOfDigits(n / 10, s, d)\n}\n\n\nfun main() {\n    val reader = Scanner(System.`in`)\n    val number: Int = reader.nextInt() // taking input from Scanner Class\n    reader.close() // Closing the Scanner\n    println(averageOfDigits(number))\n}",
  "ruby": "module Average\n\n  def self.get_avg(number, digits: [])\n    return digits.sum / digits.length if number <= 0\n    digits << (number % 10)\n    get_avg(number / 10, digits: digits)\n  end\n  \nend\n\nputs Average.get_avg(123) # => 2\nputs Average.get_avg(448) # => 5",
  "swift": "// Online Swift compiler to run Swift program online\n// Print \"Hello, World!\" message\nfunc digitAverage(_ num: Int) -> Double {\n    // Base case: if the number is a single digit\n    if num < 10 {\n        return Double(num)\n    } else {\n        // Recursive case: calculate the average of digits\n        let lastDigit = num % 10\n        let remainingDigits = num / 10\n        let averageOfRemainingDigits = digitAverage(remainingDigits)\n        \n        // Calculate the overall average\n        let totalDigits = Double(String(num).count)\n        return (averageOfRemainingDigits * (totalDigits - 1) + Double(lastDigit)) / totalDigits\n    }\n}\n\n// Example usage\nlet number = 123\nlet result = digitAverage(number)\nprint(\"The average of digits in \\(number) is: \\(result)\")\n\n",
  "typescript": "const averageOfDigits = function (\n  num: number,\n  digitsCount: number,\n  digitsSum: number,\n) {\n  if (digitsCount === void 0) {\n    digitsCount = 0;\n  }\n  if (digitsSum === void 0) {\n    digitsSum = 0;\n  }\n  if (num < 10) {\n    digitsCount++;\n    digitsSum += num;\n    return digitsSum / digitsCount;\n  } else {\n    const digit: number = num % 10;\n    digitsCount++;\n    digitsSum += digit;\n    num = Math.floor(num / 10);\n    return averageOfDigits(num, digitsCount, digitsSum);\n  }\n};\nconsole.log(averageOfDigits(123));\n",
  "description": "\n## Write a program to find average of digits of a number by recursion\n\nAverage of digits of a number is the sum of digits of the number divided by the number of digits in the number. For example, the average of digits of 123 is 6. The sum of digits of 123 is 6 and the number of digits in 123 is 3. So, the average of digits of 123 is 6/3 = 2.\n\n```txt\nInput  : 123\nOutput : 2\n```\n\n---\n",
  "trackId": 5360,
  "lastUpdated": "2023-11-27T10:28:21Z",
  "contributors": [
    "Shaileshalluri",
    "harshraj8843",
    "moaldeen",
    "pranavsilimkhan",
    "rakibul-islam-raju",
    "ankitshokeen",
    "Tushar12222",
    "pranay136",
    "roshan798",
    "bnzone",
    "anandfresh",
    "Fukurokudzu",
    "leslieyip02",
    "vipulkmr02",
    "yashasvini121",
    "Avicenne-b",
    "hi-Kartik2004",
    "urielwix"
  ],
  "scala": "import scala.io.StdIn.readInt\nobject Main {\n  def main(args: Array[String]) {\n    print(\"Enter a number: \")\n    val num = readInt()\n    val sum = sumOfDigits(num)\n    val count = countDigits(num)\n    val avg = sum.toDouble / count\n    println(s\"Average of digits of $num is $avg\")\n  }\n  def sumOfDigits(num: Int): Int = {\n    if (num == 0) 0\n    else num % 10 + sumOfDigits(num / 10)\n  }\n  def countDigits(num: Int): Int = {\n    if (num == 0) 0\n    else 1 + countDigits(num / 10)\n  }\n}\n",
  "dart": "double digitSumAvg(int number , int digits , int sum){\n  if(number == 0){\n    return sum / digits;\n  }\n  \n  int no = number % 10;\n  digits += 1;\n  sum += no;\n  number = number ~/ 10;\n  \n  return digitSumAvg(number , digits , sum);\n  \n}\n\nvoid main(){\n  print(digitSumAvg(12234 , 0 , 0));\n}\n\n ",
  "go": "package main\r\n\r\nimport \"fmt\"\r\n\r\nfunc averageRecursive(numbers []int, total, count int) float64 {\r\n\tif len(numbers) == 0 {\r\n\t\treturn float64(total) / float64(count)\r\n\t}\r\n\r\n\treturn averageRecursive(numbers[1:], total+numbers[0], count+1)\r\n}\r\n\r\nfunc main() {\r\n\tnumbers := []int{5, 10, 15, 20}\r\n\taverage := averageRecursive(numbers, 0, 0)\r\n\tfmt.Printf(\"Average: %.2f\\n\", average)\r\n}\r\n",
  "haskell": "f :: Integer -> [Integer]\nf 0 = []\nf x = (x `mod` 10) : f (x `div` 10)\n\nmain :: IO()\nmain =  do\n    let n = 123\n    let d = f n\n    let a = (fromIntegral $ foldl (+) 0 d) / fromIntegral (length d)\n    \n    print a",
  "php": "<?php\n\nfunction averageRecursion($a, $i=0)\n{\n    if(!is_array($a)) $a = str_split($a);\n    \n    $n = sizeof($a);\n    \n    if ($i == $n - 1) return $a[$i];\n\n    if ($i == 0) return (($a[$i] + averageRecursion($a, $i + 1)) / $n);\n \n    return ($a[$i] + averageRecursion($a, $i + 1));\n}\n\n$num = 123;\necho averageRecursion($num);\n \n \n?>\n",
  "perl": "sub average_of_digits {\n    my ($num) = @_;\n\n    if ($num < 10) {\n        return $num;\n    } else {\n        my $last_digit = $num % 10;\n        my $rest_of_digits = int($num / 10);\n        return ($last_digit + average_of_digits($rest_of_digits));\n    }\n}\n\nmy $number = 455;\nmy $result = average_of_digits($number);\n\nprint \"Average of digits of $number is $result\\n\";\n",
  "python": "def average_of_digits(n):\n    if n == 0:\n        return 0\n    digits = [int(d) for d in str(n)]\n    return sum(digits) / len(digits)\n\n\nprint(average_of_digits(123))\n",
  "r": "# Function to calculate the sum of digits recursively\nsum_of_digits <- function(n) {\n  if (n == 0) {\n    return(0)\n  } else {\n    return(n %% 10 + sum_of_digits(n %/% 10))\n  }\n}\n\n# Function to calculate the average of digits using the sum_of_digits function\naverage_of_digits <- function(n) {\n  num_digits <- ifelse(n == 0, 1, floor(log10(n)) + 1)\n  sum_digits <- sum_of_digits(n)\n  return(sum_digits / num_digits)\n}\n\n# Example usage\ninput_number <- 12345\nresult <- average_of_digits(input_number)\ncat(\"Average: \", result, \"\\n\")\n",
  "rust": "fn avg_of_digits(n: u32) -> f32 {\n    let (sum, count) = sum_and_count_of_digits(n);\n    sum as f32 / count as f32\n}\n\nfn sum_and_count_of_digits(n: u32) -> (u32, u32) {\n    if n == 0 {\n        (0, 0)\n    } else {\n        let (sum, count) = sum_and_count_of_digits(n / 10);\n        (sum + n % 10, count + 1)\n    }\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}