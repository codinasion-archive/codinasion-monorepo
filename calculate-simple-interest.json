{
  "slug": "calculate-simple-interest",
  "title": "Calculate Simple Interest",
  "c": "//Simple interset program\n\n\n# include <stdio.h>\n# include <conio.h>\n\nint main(){\n \n    int principal, rate, time, interest;\n\n    printf(\"Enter the principal: \");\n    scanf(\"%d\", &principal);\n\n    printf(\"Enter the rate: \");\n    scanf(\"%d\", &rate);\n\n    printf(\"Enter the time: \");\n    scanf(\"%d\", &time);\n\n    interest = principal * rate * time / 100;\n    printf(\"Simple interest is %d\", interest);\n\n    return 0;\n}",
  "c-plus-plus": "#include <iostream>\nusing namespace std;\n\nint main(){\n    float p, r, t, si;\n    cout << \"Enter the principal amount: \";\n    cin >> p;\n    cout << \"Enter the rate of interest: \";\n    cin >> r;\n    cout << \"Enter the time period: \";\n    cin >> t;\n    si = (p * r * t) / 100;\n    cout << \"Simple interest is: \" << si;\n    return 0;\n}",
  "c-sharp": "using System;\n\nclass MainClass {\n    public static void Main (string[] args) {\n    Console.WriteLine (\"Please enter the principal :\");\n    double inches = Convert.ToDouble(Console.ReadLine());\n    Console.WriteLine (\"Please enter the rate of interest :\");\n    double interest = Convert.ToDouble(Console.ReadLine());\n    Console.WriteLine (\"Please enter the time :\");\n    double time = Convert.ToDouble(Console.ReadLine());\n    double simpleInterest = (principal *  interest * time ) / 100;\n    Console.WriteLine(\"Simple Interest : \"+ simpleInterest);\n  }\n}\n",
  "f-sharp": "let simpleInterest principal interest time : float =\n   principal * interest * time / 100\n   \nlet si = simpleInterest 1000.00 10.00 5.00\n\nprintfn \"Simple Interest : %f\" si\n",
  "java": "import java.util.Scanner;\n\npublic class CalculateSimpleInterest {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter\");\n        System.out.print(\"Principle Amount: \");\n        double p = sc.nextDouble();\n        System.out.print(\"Rate of Interest: \");\n        double r = sc.nextDouble();\n        System.out.print(\"Time(in Days): \");\n        double t = sc.nextDouble();\n        System.out.println(\"Simple Interest: \" +simpleInterest(p,r,t));\n    }\n    static double simpleInterest(double principleAmount, double rate, double time){\n        return (principleAmount * rate * time)/100;\n    }\n}\n",
  "javascript": "const simpleInterest = (principal, interest, time) => {\n  return (principal * interest * time) / 100;\n};\n\nconsole.log(simpleInterest);\n",
  "kotlin": "fun main(args: Array<String>) {\n    val principal = 1000\n    val rate = 10\n    val time = 5\n    val interest = (principal * rate * time) / 100\n\n    println(interest)\n}\n",
  "ruby": "def simple_interest(principal , interest , time)\n  (principal * interest * time) / 100\nend\n\nif $PROGRAM_NAME == __FILE__\n  print 'Please enter the Principal amount : '\n  principal = gets.chomp.to_i\n  print 'Please enter the Rate of Interest : '\n  interest = gets.chomp.to_i\n  print 'Please enter the Time : '\n  time = gets.chomp.to_i\n  puts \"Simple Interest : #{simple_interest(principal , interest , time)}\"\nend\n",
  "swift": "import Swift\nimport Foundation\n\nprint(\"Enter principal: \")\nvar principal = Int(readLine()!)!\nprint(\"Enter rate: \")\nvar rate = Int(readLine()!)!\nprint(\"Enter time: \")\nvar time = Int(readLine()!)!\nprint(\"Simple Interest: \", (principal * rate * time)/100)\n",
  "typescript": "const simpleInterest = (\n  principal: number,\n  interest: number,\n  time: number,\n): number => {\n  return (principal * interest * time) / 100;\n};\nconsole.log(simpleInterest(1000, 10, 5));\n",
  "description": "\n## Write a program to calculate simple interest\n\nSimple interest = (principal amount _ rate of interest _ time) / 100\n\n```txt\nPrincipal : 1000\nRate      : 10\nTime      : 5\n\nSimple interest : 500\n```\n\n---\n",
  "trackId": 5293,
  "lastUpdated": "2023-11-28T19:02:36Z",
  "contributors": [
    "Shaileshalluri",
    "harshraj8843",
    "Ishay1997",
    "anandfresh",
    "StarKnightt",
    "esivakumar26",
    "bnzone",
    "R0-H-1T",
    "yashasvini121",
    "vedantpople4",
    "0ME9A",
    "dineshlalam15"
  ],
  "julia": "# assign values to variables\nprincipal = 1000\nrate = 10\ntime = 5\n\n# calculate simple interest\nsimple_interest = (principal * rate * time) / 100\n\n# print the result\nprintln(\"Simple interest: \", simple_interest)\n",
  "scala": "import scala.io.StdIn._;\n\nobject simpleInterest {\n    def main(args:Array[String]):Unit={\n        println(\"Enter principal amount : \");\n        var principal = readLine().toInt;\n        println(\"Enter rate of interest : \");\n        var interest = readLine().toInt;\n        println(\"Enter the time : \");\n        var time = readLine().toInt;\n        var simpleInterest = (principal * interest * time)/100;\n        println(\"Simple Interest : \"+simpleInterest);\n    }\n}\n",
  "dart": "import 'dart:io';\nvoid main(){\n  print(\"Enter the principal amount :\");\n  var principal=int.parse(stdin.readLineSync());\n  print(\"Enter the rate of interest :\");\n  var interest=int.parse(stdin.readLineSync());\n  print(\"Enter the time :\");\n  var time =int.parse(stdin.readLineSync());\n  var simple_interest = (principal * interest * time )/100;\n  print(simple_interest);\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar amount, time, rate int\n\tfmt.Scanf(\"%d\", &amount)\n\tfmt.Scanf(\"%d\", &time)\n\tfmt.Scanf(\"%d\", &rate)\n\tsimpleInterest := (amount * time * rate) / 100\n\tfmt.Println(simpleInterest)\n}\n",
  "haskell": "calculateSimpleInterest :: Double -> Double -> Double -> Double\ncalculateSimpleInterest principal rate time =\n    (principal * rate * time) / 100\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter the principal amount:\"\n    principalInput <- getLine\n    let principal = read principalInput :: Double\n\n    putStrLn \"Enter the rate of interest:\"\n    rateInput <- getLine\n    let rate = read rateInput :: Double\n\n    putStrLn \"Enter the time (in years):\"\n    timeInput <- getLine\n    let time = read timeInput :: Double\n\n    let interest = calculateSimpleInterest principal rate time\n    putStrLn $ \"Simple interest: \" ++ show interest\n",
  "php": "<?php\n\nfunction simpleInterest($principal, $interest, $time){\n    return ($principal * $interest * $time)/100;\n}\n\necho simpleInterest(1000, 10, 5);\n\n?>\n",
  "perl": "print \"Enter the principal: \";\nmy $principal = <STDIN> ;\n\nprint \"Enter the rate of interest: \";\nmy $interest = <STDIN> ;\n\nprint \"Enter the time: \";\nmy $time = <STDIN> ;\n\nmy $res = simpleInterest($principal, $interest);\nprint \"Simple Interest : $res\";\n\nsub simpleInterest\n{\n    my ($x) = @_;\n    my $res = ($principal * $interest * $time) / 100;\n    return $res ;   \n}\n",
  "python": "def simpleInterest():\n    principal = int(input(\"Enter principal:- \"))\n    interest = int(input(\"Enter interest:- \"))\n    time = int(input(\"Enter time:- \"))\n\n    return (principal * interest * time) / 100\n\n\nprint(simpleInterest())\n",
  "r": "principal = 1000\ninterest = 10\ntime = 5\nsimpleInterest = (principal * interest * time)/100\ncat(\"Simple interest : \", simpleInterest)\n",
  "rust": "fn simple_interest(principal: f32, rate: f32, time: f32) -> f32 {\n    (principal * rate * time) / 100.0\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}