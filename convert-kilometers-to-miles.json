{
  "slug": "convert-kilometers-to-miles",
  "title": "Convert Kilometers To Miles",
  "c": "#include <stdio.h>\n\nint main()\n{\n    float kilometer;\n    int miles;\n\n    printf(\"Enter kilometer :    \");\n    scanf(\"%f\", &kilometer);\n\n    miles = kilometer/1.609; \n\n    printf(\"%f  kilometer is    :   %i  miles\", kilometer, miles);\n\n    return 0;\n}\n",
  "c-plus-plus": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    // Write C++ code here\n    float miles,kilometers;\n    cout << \"enter kilometers\"<<endl;\n    cin>>kilometers;\n    \n    cout<<\"miles \"<<kilometers/1.609;\n\n    return 0;\n}",
  "c-sharp": "using System;\nclass MainClass {\n    public static void Main (string[] args) {\n    Console.WriteLine (\"Please enter the kilometer : \");\n    double km = Convert.ToDouble(Console.ReadLine());\n    double miles = km/1.609;\n    Console.WriteLine(km+\" kilometer is \"+miles+\" miles\");\n  }\n}\n",
  "f-sharp": "let kilometerToMiles km : float =\n   km / 1.60\n\nlet miles = kilometerToMiles 8.04672\n\nprintfn \"Equivalent miles : %f\" miles\n",
  "java": "import java.util.Scanner;\n\npublic class ConvertKilometersToMiles{\n    public static void main(String[] args) {\n        try (Scanner sc = new Scanner(System.in)) {\n            System.out.print(\"Enter Kilometers:\");\n            double km = sc.nextDouble();\n\n            double miles = km/(1.609);\n\n            System.out.println(\"Distance in mile:\" +miles);\n        }\n    }\n}\n",
  "javascript": "/**\n * Add two numbers together\n * @param  {Float} Kilometers a distance with kilometers unit\n *\n * @return {Float}    the distance with miles unit\n */\n\nfunction ConvertKilometersToMiles(Kilometers) {\n  return Kilometers / 1.609;\n}\n\n//test\nconsole.log(ConvertKilometersToMiles(8.04672));\n",
  "kotlin": "import java.util.Scanner\n\nfun main() {\n    print(\"Enter Kilometers : \")\n    println()\n    var kilometers = readLine()\n\n    println(\"Distance in mile : \" + ConvertKilometersToMiles(kilometers!!.toDouble()))\n\n}\n\nprivate fun ConvertKilometersToMiles(km: Double): Double {\n    val miles = km / 1.609;\n\n    return  miles\n}",
  "ruby": "def kilometerToMiles(km)\n  km / 1.609\nend\n\nif $PROGRAM_NAME == __FILE__\n  print 'Please enter the Kilometer : '\n  km = gets.chomp.to_i\n\n  puts \"#{km} kilometer is #{kilometerToMiles(km)} miles\"\nend\n",
  "swift": "import Swift\nimport Foundation\n\nprint(\"Enter kilometers: \")\nvar kilometers = Double(readLine()!)!\nprint(\"Miles: \", kilometers / 1.60934)\n",
  "typescript": "/**\n *\n * @name This program convert kilometrs to miles\n * @param {number} kilometers\n * @returns {number}\n *\n * @example\n * ```ts\n * const mile1 = ConvertKilometersToMiles(8.04672) // 5\n * const mile2 = ConvertKilometersToMiles(16.08) // 10\n * ```\n *\n * @author Tanishq Singh\n */\nconst ConvertKilometersToMiles = (kilometers: number): number =>\n  kilometers * 0.621371;\n\n// Console Tests\nconsole.log(\"Number of miles in 1.6 kilometers: \");\nconsole.log(\"That is \" + ConvertKilometersToMiles(1.6) + \" // 0.9941936\");\n\nconsole.log(\"Numer of miles in 3.2 kilometers: \");\nconsole.log(\"That is \" + ConvertKilometersToMiles(3.2) + \" // 1.9883872\");\n",
  "description": "\n## Write a program to convert kilometers to miles\n\n1 mile = 1.609344 kilometers\n\n```txt\nInput  : 8.04672\nOutput : 5\n```\n\n---\n",
  "trackId": 4011,
  "lastUpdated": "2024-05-02T18:12:04Z",
  "contributors": [
    "charan-hash",
    "anandfresh",
    "harshraj8843",
    "RiteshK-611",
    "esivakumar26",
    "pokharel-nishan",
    "vedantpople4",
    "Medmly20208",
    "joao-vitor-souza",
    "rksp25",
    "tanishq-singh-2407",
    "WillLowrie",
    "VasireddyGanesh"
  ],
  "julia": "println(\"Enter value in kilometers: \")\nkm = readline()\nkm = parse(Float64, km)\nmiles = round((km / 1.609); digits = 2)\nprintln(km, \" kilometers equals \", miles, \" miles\")",
  "scala": "import scala.io.StdIn._;\n\nobject kmtoMiles {\n  def main(args:Array[String]):Unit={\n    println(\"Enter the Kilometer : \");\n    var km = readLine();\n    var miles = km.toDouble / 1.609;\n    println(km+\" kilometer is \"+miles+\" miles\");\n  }\n}\n",
  "dart": "import 'dart:io';\nimport 'dart:math';\nvoid main(){\n  print(\"Enter the kilometer :\");\n  var kilometer =double.parse(stdin.readLineSync());\n  var miles = (kilometer / 1.60).round();\n  print('Equivalent miles : $miles');\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar km float64\n\tfmt.Scanf(\"%f\", &km)\n\tmiles := 0.621 * km\n\tfmt.Println(miles)\n}\n",
  "haskell": "main :: IO ()\nmain = do \n   putStrLn \"Enter kilometers: \" \n   input1 <- getLine\n   let kilometers = read input1 :: Float\n\n   let miles = kilometers / 1.609344\n   putStrLn $ show (miles)\n",
  "php": "<?php\n$x = readline('Enter Kilometers: ');\n\n$x1 = $x/1.609;\necho \"Miles: $x1.\\n\";\n\n?>\n",
  "perl": "#!/usr/bin/perl\nuse warnings;\nuse strict;\nprint \"Enter the kilometer : \";\nmy $km = <STDIN>;\nmy $miles = $km / 1.609;\nprint $km.\" kilometers are \".$miles.\" miles\\n\";\n",
  "python": "def km_to_miles(value_in_km):\n    return round(value_in_km / 1.609, 2)\n\n\nprint(\"Miles:\\n\", km_to_miles(float(input(\"Kilometers: \"))))\n",
  "r": "kilometers = 8.04672\nmiles = kilometers / 1.609344\ncat(\"miles: \", miles)\n",
  "rust": "use std::io;\n\nfn main() {\n    println!(\"Enter the distance in kilometers:\");\n\n    let mut input = String::new();\n    io::stdin()\n        .read_line(&mut input)\n        .expect(\"Failed to read line\");\n\n    let kilometers: f64 = input.trim().parse().expect(\"Please type a number!\");\n\n    let miles = convert_km_to_miles(kilometers);\n    println!(\"{:.2} kilometers is {:.2} miles.\", kilometers, miles);\n}\n\nfn convert_km_to_miles(km: f64) -> f64 {\n    km * 0.621371\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}