{
  "slug": "cylindrically-rotate-a-matrix-by-90-degrees",
  "title": "Cylindrically Rotate A Matrix By 90 Degrees",
  "c": "#include <stdio.h>\n\nvoid swap(int *x, int *y){\n    int temp = *x;\n    *x = *y;\n    *y= temp;\n}\nint main(){\n\n   int n=3;\n   int mat[3][3]= { { 1, 2, 3 },{ 4, 5, 6},{ 7, 8, 9 } };\n\n   for(int i=0; i<n; i++){\n     for(int j=i+1; j<n; j++)\n         swap(&mat[i][j], &mat[j][i]);\n    }\n\n   for(int i=0; i<n; i++){\n     for(int j=0; j<n/2; j++){\n        swap(&mat[i][j], &mat[i][n-j-1]);\n     }\n   }\n\n   printf(\"Rotated Matrix :\\n\");\n   for(int i=0; i<n; i++){\n     for(int j=0; j<n; j++){\n       printf(\"%d \",mat[i][j]);\n     }\n     printf(\"\\n\");\n   }\n}\n",
  "c-plus-plus": "#include <bits/stdc++.h>\nusing namespace std;\n \n#define N 3\n\nvoid rotate90Clockwise(int arr[N][N])\n{\n    for (int j = 0; j < N; j++)\n    {\n        for (int i = N - 1; i >= 0; i--)\n            cout << arr[i][j] << \" \";\n        cout << '\\n';\n    }\n}\n\nint main()\n{\n    int arr[N][N] = { { 1, 2, 3 },\n                      { 4, 5, 6 },\n                      { 7, 8, 9 }};\n    rotate90Clockwise(arr);\n    return 0;\n}\n \n",
  "c-sharp": "using System;\n \nclass MATRIX\n{\nstatic int N = 3;\n \nstatic void rotate90Degrees(int[,] a)\n{\n \n    for (int i = 0; i < N / 2; i++)\n    {\n        for (int j = i; j < N - i - 1; j++)\n        {\n\n            int temp = a[i, j];\n            a[i, j] = a[N - 1 - j, i];\n            a[N - 1 - j, i] = a[N - 1 - i, N - 1 - j];\n            a[N - 1 - i, N - 1 - j] = a[j, N - 1 - i];\n            a[j, N - 1 - i] = temp;\n        }\n    }\n}\n \n\nstatic void printMatrix(int[,] arr)\n{\n    for (int i = 0; i < N; i++)\n    {\n        for (int j = 0; j < N; j++)\n        Console.Write( arr[i, j] + \" \");\n        Console.Write(\"\\n\");\n    }\n}\n \n\npublic static void Main ()\n    {\n    int [,]arr = {{1, 2, 3 },\n                  {4, 5, 6 },\n                  {7, 8, 9 }};\n    rotate90Degrees(arr);\n    printMatrix(arr);\n}\n}\n \n",
  "f-sharp": "let cylindricalRotate90 (matrix:int[,]) =\n    let rows = matrix.GetLength(0)\n    let cols = matrix.GetLength(1)\n    \n    // Create a new matrix to store the rotated values\n    let result = Array2D.create cols rows 0\n    \n    // Rotate the matrix by 90 degrees\n    for i in 0..(rows - 1) do\n        for j in 0..(cols - 1) do\n            result.[j, rows - 1 - i] <- matrix.[i, j]\n    \n    result\n\n// Define the input matrix\nlet inputMatrix = array2D [[1; 2; 3]; [4; 5; 6]; [7; 8; 9]]\n\n// Print the original matrix\nprintfn \"Input Matrix:\"\nfor i in 0..(inputMatrix.GetLength(0) - 1) do\n    for j in 0..(inputMatrix.GetLength(1) - 1) do\n        printf \"%d \" inputMatrix.[i, j]\n    printfn \"\"\n\n// Perform cylindrical rotation\nlet rotatedMatrix = cylindricalRotate90 inputMatrix\n\n// Print the rotated matrix\nprintfn \"\\nOutput Matrix:\"\nfor i in 0..(rotatedMatrix.GetLength(0) - 1) do\n    for j in 0..(rotatedMatrix.GetLength(1) - 1) do\n        printf \"%d \" rotatedMatrix.[i, j]\n    printfn \"\"\n",
  "java": "import java.io.*;\n \nclass Matrix {\n    static int N = 3;\n\n    static void rotate90Degrees(int arr[][])\n    {\n        for (int j = 0; j < N; j++)\n        {\n            for (int i = N - 1; i >= 0; i--)\n                System.out.print(arr[i][j] + \" \");\n                System.out.print(\"\\n\");\n        }\n    }\n    public static void main(String[] args)\n    {\n        int arr[][] = { { 1, 2, 3 },\n                        { 4, 5, 6 },\n                        { 7, 8, 9 }} ;\n        rotate90Degrees(arr);\n    }\n}\n",
  "javascript": "\"use strict\";\n\nlet N = 3;\n\nfunction rotate90Clockwise(arr) {\n  for (let j = 0; j < N; j++) {\n    for (let i = N - 1; i >= 0; i--) {\n      process.stdout.write(arr[i][j] + \" \");\n    }\n    console.log();\n  }\n}\n\nlet arr = [\n  [1, 1, 1],\n  [2, 2, 2],\n  [3, 3, 3],\n];\n\nconsole.log(\"Initial matrix:\");\nfor (let i = 0; i < N; i++) {\n  for (let j = 0; j < N; j++) {\n    process.stdout.write(arr[i][j] + \" \");\n  }\n  console.log();\n}\n\nconsole.log(\"\\nRotated matrix:\");\nrotate90Clockwise(arr);\n",
  "kotlin": "fun rotateMatrix(matrix: Array<IntArray>) {\n    val rows = matrix.size\n    val cols = matrix[0].size\n\n    //Creates a new matrix with swapped dimensions\n    val rotatedMatrix = Array(cols) { IntArray(rows) }\n\n    //Performs the rotation\n    for (i in 0 until rows) {\n        for (j in 0 until cols) {\n            //Rotates each element by swapping the row and column indices\n            rotatedMatrix[j][rows - 1 - i] = matrix[i][j]\n        }\n    }\n\n    //Prints the rotated matrix\n    for (row in rotatedMatrix) {\n        for (num in row) {\n            //Prints each element followed by a space\n            print(\"$num \")\n        }\n        //Moves to the next line after printing a row\n        println()\n    }\n}\n\nfun main() {\n    //Defines the original matrix\n    val matrix = arrayOf(\n        intArrayOf(1, 2, 3),\n        intArrayOf(4, 5, 6),\n        intArrayOf(7, 8, 9)\n    )\n\n    //Calls the rotateMatrix function\n    rotateMatrix(matrix)\n}",
  "ruby": "matrix = [ [1 ,2, 3], [4, 5, 6], [7, 8, 9] ]\nn = 3\ntemp_matrix = Array.new(n){Array.new(n)}\nfor i in 0...n\n  for j in 0...n\n    temp_matrix[j][n-i-1] = matrix[i][j]\n  end\nend\n\nputs temp_matrix.inspect\n",
  "swift": "let input = [\n\t[1, 2, 3],\n\t[4, 5, 6],\n\t[7, 8, 9]\n]\n\nfunc rotate90Clockwise(_ matrix: [[Int]]) -> [[Int]] {\n\tlet N = matrix.count\n\tvar rotated = Array(repeating: Array(repeating: 0, count: N), count: N)\n\tfor r in 0 ..< N {\n\t\tfor c in 0 ..< N {\n\t\t\trotated[c][N - (r + 1)] = matrix[r][c]\n\t\t}\n\t}\n\treturn rotated\n}\n\nfunc printMatrix(_ matrix: [[Int]]) {\n\tfor r in 0 ..< matrix.count {\n\t\tfor c in 0 ..< matrix.count {\n\t\t\tprint(matrix[r][c], terminator: \" \")\n\t\t}\n\t\tprint()\n\t}\n\tprint()\n}\n\nprint(\"Input  :\")\nprintMatrix(input)\nprint(\"Output  :\")\nprintMatrix(rotate90Clockwise(input))",
  "typescript": "const rotateClockwise = (matrix: number[][]): number[][] => {\n  const n = matrix.length;\n  for (let i = 0; i < n / 2; i++) {\n    for (let j = i; j < n - i - 1; j++) {\n      const tmp = matrix[i][j];\n      matrix[i][j] = matrix[n - j - 1][i];\n      matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];\n      matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];\n      matrix[j][n - i - 1] = tmp;\n    }\n  }\n  return matrix;\n};\n\nconsole.log(\n  rotateClockwise([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n  ]),\n);\n",
  "description": "\n## Write a program to cylindrically rotate a matrix by 90 degrees\n\n```txt\nInput  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n7 4 1\n8 5 2\n9 6 3\n```\n\n---\n",
  "trackId": 5444,
  "lastUpdated": "2023-11-27T09:24:09Z",
  "contributors": [
    "harshraj8843",
    "moaldeen",
    "Monika-Tiyyagura",
    "rsitters",
    "abhisek-1221",
    "Joel-Maldonado",
    "Marc-R2",
    "adrianclinansmith",
    "mayankbhatt07141",
    "anandfresh",
    "leslieyip02",
    "SarahTek"
  ],
  "julia": "function rotateMatrix(matrix)\n    return reverse(transpose(matrix))\nend\n\nprintln(\"Enter the matrix dimensions (rows columns):\")\ndims = split(readline())\nnumRows = parse(Int, dims[1])\nnumCols = parse(Int, dims[2])\nprintln(\"Enter the matrix elements:\")\nmatrix = [[parse(Int, x) for x in split(readline())] for i in 1:numRows]\n\n# Rotate the matrix and print out the result\nrotatedMatrix = rotateMatrix(matrix)\nprintln(\"Rotated matrix:\")\nfor row in rotatedMatrix\n    println(join(row, \" \"))\nend\n#Example Usage\n\n#Enter the matrix dimensions (rows columns):3 3\n#Enter the matrix elements:\n#1 2 3\n#4 5 6\n#7 8 9\n#Rotated matrix:\n#7 8 9\n#4 5 6\n#1 2 3 ",
  "scala": "object MatrixRotation {\n  def main(args: Array[String]): Unit = {\n    val matrix = Array(\n      Array(1, 2, 3),\n      Array(4, 5, 6),\n      Array(7, 8, 9)\n    )\n\n    println(\"Original Matrix:\")\n    printMatrix(matrix)\n\n    val rotatedMatrix = rotateMatrix90Degrees(matrix)\n\n    println(\"\\nRotated Matrix:\")\n    printMatrix(rotatedMatrix)\n  }\n\n  def rotateMatrix90Degrees(matrix: Array[Array[Int]]): Array[Array[Int]] = {\n    // Transpose the matrix\n    val transposedMatrix = transpose(matrix)\n\n    // Reverse each row\n    transposedMatrix.map(_.reverse)\n  }\n\n  def transpose(matrix: Array[Array[Int]]): Array[Array[Int]] = {\n    Array.tabulate(matrix.length, matrix(0).length) { (i, j) =>\n      matrix(j)(i)\n    }\n  }\n\n  def printMatrix(matrix: Array[Array[Int]]): Unit = {\n    matrix.foreach { row =>\n      println(row.mkString(\" \"))\n    }\n  }\n}\n",
  "dart": "\nvoid main() {\n  const matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n  ];\n\n  final result = rotateMatrix90Degrees(matrix);\n  print(result);\n}\n\n/// Rotate a matrix cylindrically by 90 degrees.\nList<List<int>> rotateMatrix90Degrees(List<List<int>> matrix) {\n  final List<List<int>> result = [];\n\n  for (var i = 0; i < matrix.length; i++) {\n    List<int> row = [];\n    for (var j = 0; j < matrix[i].length; j++) {\n      row.insert(0, matrix[j][i]);\n    }\n    result.add(row);\n  }\n\n  return result;\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc rotateMatrix90(matrix [][]int) [][]int {\n    rows, cols := len(matrix), len(matrix[0])\n\n    // Define a new matrix to hold the rotated matrix\n    rotated := make([][]int, cols)\n    for i := range rotated {\n        rotated[i] = make([]int, rows)\n    }\n\n    // Cylindrically rotate the matrix by 90 degrees\n    for i, row := range matrix {\n        for j, val := range row {\n            rotated[j][rows-i-1] = val\n        }\n    }\n\n    return rotated\n}\n\nfunc main() {\n    matrix := [][]int{\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9},\n    }\n\n    rotated := rotateMatrix90(matrix)\n\n    for _, row := range rotated {\n        fmt.Println(row)\n    }\n}\n",
  "php": "<?php\n\nfunction rotate90Degrees($array)\n{\n    $result = array();\n    foreach (array_values($array) as $key => $sub_array)\n    {\n        foreach (array_values($sub_array) as $sub_key => $value)\n        {\n            if (empty($result[$sub_key]))\n            {\n                $result[$sub_key] = array($value);\n            }\n            else\n            {\n                array_unshift($result[$sub_key], $value);\n            }\n        }\n    }\n    return $result;\n}\n\n$array = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n\nprint_r(rotate90Degrees($array));\n\n?>\n",
  "perl": "use strict;\nuse warnings;\n\nsub cylindrical_rotate_90 {\n    my ($matrix) = @_;\n\n    my $num_rows = scalar @$matrix;\n    my $num_cols = scalar @{$matrix->[0]};\n\n    my @rotated_matrix;\n    for my $i (0 .. $num_rows - 1) {\n        for my $j (0 .. $num_cols - 1) {\n            $rotated_matrix[$j][$num_rows - 1 - $i] = $matrix->[$i][$j];\n        }\n    }\n\n    return \\@rotated_matrix;\n}\n\n# Input matrix\nmy @input_matrix = (\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n);\n\n# Perform cylindrical rotation\nmy $rotated_matrix_ref = cylindrical_rotate_90(\\@input_matrix);\n\n# Output the rotated matrix\nfor my $row (@$rotated_matrix_ref) {\n    print join(\" \", @$row), \"\\n\";\n}\n",
  "python": "N = 3\n\n\ndef rotate90Degrees(arr):\n    global N\n\n    for j in range(N):\n        for i in range(N - 1, -1, -1):\n            print(arr[i][j], end=\" \")\n        print()\n\n\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nrotate90Degrees(arr)\n",
  "r": "# Function to perform cylindrical rotation\ncylindrical_rotate <- function(matrix_input) {\n  # Get the number of rows and columns in the matrix\n  num_rows <- nrow(matrix_input)\n  num_cols <- ncol(matrix_input)\n\n  # Create an empty matrix to store the rotated result\n  rotated_matrix <- matrix(0, nrow = num_cols, ncol = num_rows)\n\n  # Perform the cylindrical rotation\n  for (i in 1:num_rows) {\n    rotated_matrix[, i] <- matrix_input[num_rows - i + 1, ]\n  }\n\n  return(rotated_matrix)\n}\n\n# Example usage\ninput_matrix <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, byrow = TRUE)\n\ncat(\"Input Matrix:\\n\")\nprint(input_matrix)\n\nrotated_matrix <- cylindrical_rotate(input_matrix)\n\ncat(\"\\nRotated Matrix:\\n\")\nprint(rotated_matrix)\n",
  "rust": "fn rotate_matrix(matrix: Vec::<Vec<u32>>) -> Vec::<Vec<u32>> {\n    let mut rotated: Vec::<Vec<u32>> = Vec::new();\n\n    for i in 0 .. matrix.len() {\n        let mut row: Vec::<u32> = Vec::new();\n        for j in (0 .. matrix.len()).rev() {\n            row.push(matrix[j][i]);\n        }\n        rotated.push(row);\n    }\n\n    rotated\n}\n\nfn main() {\n    let matrix: Vec::<Vec<u32>> = vec![\n        vec![1, 2, 3],\n        vec![4, 5, 6],\n        vec![7, 8, 9]\n    ];\n\n    let matrix = rotate_matrix(matrix);\n\n    for row in matrix {\n        row.iter().for_each(|i| print!(\"{} \", i));\n        println!(\"\");\n    }\n}",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}