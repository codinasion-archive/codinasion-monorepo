{
  "slug": "find-factorial-of-a-number-by-recursion",
  "title": "Find Factorial Of A Number By Recursion",
  "c": "#include <stdio.h> /* printf , scanf */\n\n/* assuming num >= 1 */\nint FactorialRec(int num);\n\nint main()\n{\n    int num = 0;\n    int is_good = scanf(\"%d\",&num);\n\n    if(is_good != 1)\n    {\n        return -1;\n    }\n\n    printf(\"%d\\n\",FactorialRec(num));\n\n    return 0;\n}\n\nint FactorialRec(int num)\n{\n    if(num == 1)\n    {\n        return 1;\n    }\n\n    return num * FactorialRec(num -1);\n}\n",
  "c-plus-plus": "#include <iostream>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint factorial(int n)\n{\n    if(n==0)\n    {\n        return 1;\n    }\n    return n*factorial(n-1);\n}\n\n\nint main() {\n\tint number;\n\tcin>>number;\n\tcout<<factorial(number)<<endl;\n\t\n\t\n\treturn 0;\n}",
  "c-sharp": "using System;\nclass Factorial\n{\n    public static void Main()\n    {\n        int fact, num;\n        Console.Write(\"Enter a number: \");\n        num = Convert.ToInt32(Console.ReadLine());\n        Factorial obj = new Factorial();\n        fact = obj.factorial(num);\n        Console.WriteLine(\"Factorial of {0} is {1}\", num, fact);\n    }\n\n    public int factorial(int num)\n    {\n        if (num == 0)\n            return 1;\n        else\n            return num * factorial(num - 1);\n    }\n}\n",
  "java": "import java.util.Scanner;\r\n\r\n class FindFactorialOfANumberByRecursion {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\t\r\n\t\tSystem.out.println(\"Enter a number: \");\r\n\t\tint number = input.nextInt();\r\n\t\t\r\n\t\tSystem.out.print(\"Factorial of the entered number is: \" + factorial(number));\r\n\t}\r\n\t\r\n\tstatic int factorial(int number) {\r\n\tif(number == 0)\r\n\t\treturn 1;\r\n\telse\r\n\t\treturn number * factorial(number - 1);\r\n\t}\r\n\t\r\n}",
  "javascript": "function factorialize(num) {\n  if (num < 0) {\n    return -1;\n  }\n\n  // If the number is 0, its factorial is 1.\n  else if (num == 0) {\n    return 1;\n  }\n\n  // Otherwise, call the recursive procedure again\n  else {\n    return num * factorialize(num - 1);\n  }\n}\n\nfactorialize(5);\n\nconsole.log(\"Factorial of 5 is\", factorialize(5));\n",
  "kotlin": "class FindFactorialOfANumberByRecursion {\n\n    fun findFactorial(num: Int): Int {\n        if (num == 0) return 0\n        return findRecursive(num)\n    }\n\n    private fun findRecursive(num: Int): Int {\n        if (num == 1) return 1\n        return num * findRecursive(num - 1)\n    }\n}",
  "ruby": "def fact(n)\n    return 1 if n==0\n\n    return n*fact(n-1)\nend\nprint \"Enter a number : \"\nnum = gets.chomp.to_i\nprint \"Factorial of #{num} : #{fact(num)}\"",
  "swift": "import Foundation\nimport Glibc\n\nprint(\"Enter number: \")\nvar number = Int(readLine()!)!\n\nprint(\"Factorial: \", factorial(fNumber: number))\n\nfunc factorial(fNumber: Int) -> Int{\n   if fNumber == 0{\n      return 1\n   } else {\n      return fNumber * factorial(fNumber:fNumber-1)\n   }\n}\n",
  "typescript": "function factorialize(num: number): number {\n  if (num < 0) {\n    return -1;\n  }\n\n  // If the number is 0, its factorial is 1.\n  else if (num == 0) {\n    return 1;\n  }\n\n  // Otherwise, call the recursive procedure again\n  else {\n    return num * factorialize(num - 1);\n  }\n}\n\nfactorialize(5);\n\nconsole.log(\"Factorial of 5 is\", factorialize(5));\n",
  "description": "\n## Write a program to find factorial of a number by recursion\n\nFactorial of a number is the product of all the numbers from 1 to that number. For example, factorial of 5 is 5\\*4\\*3\\*2\\*1 = 120.\n\n```txt\nInput  : 5\nOutput : 120\n```\n\n---\n",
  "trackId": 782,
  "lastUpdated": "2023-10-02T17:04:50Z",
  "contributors": [
    "anandfresh",
    "harshraj8843",
    "sancoLgates",
    "esivakumar26",
    "Osher160",
    "joao-vitor-souza",
    "PraaneshSelvaraj",
    "shivampipalwa",
    "greeshma-d",
    "SRR-CODER",
    "UsmanFani",
    "imtiyaz786"
  ],
  "scala": "object HelloWorld {\n \tdef main(args: Array[String]): Unit = {\n \t  val number = scala.io.StdIn.readInt();\n \t  println(factorial(number));\n \t}\n \t\n \tdef factorial(n: Int): Int = {\n    if (n == 0)\n        return 1\n    else\n        return n * factorial(n-1)\n  }\n }\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc factorialize(num int) int {\n\tif (num < 0) {\n\t\treturn -1;\n\t} else if (num == 0) {\n\t\treturn 1\n\t} else {\n\t\treturn num * factorialize(num - 1)\n\t}\n}\n\nfunc main() {\n\tvar i int\n\tfmt.Print(\"Enter Number: \")\n\tfmt.Scan(&i)\n\tfmt.Println(factorialize(i))\n}\n",
  "php": "<?php\nfunction factorial($n)\n{\n    if ($n <= 1) {\n        return 1;\n    } else {\n        return $n * factorial($n - 1);\n    }\n}\n\necho factorial((int) readline()) . \"\\n\";\n\n?>\n",
  "perl": "sub factorial\n{\nmy $n = $_[0];\nif ($n == 0 || $n == 1)\n{\n    return 1;\n}\nelse\n{\n    return $n * factorial($n - 1);\n}\n}\n$n = 5;\n\nprint \"Factorial of a number $n is \", factorial($n);\n",
  "python": "# Python program to calculate factorial of number using recursion\ndef fact(x):\n    if x == 1 or x == 0:\n        return 1\n    else:\n        return x * fact(x - 1)  # using recursion\n\n\nn = int(input(\"Enter a number : \"))\n\nif n < 0:\n    print(\"Factorial can not be calculated for negative numbers!\")\nelse:\n    print(\"Factorial of\", n, \"=\", fact(n))\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "scala",
    "go",
    "php",
    "perl",
    "python"
  ]
}