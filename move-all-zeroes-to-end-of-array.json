{
  "slug": "move-all-zeroes-to-end-of-array",
  "title": "Move All Zeroes To End Of Array",
  "c": "#include <stdio.h>\n\nvoid moveZeroesToEnd(int arr[], int n) {\n    int nonZeroIndex = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (arr[i] != 0) {\n            arr[nonZeroIndex++] = arr[i];\n        }\n    }\n\n    \n    while (nonZeroIndex < n) {\n        arr[nonZeroIndex++] = 0;\n    }\n}\n\nint main() {\n    int arr[] = {1, 0, 4, 2, 0, 5, 0, 3, 6};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    printf(\"Original Array: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    moveZeroesToEnd(arr, n);\n\n    printf(\"\\nArray after moving zeroes to the end: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n",
  "c-plus-plus": "#include<iostream>\n\nvoid moveZeroesToEnd(int arr[], int size) {\n    // Initialize a variable to keep track of the position to insert non-zero elements\n    int nonZeroIndex = 0;\n\n    // Iterate through the array\n    for (int i = 0; i < size; i++) {\n        // If the current element is non-zero, move it to the front of the array\n        if (arr[i] != 0) {\n            arr[nonZeroIndex] = arr[i];\n            nonZeroIndex++;\n        }\n    }\n\n    // Fill the remaining positions with zeroes\n    while (nonZeroIndex < size) {\n        arr[nonZeroIndex] = 0;\n        nonZeroIndex++;\n    }\n}\n\n// Function to print an array\nvoid printArray(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    int arr1[] = {1, 2, 0, 4, 3, 0, 5, 0};\n    int size1 = sizeof(arr1) / sizeof(arr1[0]);\n\n    int arr2[] = {1, 2, 0, 0, 0, 3, 6};\n    int size2 = sizeof(arr2) / sizeof(arr2[0]);\n\n    // Move zeroes to the end of the arrays\n    moveZeroesToEnd(arr1, size1);\n    moveZeroesToEnd(arr2, size2);\n\n    // Print the modified arrays\n    std::cout << \"Output 1: \";\n    printArray(arr1, size1);\n\n    std::cout << \"Output 2: \";\n    printArray(arr2, size2);\n\n    return 0;\n}\n",
  "c-sharp": "using System;\nclass MoveZeros {\n\tstatic void moveZerosToEnd(int[] arr, int n)\n\t{\n\tint count = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tif (arr[i] != 0)\n\t\t\tarr[count++] = arr[i];\n\t\n\tfor (int i = count; i<n;i++)\n\t\tarr[i]=0;\n\t\n\t}\n\n\tstatic void printArray(int[] arr, int n)\n\t{\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tConsole.Write(arr[i] + \" \");\n\t}\n\n\tpublic static void Main()\n\t{\n\t\tint[] arr = { 1, 2, 0, 4, 3, 0, 5, 0 };\n\t\tint n = arr.Length;\n\n\t\tConsole.Write(\"Input array: \");\n\t\tprintArray(arr, n);\n\n\t\tmoveZerosToEnd(arr, n);\n\n\t\tConsole.Write(\"\\nOutput array: \");\n\t\tprintArray(arr, n);\n\t}\n}\n",
  "f-sharp": "let moveZeroesToEnd (arr : int[]) =\n    let mutable index = 0\n    let length = Array.length arr\n\n    // Traverse the array and move all non-zero elements to the beginning\n    for i = 0 to length - 1 do\n        if arr.[i] <> 0 then\n            arr.[index] <- arr.[i]\n            index <- index + 1\n\n    // Fill the remaining elements with zeroes\n    while index < length do\n        arr.[index] <- 0\n        index <- index + 1\n\n// Example usage:\nlet arr1 = [|1; 2; 0; 4; 3; 0; 5; 0|]\nmoveZeroesToEnd arr1\nprintfn \"Output: %A\" arr1\n\nlet arr2 = [|1; 2; 0; 0; 0; 3; 6|]\nmoveZeroesToEnd arr2\nprintfn \"Output: %A\" arr2\n",
  "java": "import java.util.Scanner;\n\npublic class MoveAllZeroesToEndOfArray {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int[] array = null;\n        while (array == null) {\n            System.out.println(\"Enter a list of numbers separated by commas: \");\n            String input = scanner.nextLine();\n            array = parseInput(input);\n\n            if (array == null) {\n                System.err.println(\"Invalid input. Please enter only integers separated by commas.\");\n            }\n        }\n\n        moveZerosToEnd(array);\n        System.out.println(\"Modified list:\");\n        printArray(array);\n\n        scanner.close();\n    }\n\n    private static int[] parseInput(String input) {\n        String[] inputNumbers = input.split(\",\");\n        int[] array = new int[inputNumbers.length];\n\n        try {\n            for (int i = 0; i < inputNumbers.length; i++) {\n                array[i] = Integer.parseInt(inputNumbers[i].trim());\n            }\n            return array;\n        } catch (NumberFormatException e) {\n            return null;\n        }\n    }\n\n    private static void moveZerosToEnd(int[] array) {\n        int insertPosition = 0;\n\n        for (int num : array) {\n            if (num != 0) {\n                array[insertPosition++] = num;\n            }\n        }\n\n        while (insertPosition < array.length) {\n            array[insertPosition++] = 0;\n        }\n    }\n\n    private static void printArray(int[] array) {\n        for (int i = 0; i < array.length; i++) {\n            System.out.print(array[i]);\n            if (i < array.length - 1) {\n                System.out.print(\", \");\n            }\n        }\n        System.out.println();\n    }\n}\n",
  "javascript": "function moveZeroesToEnd(arr) {\n    let count = 0; // Count of non-zero elements\n    \n    // Traverse the array. If element encountered is non-zero, then replace the element at index 'count' with this element\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== 0) {\n            arr[count++] = arr[i];\n        }\n    }\n    \n    // Now all non-zero elements have been shifted to front and 'count' is set as index of first 0. Make all elements 0 from count to end\n    while (count < arr.length) {\n        arr[count++] = 0;\n    }\n    \n    return arr;\n}\n\n// Test cases\nlet arr1 = [1, 2, 0, 4, 3, 0, 5, 0];\nconsole.log(moveZeroesToEnd(arr1)); // Output: [1, 2, 4, 3, 5, 0, 0, 0]\n\nlet arr2 = [1, 2, 0, 0, 0, 3, 6];\nconsole.log(moveZeroesToEnd(arr2)); // Output: [1, 2, 3, 6, 0, 0, 0]\n",
  "kotlin": "import org.junit.Assert.assertArrayEquals\nimport org.junit.Test\n\nfun main() {\n    arrayOf(1, 2, 0, 4, 3, 0, 5, 0)\n        .printWithZeroesAtEnd()\n}\n\n/**\n * Extension function that moves all zeroes to the end of the\n * receiver array and prints the result to console.\n *\n * Example:\n * ```kotlin\n * arrayOf(1, 2, 0, 4, 3, 0, 5, 0).printWithZeroesAtEnd()\n * ```\n *\n * Output:\n * ```console\n * 1 2 4 3 5 0 0 0\n * ```\n */\nprivate fun Array<Int>.printWithZeroesAtEnd(): Array<Int> =\n    let(::moveAllZeroesToEndOfArray)\n        .also {\n            println(it.joinToString())\n        }\n\n/**\n * Function that moves all zeroes to the end of an array.\n * @return a new array comprising the elements of the input with all zeroes\n * shifted to the end.\n */\nprivate fun moveAllZeroesToEndOfArray(input: Array<Int>): Array<Int> =\n    input.fold(\n        Pair(emptyList<Int>(), emptyList<Int>())\n    ) { (nonZeroes, zeroes), i ->\n        if (i != 0) Pair((nonZeroes + i), zeroes)\n        else Pair(nonZeroes, (zeroes + 0))\n    }.let { (nonZeroes, zeroes) ->\n        (nonZeroes + zeroes).toTypedArray()\n    }\n\nclass MoveAllZeroesToEndOfArrayTest {\n\n    @Test\n    fun testCase1() {\n        // GIVEN\n        val input = arrayOf(1, 2, 0, 4, 3, 0, 5, 0)\n        val expected = arrayOf(1, 2, 4, 3, 5, 0, 0, 0)\n\n        // WHEN\n        val actual = input.let(::moveAllZeroesToEndOfArray)\n\n        // THEN\n        assertArrayEquals(expected, actual)\n    }\n\n    @Test\n    fun testCase2() {\n        // GIVEN\n        val input = arrayOf(1, 2, 0, 0, 0, 3, 6)\n        val expected = arrayOf(1, 2, 3, 6, 0, 0, 0)\n\n        // WHEN\n        val actual = input.let(::moveAllZeroesToEndOfArray)\n\n        // THEN\n        assertArrayEquals(expected, actual)\n    }\n}\n",
  "ruby": "def moveZeros(a)\n    len=a.length\n    count=0\n    for i in 0...len\n        if a[i]!=0\n            a[count]=a[i]\n            count+=1\n        end\n    end\n\n    while count<len\n        a[count]=0\n        count+=1\n    end\n    return a\nend\n\nputs moveZeros([1, 2, 0, 4, 3, 0, 5, 0])\n",
  "swift": "func moveZeroesToEnd(_ arr: inout [Int]) {\n    var nonZeroIndex = 0\n    \n    // Traverse the array, if the current element is non-zero, move it to the front\n    for num in arr {\n        if num != 0 {\n            arr[nonZeroIndex] = num\n            nonZeroIndex += 1\n        }\n    }\n    \n    // Fill the remaining positions with zeroes\n    while nonZeroIndex < arr.count {\n        arr[nonZeroIndex] = 0\n        nonZeroIndex += 1\n    }\n}\n\n// Take input from the user\nprint(\"Enter the array elements separated by spaces:\")\nif let input = readLine(), !input.isEmpty {\n    let array = input.split(separator: \" \").compactMap { Int($0) }\n    if array.isEmpty {\n        print(\"Invalid input. Please enter valid integers separated by spaces.\")\n    } else {\n        var arr = array\n        moveZeroesToEnd(&arr)\n        print(\"Output: \\(arr)\")\n    }\n} else {\n    print(\"Invalid input. Please enter valid integers separated by spaces.\")\n}\n",
  "typescript": "function moveZeroesToEnd(arr: number[]): number[] {\n    let nonZeroIndex = 0;\n\n    // Move all non-zero elements to the beginning of the array\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== 0) {\n            arr[nonZeroIndex++] = arr[i];\n        }\n    }\n\n    // Fill remaining positions with zeroes\n    for (let i = nonZeroIndex; i < arr.length; i++) {\n        arr[i] = 0;\n    }\n\n    return arr;\n}\n\n// Test cases\nconsole.log(moveZeroesToEnd([1, 2, 0, 4, 3, 0, 5, 0])); // Output: [1, 2, 4, 3, 5, 0, 0, 0]\nconsole.log(moveZeroesToEnd([1, 2, 0, 0, 0, 3, 6]));   // Output: [1, 2, 3, 6, 0, 0, 0]\n",
  "description": "\n## Write a program to move all zeroes to end of array\n\n```txt\r\nInput  : arr[] = {1, 2, 0, 4, 3, 0, 5, 0};\r\nOutput : arr[] = {1, 2, 4, 3, 5, 0, 0, 0};\r\n\r\nInput  : arr[] = {1, 2, 0, 0, 0, 3, 6};\r\nOutput : arr[] = {1, 2, 3, 6, 0, 0, 0};\r\n```\n\n---\n",
  "trackId": 5133,
  "lastUpdated": "2024-06-26T16:58:00Z",
  "contributors": [
    "Riyazul555",
    "harshraj8843",
    "anandfresh",
    "lingalaviran",
    "rooksoto",
    "Parvezkhan0",
    "srini696",
    "chintanrupareliya",
    "srivamsidandu",
    "Amedi-Imbira",
    "gabinpoa",
    "av-techspot",
    "AlessioBugetti"
  ],
  "julia": "function move_zeroes!(arr::Vector{Int})\n    non_zero_index = 1\n\n    # First pass: Move all non-zero elements to the front of the array\n    for i in 1:length(arr)\n        if arr[i] != 0\n            arr[non_zero_index] = arr[i]\n            non_zero_index += 1\n        end\n    end\n\n    # Second pass: Fill the remaining positions with zeroes\n    for i in non_zero_index:length(arr)\n        arr[i] = 0\n    end\nend\n\n# Test the function\narr = [0, 1, 0, 3, 12]\nprintln(\"Original array: \", arr)\n\nmove_zeroes!(arr)\n\nprintln(\"Array after moving zeroes: \", arr)\n",
  "scala": "object MoveZeroesToEnd {\n  def main(args: Array[String]): Unit = {\n    val arr = Array(0, 1, 0, 3, 12)\n    println(s\"Original array: ${arr.mkString(\", \")}\")\n    \n    moveZeroes(arr)\n    \n    println(s\"Array after moving zeroes: ${arr.mkString(\", \")}\")\n  }\n\n  def moveZeroes(arr: Array[Int]): Unit = {\n    var nonZeroIndex = 0\n\n    // First, fill in the non-zero elements\n    for (i <- arr.indices) {\n      if (arr(i) != 0) {\n        arr(nonZeroIndex) = arr(i)\n        nonZeroIndex += 1\n      }\n    }\n\n    // Then, fill in the remaining positions with zeroes\n    for (i <- nonZeroIndex until arr.length) {\n      arr(i) = 0\n    }\n  }\n}\n",
  "dart": "// Dart program to move all zeroes to end of array\n\nvoid moveZeroes(List<int> arr) {\n  int n = arr.length;\n\n  // Traverse the array and move non-zero elements to the beginning\n  int count = 0;\n  for (int i = 0; i < n; i++) {\n    if (arr[i] != 0) {\n      arr[count++] = arr[i];\n    }\n  }\n\n  // Fill the remaining positions with zeroes\n  while (count < n) {\n    arr[count++] = 0;\n  }\n}\n\nvoid main() {\n  // Test cases\n  List<int> arr1 = [1, 2, 0, 4, 3, 0, 5, 0];\n  moveZeroes(arr1);\n  print('Output for arr1: $arr1'); // Output : [1, 2, 4, 3, 5, 0, 0, 0]\n\n  List<int> arr2 = [1, 2, 0, 0, 0, 3, 6];\n  moveZeroes(arr2);\n  print('Output for arr2: $arr2'); // Output : [1, 2, 3, 6, 0, 0, 0]\n}\n ",
  "go": "package main\n\nimport \"fmt\"\n\nfunc moveZeroesToEnd(arr [16]int) [16]int {\n\tvar nonZeroes []int\n\tfor _, elem := range arr {\n\t\tif elem != 0 {\n\t\t\tnonZeroes = append(nonZeroes, elem)\n\t\t}\n\t}\n\n\treturn [16]int(append(nonZeroes, make([]int, len(arr)-len(nonZeroes))...))\n}\n\nfunc main() {\n\tvar arr = [16]int{0, 1, 0, 0, 2, 3, 4, 0, 5, 6, 0, 7, 8, 0, 9, 0}\n\tarr = moveZeroesToEnd(arr)\n\tfmt.Println(arr)\n}\n",
  "haskell": "moveZeroes :: [Int] -> [Int]\nmoveZeroes xs = nonZeroes ++ zeroes\n  where\n    nonZeroes = filter (/= 0) xs\n    zeroes = replicate (length xs - length nonZeroes) 0\n\nmain :: IO ()\nmain = do\n  let arr = [0, 1, 0, 3, 12]\n  putStrLn $ \"Original array: \" ++ show arr\n  \n  let result = moveZeroes arr\n  \n  putStrLn $ \"Array after moving zeroes: \" ++ show result\n",
  "php": "\n<?php\nfunction moveZerosToEnd($arr) {\n    $result = array();\n    $zeroCount = 0;\n\n    foreach ($arr as $value) {\n        if ($value != 0) {\n            $result[] = $value;\n        } else {\n            $zeroCount++;\n        }\n    }\n\n    for ($i = 0; $i < $zeroCount; $i++) {\n        $result[] = 0;\n    }\n\n    return $result;\n}\n\necho \"Enter array elements separated by space: \";\n$input = trim(fgets(STDIN));\n$inputArray = explode(\" \", $input);\n\n$inputArray = array_map('intval', $inputArray);\n\n$resultArray = moveZerosToEnd($inputArray);\necho \"Array after moving zeros to the end: \";\nprint_r($resultArray);\n?>\n",
  "perl": "@input = qw(1, 2, 0, 4, 3, 0, 5, 0);  \n@zeroArr = qw();\n@nonZeroArr = qw();\nforeach $i (@input) {  \n  if($i == 0){\n    push(@zeroArr, $i);\n  }else{\n    push(@nonZeroArr, $i);\n  }\n} \n\n@result = (@nonZeroArr, @zeroArr);\n\nprint(@result);\n",
  "python": "def zeroes_to_end(arr: list) -> list:\n    result = [x for x in arr if x != 0] + [x for x in arr if x == 0]\n    return result\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 0, 4, 3, 0, 5, 0]\n    print(zeroes_to_end(arr))\n",
  "r": "moveZeroesToEnd <- function(arr) {\n  nonZeroIndex <- 1\n\n  for (i in 1:length(arr)) {\n    if (arr[i] != 0) {\n      arr[nonZeroIndex] <- arr[i]\n      nonZeroIndex <- nonZeroIndex + 1\n    }\n  }\n\n  for (i in nonZeroIndex:length(arr)) {\n    arr[i] <- 0\n  }\n\n  return(arr)\n}\n\n\narr1 <- c(1, 2, 0, 4, 3, 0, 5, 0)\nresult1 <- moveZeroesToEnd(arr1)\ncat(\"Input  : arr[] =\", arr1, \"\\n\")\ncat(\"Output : arr[] =\", result1, \"\\n\")\n\narr2 <- c(1, 2, 0, 0, 0, 3, 6)\nresult2 <- moveZeroesToEnd(arr2)\ncat(\"Input  : arr[] =\", arr2, \"\\n\")\ncat(\"Output : arr[] =\", result2, \"\\n\")\n",
  "rust": "fn move_zeroes(arr: &mut Vec<i32>) {\n    let mut non_zero_index = 0;\n\n    // First pass: Move all non-zero elements to the front of the array\n    for i in 0..arr.len() {\n        if arr[i] != 0 {\n            arr[non_zero_index] = arr[i];\n            non_zero_index += 1;\n        }\n    }\n\n    // Second pass: Fill the remaining positions with zeroes\n    for i in non_zero_index..arr.len() {\n        arr[i] = 0;\n    }\n}\n\nfn main() {\n    let mut arr = vec![0, 1, 0, 3, 12];\n    println!(\"Original array: {:?}\", arr);\n    \n    move_zeroes(&mut arr);\n    \n    println!(\"Array after moving zeroes: {:?}\", arr);\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}