{
  "slug": "calculate-the-permutation-of-n-objects-taken-r-at-a-time",
  "title": "Calculate The Permutation Of N Objects Taken R At A Time",
  "c": "#include <stdio.h> /* printf, scanf */\n\nint CalcPermutation(int n,int r);\n\nint main()\n{\n    int n = 0;\n    int r = 0;\n\n\n    printf(\"please enter 2 numbers n and r:\\n\");\n\n    scanf(\"%d %d\",&n,&r);\n\n    printf(\"%d\\n\",CalcPermutation(n,r));\n\n\n    return 0;\n}\n\nint CalcFactorial(int n)\n{\n    if(n == 1)\n    {\n        return n;\n    }\n\n    return n * (CalcFactorial(n - 1));\n}\n\nint CalcPermutation(int n,int r)\n{\n    return CalcFactorial(n)/ CalcFactorial(n - r); \n}",
  "c-plus-plus": "#include <iostream>\n\nusing namespace std;\n\nint factorial(int n) {\n  if (n == 0) {\n    return 1;\n  }\n\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int n, r;\n  cout << \"Enter value of n and r: \";\n  cin >> n >> r;\n\n  if (r > n) {\n    cout << \"Error: r should be less than or equal to n.\" << endl;\n    return 1;\n  }\n\n  int result = 1;\n\n  if (r == 0) {\n    result = 1;\n  } else if (r == 1) {\n    result = n;\n  } else if (n == r || n - 1 == r) {\n    result = factorial(n);\n  } else {\n    for (int i = 0; i < n - r; ++i) {\n      result *= n - i;\n    }\n  }\n\n  cout << \"Permutation of \" << n << \" objects taken \" << r << \" at a time is: \" << result << endl;\n  return 0;\n}\n",
  "c-sharp": "using System;\n\npublic class HelloWorld\n{\n    public static void Main(string[] args)\n    {\n       int n = Convert.ToInt32(Console.ReadLine());\n       int r = Convert.ToInt32(Console.ReadLine());\n       int p = factorial(n)/factorial(n-r);\n    \n       Console.WriteLine(\"The permutation is : \" + p);\n    }\n    \n    static int factorial(int num){\n        if(num == 0 || num == 1) return 1;\n        else return num * factorial(num-1);\n    }\n}\n",
  "java": "public class CalculateThePermutationsOfNObjectsTakenAtTime {\n\n  public static void main(String[] args) {\n    if(args.length == 2) {\n      int n = 0;\n      int r = 0;\n      try {\n        n = Integer.parseInt(args[0]);\n        r = Integer.parseInt(args[1]);\n      } catch(Exception error){\n        throw new IllegalArgumentException(\"Error parsing arguments: \"+args.toString());\n      }\n      System.out.println(permutations(n, r));\n    }\n    else {\n      throw new IllegalArgumentException(\n        \"Expected two arguments, received \" + args.length + \" arguments\"\n      ) ;\n    }\n  }\n\n  public static int factorial(int num) {\n      if (num == 0) return 1;\n      return num * factorial(num - 1);\n  }\n\n  public static int permutations(int total, int sample) {\n    try {\n      return factorial(total)/factorial(total-sample);\n    }\n    catch(Exception error){\n      throw error;\n    }\n  }\n}\n",
  "javascript": "function factorial(num) {\n  if (num == 0) return 1;\n  return num * factorial(num - 1);\n}\n\nfunction permutations(total, sample) {\n  try {\n    return factorial(total) / factorial(total - sample);\n  } catch (error) {\n    throw error;\n  }\n}\n\nconsole.log(permutations(5, 2));\n",
  "kotlin": "import java.util.*\n\nfun factorial(n: Int): Int {\n    var result = 1\n    for (i in 1..n) {\n        result *= i\n    }\n    return result\n}\n\nfun permutation(n: Int, r: Int): Int {\n    return factorial(n) / factorial(n - r)\n}\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    val n = scanner.nextInt()\n    val r = scanner.nextInt()\n    val result = permutation(n, r)\n    println(\"Permutation of $n objects taken $r at a time is: $result\")\n}",
  "ruby": "def factorial(n)\n  (1..n).reduce(1, :*)\nend\n\ndef permutation(n, r)\n  factorial(n) / factorial(n - r)\nend\n\n# Example usage\nn = 5\nr = 3\nputs \"Permutation of #{n} objects taken #{r} at a time is: #{permutation(n, r)}\"\n",
  "swift": "import Foundation\n\n// Function to calculate factorial\nfunc factorial(_ n: Int) -> Int {\n    return (n == 0) ? 1 : n * factorial(n - 1)\n}\n\n// Function to calculate permutations\nfunc permutation(_ n: Int, _ r: Int) -> Int {\n    return factorial(n) / factorial(n - r)\n}\n\n// Taking input from the user\nprint(\"input:\", terminator: \" \")\nlet inputs = readLine()?.split(separator: \",\").compactMap { Int($0.trimmingCharacters(in: .whitespaces)) }\nif let n = inputs?[0], let r = inputs?[1] {\n    // Calculating permutations\n    let result = permutation(n, r)\n\n    // Displaying the result\n    print(result)\n} else {\n    print(\"Invalid input\")\n}\n",
  "typescript": "function factorial(num: number): number {\n  if (num == 0) return 1;\n  return num * factorial(num - 1);\n}\n\nfunction permutations(total: number, sample: number): number {\n  if (total > sample) {\n    return factorial(total) / factorial(total - sample);\n  } else {\n    throw new Error(\n      `ERROR: supplied total > sample; permutations(total=${total}, sample=${sample})`,\n    );\n  }\n}\n\nconsole.log(permutations(5, 2));\n",
  "description": "\n## Write a program to calculate the permutation of n objects taken r at a time\n\nPermutation is an arrangement of objects in a particular order. The number of permutations on n objects taken r at a time is given by the formula n!/(n-r)!\n\n```txt\nInput  : 5, 2\nOutput : 20\n```\n\n---\n",
  "trackId": 4194,
  "lastUpdated": "2024-06-16T16:59:29Z",
  "contributors": [
    "harshraj8843",
    "pramod-karkhani",
    "Greeshmanth1",
    "Sheventon",
    "ShounaKulkarni",
    "moaldeen",
    "pedram-mohajer",
    "akkshayTandon",
    "Osher160",
    "cacti23",
    "BrokenDesign"
  ],
  "scala": "def factorial(num: Integer): Integer = {\n    if (num == 0) return 1\n        return num * factorial(num - 1)\n    }\n\ndef permutations(total: Integer, sample: Integer): Integer = {\n    if(total > sample) {\n        return factorial(total)/factorial(total-sample)\n    } else {\n        throw new Exception(s\"ERROR: supplied total > sample; permutations(total=${total}, sample=${sample})\")\n    }\n}\n\nprintln(permutations(5, 2))\n",
  "go": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc factorial(num int) int {\n\tif num == 0 {\n\t\treturn 1\n\t} else {\n\t\treturn num * factorial(num-1)\n\t}\n}\n\nfunc permutations(total int, sample int) (int, error) {\n\tvar value int\n\tvar error error\n\tif total > sample {\n\t\tvalue = factorial(total) / factorial(total-sample)\n\t} else {\n\t\terror = errors.New(fmt.Sprintf(\"ERROR: supplied total > sample; permutations(total=%d, sample=%d)\", total, sample))\n\t}\n\treturn value, error\n}\n\nfunc main() {\n\tvar result, err = permutations(5, 2)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(result)\n}\n",
  "php": "<?php\nfunction factorial($num) {\n  if($num == 0 || $num == 1) return 1;\n  else return $num * factorial($num-1);\n}\n\n$n = (int)readline(\"Enter total objects(n) : \");\n$r = (int)readline(\"Enter objects to be selected(r) : \");\n$p = factorial($n)/factorial($n-$r);\necho \"The permutation is : \" . $p;\n?>\n",
  "perl": "use strict;\nuse warnings;\n\nsub calcPermutation {\n    my ($n, $r) = @_;\n    return calcFactorial($n) / calcFactorial($n - $r);\n}\n\nsub calcFactorial {\n    my ($n) = @_;\n    if ($n == 1) {\n        return $n;\n    } else {\n        return $n * calcFactorial($n - 1);\n    }\n}\n\nprint \"Please enter 2 numbers n and r: \";\nmy ($n, $r) = split / /, <STDIN>;\n\nif ($n >= $r) {\n    my $permutation = calcPermutation($n, $r);\n    print $permutation;\n} else {\n    print \"Invalid input: n must be greater than or equal to r\\n\";\n}\n\n",
  "python": "def npr(n, r):\n    if r > n:\n        return 0\n    # n! / (n-r)!  = n*(n-1)*(n-2)*..*(n-r+1)*(n-r)! / (n-r)! =n*(n-1)*(n-2)*..*(n-r+1)\n    result = 1\n    for i in range(n, n - r, -1):\n        result *= i\n    return result\n\n\nn = int(input(\"Enter the n value: \"))\nr = int(input(\"Enter the r value: \"))\nprint(\"npr value is:\", npr(n, r))\n",
  "r": "# Function to calculate permutations\ncalculate_permutation <- function(n, r) {\n  return(factorial(n) / factorial(n - r))\n}\n\n# Example usage\nn <- 5\nr <- 2\nresult <- calculate_permutation(n, r)\n\ncat(\"The number of permutations of\", n, \"objects taken\", r, \"at a time is:\", result, \"\\n\")\n",
  "rust": "fn factorial(num: i64) -> i64 {\n    if num == 0 {\n        return 1;\n    } else {\n        return num * factorial(num - 1);\n    }\n}\n\nfn permutations(total: i64, sample: i64) -> i64 {\n    if total > sample {\n        return factorial(total) / factorial(total - sample);\n    } else {\n        panic!(\n            \"ERROR: supplied total > sample; permutations(total={}, sample={})\",\n            total, sample\n        )\n    }\n}\n\nfn main() -> () {\n    println!(\"{}\", permutations(5, 2))\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "scala",
    "go",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}