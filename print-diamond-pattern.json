{
  "slug": "print-diamond-pattern",
  "title": "Print Diamond Pattern",
  "c": "#include<stdio.h>\n\nvoid printDiamond(int n)\n{\n\tint space = n - 1;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0;j < space; j++)\n\t\t\tprintf(\" \");\n\n\t\tfor (int j = 0;j <= i; j++)\n\t\t\tprintf(\"* \");\n\n\t\tprintf(\"\\n\");\n\t\tspace--;\n\t}\n\n\tspace = 0;\n\n\tfor (int i = n; i > 0; i--)\n\t{\n\t\tfor (int j = 0; j < space; j++)\n\t\t\tprintf(\" \");\n\n\t\tfor (int j = 0;j < i;j++)\n\t\t\tprintf(\"* \");\n\n\t\tprintf(\"\\n\");\n\t\tspace++;\n\t}\n}\n\n// Driver code\nint main()\n{\n\tprintDiamond(5);\n\treturn 0;\n}\n",
  "c-plus-plus": "#include <bits/stdc++.h>\nusing namespace std;\n\nvoid printDiamond(int n)\n{\n\tint space = n - 1;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\n\t\tfor (int j = 0;j < space; j++)\n\t\t\tcout << \" \";\n\n\t\tfor (int j = 0; j <= i; j++)\n\t\t\tcout << \"* \";\n\n\t\tcout << endl;\n\t\tspace--;\n\t}\n\n\tspace = 0;\n\n\tfor (int i = n; i > 0; i--)\n\t{\n\n\t\tfor (int j = 0; j < space; j++)\n\t\t\tcout << \" \";\n\n\t\tfor (int j = 0;j < i;j++)\n\t\t\tcout << \"* \";\n\n\t\tcout << endl;\n\t\tspace++;\n\t}\n}\n\n// Driver code\nint main()\n{\n\tprintDiamond(5);\n\treturn 0;\n}\n",
  "c-sharp": "using System;  \npublic class Exercise31  \n{  \n    public static void Main()\n{\n   int i,j,r;\n  \n   r = Convert.ToInt32(5);   \n   for(i=0;i<=r;i++)\n   {\n     for(j=1;j<=r-i;j++)\n     Console.Write(\" \");\n     for(j=1;j<=2*i-1;j++)\n     Console.Write(\"*\");\n     Console.Write(\"\\n\");\n   }\n \n   for(i=r-1;i>=1;i--)\n   {\n     for(j=1;j<=r-i;j++)\n     Console.Write(\" \");\n     for(j=1;j<=2*i-1;j++)\n       Console.Write(\"*\");\n     Console.Write(\"\\n\");\n   }\n  }\n}\n",
  "f-sharp": "let printDiamond n =\n    // Function to print a single line of the diamond\n    let printLine i =\n        let stars = new string('*', i * 2 - 1)\n        let spaces = new string(' ', n - i)\n        printfn \"%s%s\" spaces stars\n\n    // Upper half of the diamond\n    for i in 1 .. n do\n        printLine i\n\n    // Lower half of the diamond\n    for i in n - 1 .. -1 .. 1 do\n        printLine i\n\n// Take the size of the diamond from the user\nprintfn \"Enter the size of the diamond: \"\nlet size = System.Console.ReadLine() |> int\n\n// Print the diamond\nprintDiamond size",
  "java": "class PrintDiamondPattern {\n  static void DiamondPattern(int n) {\n    int i, j, k;\n    // Print upper half of the diamond\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n - i; j++) {\n        System.out.print(\" \");\n      }\n      for (k = 0; k < 2 * i + 1; k++) {\n        System.out.print(\"*\");\n      }\n      System.out.println();\n    }\n    // Print lower half of the diamond\n    for (i = n - 2; i >= 0; i--) {\n      for (j = 0; j < n - i; j++) {\n        System.out.print(\" \");\n      }\n      for (k = 0; k < 2 * i + 1; k++) {\n        System.out.print(\"*\");\n      }\n      System.out.println();\n    }\n  }\n  public static void main(String[] args) {\n    DiamondPattern(5);\n  }\n}\n",
  "javascript": "const diamondPattern = (n) => {\n  let iteration = 0;\n  const construct = [\"*\".repeat(2 * n - 1)];\n  n *= 2;\n  while ((n -= 2) > 0) {\n    const layer = \" \".repeat(++iteration) + \"*\".repeat(n - 1);\n    construct.unshift(layer);\n    construct.push(layer);\n  }\n  construct.forEach((pattern) => console.log(pattern));\n};\n\ndiamondPattern(5);\n",
  "kotlin": "fun drawDiamond(rows: Int) {\n    var k = 0\n\n    for (i in 1..rows) {\n        for (space in 1..rows - i) {\n            print(\"  \")\n        }\n\n        while (k != 2 * i - 1) {\n            print(\"* \")\n            ++k\n        }\n\n        println()\n        k = 0\n    }\n\n    for (i in rows-1 downTo 1) {\n\n        for (space in 1..rows - i) {\n            print(\"  \")\n        }\n\n        for (j in i..2 * i - 1) {\n            print(\"* \")\n        }\n\n        for (j in 0..i - 1 - 1) {\n            print(\"* \")\n        }\n\n        println()\n    }\n}\n\nfun main() {\n    val num = 5\n    print(\"\\n\")\n    drawDiamond(num)\n}\n",
  "ruby": "module PrintDiamond\n\n  def self.print(num)\n\n    1.upto(num) do |i|\n      draw(num, i)\n    end\n\n    (num-1).downto(1) do |i|\n      draw(num, i)\n    end\n\n    return\n  end\n\n  def self.draw(num, i)\n    asterisks = \"*\" * i\n    spaces = \" \" * (num - i)\n    puts spaces + asterisks + (asterisks[1..])\n  end\nend\n\nPrintDiamond.print(5)",
  "swift": "func printDiamondPattern(_ n: Int) {\n\n    for i in 1...n {\n        for _ in stride(from: n - i, to: 0, by: -1) {\n            print(\" \", terminator: \"\")\n        }\n\n        for _ in 1...(2 * i - 1) {\n            print(\"*\", terminator: \"\")\n        }\n\n        print()\n    }\n\n    for i in stride(from: n - 1, to: 0, by: -1) {\n        \n        for _ in stride(from: n - i, to: 0, by: -1) {\n            print(\" \", terminator: \"\")\n        }\n\n        for _ in 1...(2 * i - 1) {\n            print(\"*\", terminator: \"\")\n        }\n        print()\n    }\n}\n\nprintDiamondPattern(5)\n",
  "typescript": "function printDiamond(num: number): void {\n  let str = \"\";\n  if (!num) return console.log(\"\");\n  if (num < 0) num = -num;\n  if (num === 1) return console.log(\"*\");\n  str += \" \".repeat(num) + \"*\\n\";\n\n  for (var i = 1; i < num - 1; i++) {\n    str += \" \".repeat(num - i) + \"*\".repeat(i * 2 + 1) + \"\\n\";\n  }\n\n  str += \" \".repeat(num - i) + \"*\".repeat(i * 2 + 1) + \"\\n\";\n\n  for (let j = i - 1; j > 0; j--) {\n    str += \" \".repeat(num - j) + \"*\".repeat(j * 2 + 1) + \"\\n\";\n  }\n\n  str += \" \".repeat(num) + \"*\";\n  console.log(str);\n}\nprintDiamond(5);\n",
  "description": "\n## Write a program to print diamond pattern\n\n```txt\nInput  : 5\n\nOutput :\n    *\n   ***\n  *****\n *******\n*********\n *******\n  *****\n   ***\n    *\n```\n\n---\n",
  "trackId": 4665,
  "lastUpdated": "2024-03-28T06:35:04Z",
  "contributors": [
    "harshraj8843",
    "charan-hash",
    "pradeepch2107",
    "lookwhoshere99",
    "imsherlocked",
    "anandfresh",
    "anvithayerneni",
    "sahanasurapureddy",
    "Fukurokudzu",
    "BarBronshtein",
    "joao-vitor-souza",
    "sam-mugo",
    "AadityaDev",
    "simranrangari",
    "divyasakre",
    "Mrunmayi28",
    "vedantpople4",
    "das-amit",
    "Medmly20208"
  ],
  "julia": "function print_diamond(n)\n    # Upper half of the diamond\n    for i in 1:n\n        println(\" \"^(n-i) * \"*\"^(2*i-1))\n    end\n    \n    # Lower half of the diamond (excluding the middle row if n is odd)\n    for i in (n-1):-1:1\n        println(\" \"^(n-i) * \"*\"^(2*i-1))\n    end\nend\n\n# Test with n = 5\nprint_diamond(5)\n",
  "scala": "object printDiamondPattern {\n    def diammondPatternIncrementByTwo(n: Int): Unit = {\n        // print upper half of the diamond\n        for (i <- 1 to n) {\n            for (j <- 1 to n - i) print(\"  \")\n            for (j <- 1 until 2 * i) print(\"* \")\n            println()\n        }\n        // print lower half of the diamond\n        for (i <- n - 1 to 1 by -1) {\n            for (j <- 1 to n - i) print(\"  \")\n            for (j <- 1 until 2 * i) print(\"* \")\n            println()\n        }\n    }\n    def main(args: Array[String]): Unit = {\n    val n = 5\n    diammondPatternIncrementByTwo(n)\n\n    }\n  \n}\n\n",
  "dart": "import 'dart:io';\n\nvoid main() {\n  int i, j, k, m = 1;\n  \n  print(\"Enter the number : \");\n  int? n = int.parse(stdin.readLineSync()!);\n  \n  print(\"$n\");\n  for ( i =1; i <= n; i++) {\n    for (j = 1; j <= n - i; j++) {\n      stdout.write(\" \");\n    }\n    for (k = 1; k <= ( 2 * i - 1); k++) {\n      stdout.write(\"*\");\n    }\n    stdout.writeln(\"\");\n  }\n  \n  for ( i = n-1; i >= 1; i--) {\n    for ( j = 1; j <= m; j++) {\n      stdout.write(\" \");\n    }\n    for (k = 1; k <= ( 2 * i - 1); k++) {\n      stdout.write(\"*\");\n    }\n    m++;  \n    stdout.writeln(\"\");\n  }\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar i, j, k int\n\ti = 1\n\tj = 1\n\tk = 1\n\tvar row int\n\trow = 5\n\tfor i = 1; i <= row; i++ {\n\t\tfor j = 1; j <= row-i; j++ {\n\t\t\tfmt.Printf(\" \")\n\t\t}\n\t\tfor k = 1; k <= i*2-1; k++ {\n\t\t\tfmt.Printf(\"*\")\n\t\t}\n\t\tfmt.Println()\n\t}\n\tfor i = row - 1; i > 0; i-- {\n\t\tfor j = 1; j <= row-i; j++ {\n\t\t\tfmt.Printf(\" \")\n\t\t}\n\t\tfor k = 1; k <= i*2-1; k++ {\n\t\t\tfmt.Printf(\"*\")\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n",
  "haskell": "main :: IO ()\nmain = do\n    putStrLn \"Enter the size of the diamond: \"\n    size <- readLn\n    printDiamond size\n\nprintDiamond :: Int -> IO ()\nprintDiamond size\n  | size <= 0 = putStrLn \"Invalid size. Size should be a positive integer.\"\n  | otherwise = putStr $ unlines $ diamondRows size\n\ndiamondRows :: Int -> [String]\ndiamondRows size = topRows ++ bottomRows\n  where\n    topRows = map (centerPad size) [1, 3 .. size]\n    bottomRows = map (centerPad size) (reverse [1, 3 .. (size - 2)])\n\ncenterPad :: Int -> Int -> String\ncenterPad totalSize rowSize = replicate spaces ' ' ++ replicate rowSize '*' ++ replicate spaces ' '\n  where\n    spaces = (totalSize - rowSize) `div` 2\n",
  "php": "<?php\n\nfunction diamondPattern($n) {\necho \"<pre>\";\nfor ($i = 1; $i < $n; $i++) {\n    for ($j = $i; $j < $n; $j++)\n        echo \"&nbsp;&nbsp;\";\n    for ($j = 2 * $i - 1; $j > 0; $j--)\n        echo (\"&nbsp;*\");\n    echo \"<br>\";\n}\n\nfor ($i = $n; $i > 0; $i--) {\n    for ($j = $n - $i; $j > 0; $j--)\n        echo \"&nbsp;&nbsp;\";\n    for ($j = 2 * $i - 1; $j > 0; $j--)\n        echo (\"&nbsp;*\");\n    echo \"<br>\";\n}\necho \"</pre>\";\n}\n\ndiamondPattern(5);\n\n?>\n",
  "perl": "# Perl program to print pattern 1\n\n# Function to print pattern\nsub print_pattern {\n    my $num = shift;\n\n    # Loop to iterate through each row\n    for my $i (1..$num) {\n        # Loop to print numbers in each row\n        for my $j (1..$i) {\n            print \"$j \";\n        }\n        print \"\\n\";\n    }\n}\n\n# Main program\nprint \"Enter the number of rows: \";\nmy $input = <STDIN>;\nchomp($input);\n\n# Check if input is a positive integer\nif ($input =~ /^\\d+$/ && $input > 0) {\n    print_pattern($input);\n} else {\n    print \"Invalid input. Please enter a positive integer.\\n\";\n}\n",
  "python": "def printDiamondPattern(number: int) -> None:\n    \"\"\"\n    print Diamond Pattern\n    Arguments:\n        number:int\n    Returns:\n        None\n    \"\"\"\n\n    #  print the first half of the pattern\n\n    NumberOfSpaces = number\n    NumberOfStars = 1\n    for i in range(0, number):\n        print(\" \" * NumberOfSpaces, end=f\"{'*'*NumberOfStars}\\n\")\n        NumberOfSpaces = NumberOfSpaces - 1\n        NumberOfStars = NumberOfStars + 2\n\n    #  print the second half\n\n    NumberOfSpaces = 2\n    NumberOfStars = NumberOfStars - 4\n\n    for i in range(0, number - 1):\n        print(\" \" * NumberOfSpaces, end=f\"{'*'*NumberOfStars}\\n\")\n        NumberOfSpaces = NumberOfSpaces + 1\n        NumberOfStars = NumberOfStars - 2\n\n\nif __name__ == \"__main__\":\n    number = int(input(\"Type A number : \"))\n    printDiamondPattern(number)\n\n\n# contributed by MedMly20208 Mohamed Moulay\n",
  "r": "diamond <- function(max) {\n\n    # Upper triangle\n    space <- max - 1\n    for (i in 0:(max - 1)) {\n        for (j in 0:space) cat(\" \")\n        for (j in 0:i) cat(\"* \")\n        cat(\"\\n\")\n        space <- space - 1\n    }\n\n    # Lower triangle\n    space = 1;\n    for (i in (max - 1):1) {\n        for (j in 0:space) cat(\" \")\n        for (j in 0:(i - 1)) cat(\"* \")\n        cat(\"\\n\")\n        space <- space + 1\n    }\n}\ndiamond(5)\n",
  "rust": "fn print_diamond_pattern(num_rows: usize) {\n    // Print upper part of the diamond\n    for i in 1..=num_rows {\n        for _ in 0..(num_rows - i) {\n            print!(\" \");\n        }\n\n        for _ in 1..=(2 * i - 1) {\n            print!(\"*\");\n        }\n\n        println!();\n    }\n\n    // Print lower part of the diamond\n    for i in (1..num_rows).rev() {\n        for _ in 0..(num_rows - i) {\n            print!(\" \");\n        }\n\n        for _ in 1..=(2 * i - 1) {\n            print!(\"*\");\n        }\n\n        println!();\n    }\n}\n\nfn main() {\n    let num_rows = 4;\n    \n    print_diamond_pattern(num_rows);\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}