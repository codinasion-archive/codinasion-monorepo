{
  "slug": "find-the-determinant-of-a-matrix",
  "title": "Find The Determinant Of A Matrix",
  "c": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n\n#define   SIZE   10\n\nint main()\n{\n\t float a[SIZE][SIZE], x[SIZE], ratio, det=1;\n\t int i,j,k,n;\n\n\t printf(\"Enter Order of Matrix: \");\n\t scanf(\"%d\", &n);\n\n\t /* 2. Reading Matrix */\n\t printf(\"\\nEnter Coefficients of Matrix: \\n\");\n\t for(i=0;i< n;i++)\n\t {\n\t\t  for(j=0;j< n;j++)\n\t\t  {\n\t\t\t   printf(\"a[%d][%d]=\",i,j);\n\t\t\t   scanf(\"%f\", &a[i][j]);\n\t\t  }\n\t }\n\n\t for(i=0;i< n;i++)\n\t {\n\t\t  if(a[i][i] == 0.0)\n\t\t  {\n\t\t\t   printf(\"Mathematical Error!\");\n\t\t\t   exit(0);\n\t\t  }\n\t\t  for(j=i+1;j< n;j++)\n\t\t  {\n\t\t\t   ratio = a[j][i]/a[i][i];\n\n\t\t\t   for(k=0;k< n;k++)\n\t\t\t   {\n\t\t\t  \t\ta[j][k] = a[j][k] - ratio*a[i][k];\n\t\t\t   }\n\t\t  }\n\t }\n\t printf(\"\\nUpper Triangular Matrix: \\n\");\n\t for(i=0;i< n;i++)\n\t {\n\t\t  for(j=0;j< n;j++)\n\t\t  {\n\t\t\t   printf(\"%0.2f\\t\",a[i][j]);\n\t\t  }\n\t\t  printf(\"\\n\");\n\t }\n\n\n\t for(i=0;i< n;i++)\n     {\n         det = det * a[i][i];\n     }\n\n\t printf(\"\\n\\nDeterminant of given matrix is: %0.3f\", det);\n\n\n\t return 0;\n}\n",
  "c-plus-plus": "#include <iostream> \nusing namespace std; \n\nint main()\n{\n    int matrix[3][3];\n    int determinant = 0;\n\n    cout << \"Enter the 9 elements of matrix: \" << endl;\n\n    for(int i = 0; i < 3; i++)\n        for(int j = 0; j < 3; j++)\n            cin >> matrix[i][j];\n\n    cout << \"\\nThe matrix is\\n\";\n\n    for(int i = 0; i < 3; i++)\n    {\n        cout << \"\\n\";\n\n        for(int j = 0; j < 3; j++)\n            cout << matrix[i][j] << \"\\t\";\n    }\n\n    for(int i = 0; i < 3; i++)\n        determinant = determinant + (matrix[0][i] * (matrix[1][(i+1)%3] * matrix[2][(i+2)%3] - matrix[1][(i+2)%3] * matrix[2][(i+1)%3]));\n\n    cout << \"\\nDeterminant of the matrix is: \" << determinant << endl;\n\n\n    return 0;\n}",
  "c-sharp": "using System;  \npublic class Determinant \n{  \n    public static void Main()\n   {\n            int i,j;\n        \tint[,] arr1 = new int[10,10];\n            int det=0;\n\n\t Console.Write(\"Input elements in the matrix :\\n\");\n       for(i=0;i<3;i++)\n        {\n            for(j=0;j<3;j++)\n            {\n\t           Console.Write(\"element - [{0}],[{1}] : \",i,j);\n\t\t\t   arr1[i,j] = Convert.ToInt32(Console.ReadLine());\n            }\n        }  \n\t Console.Write(\"The matrix is :\\n\");\n\t for(i=0;i<3;i++)\n\t {\n\t   for(j=0;j<3 ;j++)\n\t     Console.Write(\"{0}  \",arr1[i,j]);\n\t    Console.Write(\"\\n\");\n\t }\n\n  for(i=0;i<3;i++)\n      det = det + (arr1[0,i]*(arr1[1,(i+1)%3]*arr1[2,(i+2)%3] - arr1[1,(i+2)%3]*arr1[2,(i+1)%3]));\n\n  Console.Write(\"\\nThe Determinant of the matrix is: {0}\\n\\n\",det);\n  }\n}\n",
  "java": "\nimport java.util.Scanner;\n\npublic class FindTheDeterminantOfAMatrix {\n    public static void main(String[] args) {\n\n        Scanner scnr = new Scanner(System.in);\n        int i, j;\n        int determinant = 0;\n        int arr[][] = new int[3][3];\n        System.out.println(\"Enter the input values\");\n        for (i = 0; i < 3; i++) {\n            for (j = 0; j < 3; j++) {\n                arr[i][j] = scnr.nextInt();\n            }\n        }\n\n        determinant = arr[0][0]*(arr[1][1]*arr[2][2] - arr[2][1]*arr[1][2]) -  (arr[0][1]*(arr[1][0]*arr[2][2] - arr[1][2]*arr[2][0])) +  (arr[0][2]*(arr[1][0]*arr[2][1] - arr[2][0]*arr[1][1]));\n\n        System.out.println(determinant);\n    }\n}\n",
  "javascript": "const determinant = (m) =>\n  m.length == 1\n    ? m[0][0]\n    : m.length == 2\n      ? m[0][0] * m[1][1] - m[0][1] * m[1][0]\n      : m[0].reduce(\n          (r, e, i) =>\n            r +\n            (-1) ** (i + 2) *\n              e *\n              determinant(m.slice(1).map((c) => c.filter((_, j) => i != j))),\n          0,\n        );\n\nconst test = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n]; // 0\n\nconsole.log(determinant(test));\n",
  "kotlin": "import java.util.*\n\nfun main(args: Array<String>) {\n    val scanner = Scanner(System.`in`)\n    var i: Int = 0\n    var j: Int = 0\n    val arr = Array(3) { IntArray(3) }\n    println(\"Enter the input values\")\n    while (i < 3) {\n        j = 0\n        while (j < 3) {\n            arr[i][j] = scanner.nextInt()\n            j++\n        }\n        i++\n    }\n\n    findTheDeterminantOfAMatrix(arr)\n}\n\nfun findTheDeterminantOfAMatrix(arr: Array<IntArray>) {\n    val determinant =\n        arr[0][0] * (arr[1][1] * arr[2][2] - arr[2][1] * arr[1][2]) - arr[0][1] * (arr[1][0] * arr[2][2] - arr[1][2] * arr[2][0]) + arr[0][2] * (arr[1][0] * arr[2][1] - arr[2][0] * arr[1][1])\n    println(determinant)\n}",
  "ruby": "# frozen_string_literal: true\n\nrequire 'matrix'\n\ndef determinant(matrix)\n  matrix.determinant\nend\n\nif $PROGRAM_NAME == __FILE__\n  print 'Dimension : '\n  dimension = gets.chomp.to_i\n  input_matrix = []\n  puts 'Input     :'\n  dimension.times do\n    input_matrix << gets.chomp.split.map(&:to_i)\n  end\n  begin\n    matrix = Matrix[*input_matrix]\n    puts \"Output    :\\n#{determinant(matrix)}\"\n  rescue ExceptionForMatrix::ErrDimensionMismatch => e\n    puts \"Error     : #{e.message}\"\n  end\nend\n",
  "swift": "import Foundation\n\nvar matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nvar determinant = 0, counterForSign = 0\n\nfor index in 0..<3 {\n    var part1 = matrix[1]\n    var part2 = matrix[2]\n    part1.remove(at: index)\n    part2.remove(at: index)\n    let adj = (part1[0] * part2[1]) - (part1[1] * part2[0])\n    if (counterForSign == 0) {\n        determinant += matrix[0][index] * adj\n        counterForSign += 1\n    } else {\n        determinant -= matrix[0][index] * adj\n        counterForSign -= 1\n    }\n}\n\nprint(determinant)",
  "typescript": "const determinant = (m: any[]) =>\n  m.length == 1\n    ? m[0][0]\n    : m.length == 2\n      ? m[0][0] * m[1][1] - m[0][1] * m[1][0]\n      : m[0].reduce(\n          (r: number, e: number, i: number) =>\n            r +\n            (-1) ** (i + 2) *\n              e *\n              determinant(\n                m.slice(1).map((c: any[]) => c.filter((_, j) => i != j)),\n              ),\n          0,\n        );\n\nconst test = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n]; // 0\n\nconsole.log(determinant(test));\n",
  "description": "\n## Write a program to find the determinant of a matrix\n\nThe determinant of a square matrix is a scalar value that can be computed from the elements of the matrix. The determinant of a matrix A is denoted as det(A) or |A|.\n\n```txt\nInput  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n0\n```\n\n---\n",
  "trackId": 3422,
  "lastUpdated": "2024-05-13T13:05:37Z",
  "contributors": [
    "WentuM",
    "phbrgnomo",
    "anandfresh",
    "harshraj8843",
    "PavanKumarCB",
    "vedantpople4",
    "Sri01729",
    "urlunaticguy",
    "jaypavasiya"
  ],
  "julia": "using LinearAlgebra\nA = [1 2 3; 4 5 6; 7 8 9]\nprintln(det(A))\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar i, j int\n\tvar det [3][3]int\n\tfor i = 0; i < 3; i++ {\n\t\tfor j = 0; j < 3; j++ {\n\t\t\tfmt.Scan(&det[i][j])\n\t\t}\n\t}\n\tx := (det[1][1] * det[2][2]) - (det[2][1] * det[1][2])\n\ty := (det[1][0] * det[2][2]) - (det[2][0] * det[1][2])\n\tz := (det[1][0] * det[2][1]) - (det[2][0] * det[1][1])\n\tans := (det[0][0] * x) - (det[0][1] * y) + (det[0][2] * z)\n\tfmt.Println(ans)\n}\n",
  "php": "<?php\n\nfunction determinant2x2($a, $b, $c, $d) {\n    return $a * $d - $b * $c;\n}\n\nfunction determinant3x3($mat) {\n    $det = 0;\n    for ($i = 0; $i < 3; $i++) {\n        $det += $mat[0][$i] * determinant2x2(\n            $mat[1][($i + 1) % 3], $mat[1][($i + 2) % 3],\n            $mat[2][($i + 1) % 3], $mat[2][($i + 2) % 3]\n        );\n    }\n    return $det;\n}\n\n$mat = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n \n$det = determinant3x3($mat);\n \necho \"Determinant of the given matrix is: \".$det;\n?>\n",
  "python": "from array import ArrayType\n\nimport numpy as np\n\n\ndef create_line(i: int) -> ArrayType:\n    line_i = input(f\"Line {i}: \").split()\n    return np.array(line_i, dtype=float)\n\n\nn = int(input(\"Matrix Dimension: \"))\nmatrix = [create_line(i) for i in range(n)]\n\nprint(np.linalg.det(matrix))\n",
  "r": "# Function to find the determinant of a matrix\nfind_determinant <- function(matrix) {\n  # Check if the matrix is square\n  if (ncol(matrix) != nrow(matrix)) {\n    stop(\"Matrix must be square to find determinant.\")\n  }\n  \n  # Use the determinant function in base R\n  det_value <- det(matrix)\n  \n  # Return the determinant value\n  return(det_value)\n}\n\n# Example usage\nmatrix_example <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, byrow = TRUE)\nresult <- find_determinant(matrix_example)\n\n# Print the result\ncat(\"Determinant of the matrix:\\n\", result, \"\\n\")\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "go",
    "php",
    "python",
    "r"
  ]
}