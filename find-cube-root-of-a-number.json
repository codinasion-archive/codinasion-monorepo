{
  "slug": "find-cube-root-of-a-number",
  "title": "Find Cube Root Of A Number",
  "c": "#include <stdio.h>\n#include <math.h>\n\nint main()\n{\n    double num;\n\n    printf(\"Enter a number: \");\n    scanf(\"%lf\", &num); \n\n    double result = cbrt(num); \n\n    printf(\"Cube root of %.2f is    :    %.2f\\n\", num, result);\n}\n",
  "c-plus-plus": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n\n    int input;\n\n    cout << \"enter a number:\" << endl;\n    cin >> input;\n\n    cout << \"cube root of \" << input << \" is \" << cbrt(input) << endl;\n\n    return 0;\n}",
  "c-sharp": "using System;\nclass MainClass {\n    public static void Main (string[] args) {\n    Console.WriteLine (\"Please enter a number : \");\n    double num = Convert.ToDouble(Console.ReadLine());\n    double cubeRoot = Math.Cbrt(num);\n    Console.WriteLine(\"Cube root of given number : \"+cubeRoot);\n  }\n}\n",
  "java": "import java.util.Scanner;\n\npublic class FindCubeRootOfANumber {\n    public static void main(String args[]){\n        double i, precision = 0.000001;\n        System.out.println(\"Enter a number:\");\n        Scanner sc = new Scanner(System.in);\n        int num = sc.nextInt();\n\n        for(i = 1; (i*i*i) <= num; ++i);\n        for(--i; (i*i*i) < num; i += precision);\n        System.out.println(\"Cube root of \" + num + \" is \"+i);\n    }\n}\n",
  "javascript": "function cubeRoot(num) {\n  return Math.cbrt(num);\n}\n\nlet number = 27;\nconsole.log(`The cube root of ${number} is ${cubeRoot(number)}.`);\n",
  "ruby": "<?php\n\nfunction cubeRoot($n) {\n return pow($n, 1/3) ;\n}\n\necho cubeRoot(50);\n\n?>\n",
  "swift": "import Swift\nimport Foundation\n\nprint(\"Enter number: \")\nvar number = Double(readLine()!)!\n\nprint (\"Cube root : \", pow(number,1/3))\n",
  "typescript": "function findCubeRootOfANumber(cube: number) {\n  const cubeRot = Math.cbrt(cube);\n  console.log(cubeRot);\n}\n\nfindCubeRootOfANumber(1331);\n",
  "description": "\n## Write a program to find cube root of a number\n\n```txt\nInput  : 27\nOutput : 3\n```\n\n---\n",
  "trackId": 4215,
  "lastUpdated": "2023-11-28T15:47:51Z",
  "contributors": [
    "namrata18s",
    "harshraj8843",
    "anandfresh",
    "esivakumar26",
    "pokharel-nishan",
    "vedantpople4",
    "Medmly20208",
    "joao-vitor-souza",
    "ZZirbel",
    "greeshma-d",
    "rksp25"
  ],
  "julia": "# Read input from the user\nprint(\"Enter a number: \")\nnum = parse(Float64, readline())\n\n# Calculate the cube root\ncubeRoot = cbrt(num)\n\n# Print the result\nprintln(\"Cube root of $num is: $cubeRoot\")\n",
  "scala": "import scala.io.StdIn._;\n\nobject cubeRoot{  \n    def main(args:Array[String]):Unit={  \n        var num:Double    = 0;\n        var res:Double = 0;\n           \n        print(\"Enter a number: \")\n        num= readDouble()\n\n        res= scala.math.cbrt(num)\n        println(\"\\nCube root of the given number : \"+res);\n    }  \n}\n",
  "dart": "import 'dart:io';\nimport 'dart:math';\nvoid main(){\n  print(\"Enter a number :\");\n  var number =int.parse(stdin.readLineSync());\n  var cube_root = pow(number,1/3).round();\n  print('Cube root of the given number : $cube_root');\n}\n",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tvar num float64\n\tfmt.Scanf(\"%f\", &num)\n\tans := math.Cbrt(num)\n\tfmt.Println(ans)\n}\n",
  "haskell": "import Data.Fixed\n\ncubeRoot :: Double -> Double\ncubeRoot x = (cuberoot x) / 1\n   where cuberoot = (** (1/3))\n\nmain :: IO ()\nmain = do\n   let num = 27\n   print (cubeRoot num)\n",
  "php": "<?php\n$x = readline('Enter number to calculate cube root: ');\n\n$x1 = $x**(1/3);\necho \"Cube root of $x is $x1.\\n\";\n\n?>\n",
  "perl": "print \"Enter a number : \\n\";\n$input = <STDIN>;\nif($input<0){\n$input*=-1; \n$out=-1*$input**(1/3);\n$input*=-1; \n}\nelse{\n$out=$input**(1/3);\n}\n&printout;\n\nsub printout{\nprint \"The cube root of $input is $out\\n\\n\";\n}\n",
  "python": "print(round(int(input()) ** (1 / 3), 3))\n",
  "r": "cuberoot = function(x){\n    if(x < 0)\n    { - (-x)^(1/3)}\n    else\n    {x^(1/3)}\n    }\n\ncuberoot(64)\n",
  "rust": "fn main() \n{\n    let num: f32 = 27.0;\n    let result = num.powf(1.0/3.0);\n    \n    println!(\"Cube root : {}\", result);\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}