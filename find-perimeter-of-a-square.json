{
  "slug": "find-perimeter-of-a-square",
  "title": "Find Perimeter Of A Square",
  "c": "#include <stdio.h>\n#include <setjmp.h> // For Exception Handling in C\n\njmp_buf savebuff;\n\n#define TRY if (setjmp(savebuff) == 0)\n#define CATCH else\n\n// Declaring a function with exception handling\nfloat calc_peri(float side);\n\n// Main function\nint main()\n{\n    float s;                                                  // Declaring Variable\n    printf(\"Enter the side of square to find perimeter: \\n\"); // Input prompt\n    scanf(\"%f\", &s);                                          // Reading input\n\n    TRY\n    {\n        printf(\"Perimeter of square is: %f\\n\", calc_peri(s));\n    }\n    CATCH\n    {\n        printf(\"ERROR!!! invalid input.\\n\");\n    }\n\n    return 0;\n}\n\nfloat calc_peri(float side)\n{\n    float peri;\n    peri = 4 * side;\n    if (side < 0)\n    {\n        longjmp(savebuff, 1);\n    }\n\n    return peri;\n}",
  "c-plus-plus": "// C++ Program to Find Perimeter of a Square\n#include <iostream>\nusing namespace std;\n\nint main(){\n    int side, pm;\n    \n    // Taking input\n    cout << \"Enter the side of the square   : \";\n    cin >> side;\n    \n    // Calculating perimeter of square\n    pm = 4 * side;\n    \n    // Display perimeter\n    cout << \"The perimeter of the square is : \" << pm << endl;\n    \n    return 0;\n}\n",
  "c-sharp": "using System;\nclass MainClass {\n    public static void Main (string[] args) {\n    Console.WriteLine (\"Please enter the side : \");\n    double side = Convert.ToDouble(Console.ReadLine());\n    double perimeter = 4 * side;\n    Console.WriteLine(\"Perimeter of square :\"+perimeter);\n  }\n}\n",
  "f-sharp": "let perimeterOfSquare side : int =\n  4 * side\n\nprintfn \"Enter the side :\"\nlet side = int (System.Console.ReadLine())\nlet perimeter = perimeterOfSquare side\n\nprintfn \"Perimeter of square : %d\" perimeter\n",
  "java": "import java.util.Scanner;\npublic class FindPerimeterOfASquare\n{\n\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tSystem.out.println(\"Enter the side of the square:\");\n\t\tdouble peri = sc.nextDouble();\n\t\tdouble  perimeter = 4*peri;\n\t\tSystem.out.println(\"Perimeter: \" + perimeter);\n\t}\n}\n\n// Contributed by Raghav Garg (@grraghav120)\n",
  "javascript": "function perimeterOfSquare(sides) {\n  let perimeterOfSqr = 4 * sides;\n  console.log(perimeterOfSqr);\n}\n\nperimeterOfSquare(2);\n",
  "kotlin": "import java.util.Scanner\n\nfun main() {\n    print(\"Enter the side of the square: : \")\n    println()\n    var side = readLine()\n\n    try {\n        println(\"Perimeter of square with side $side : \" + FindPerimeterOfASquare(side!!.toDouble()))\n    } catch (exception: Exception) {\n        println(\"Input string was not in a correct format\")\n    }\n\n}\n\nprivate fun FindPerimeterOfASquare(side: Double): Double {\n    val perimeter = 4 * side\n\n    return  perimeter\n}",
  "ruby": "# frozen_string_literal: true\n\ndef find_perimeter_of_a_square(side)\n  side * 4\nend\n\nif $PROGRAM_NAME == __FILE__\n  print 'Side : '\n  side = gets.chomp.to_i\n  puts \"Perimeter : #{find_perimeter_of_a_square(side)}\"\nend\n",
  "swift": "import Swift\nimport Foundation\n\nvar side = 2\n\nvar perimeter = 4 * side \nprint(\"Perimeter: \", perimeter)\n",
  "typescript": "const getPerimeterOfSquare = (side: number): number => {\n  return 4 * side;\n};\n\nconst side = 23;\nconsole.log(\n  `The perimeter of the square of side ${side} is ${getPerimeterOfSquare(\n    side,\n  )}`,\n);\n",
  "description": "\n## Write a program to find perimeter of a square\n\nPerimeter of square = 4 Ã— `Side`\n\n```txt\nSide : 2\n\nPerimeter : 8\n```\n\n---\n",
  "trackId": 4239,
  "lastUpdated": "2023-11-27T09:24:09Z",
  "contributors": [
    "harshraj8843",
    "anandfresh",
    "esivakumar26",
    "rksp25",
    "joao-vitor-souza",
    "kituuu",
    "sanmay321",
    "plopez26DPU",
    "sureshsgith",
    "PoweredByCaffein",
    "grraghav120",
    "BiscuitCandy",
    "greeshma-d",
    "ahasunos",
    "manankarnik"
  ],
  "julia": "print(\"Enter the side: \")\nside = parse(Float64, readline(stdin))\nperimeter = 4 * side\nprintln(\"Perimeter of square: \", perimeter)\n",
  "perl": "my $side = <STDIN>;\n$perimeter = 4 * $side;\nprint \"perimeter: $perimeter\"\n",
  "scala": "def findPerimeterOfASquare (side : Int) : Int = {\n    side * 4\n}",
  "dart": "import 'dart:io';\nvoid main(){\n  print(\"Enter the side :\");\n  int side = int.parse(stdin.readLineSync()!);\n  int perimeter = 4 * side;\n  print('Perimeter of square : $perimeter');\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar side float32\n\tfmt.Printf(\"Side: \")\n\tfmt.Scan(&side)\n\tfmt.Println(\"Perimeter:\", 4 * side)\n}\n",
  "haskell": "main :: IO ()\nmain = do \n     putStrLn \"Enter side: \" \n     input1 <- getLine\n     let side = read input1 :: Float\n\n     let perimeter = 4 * side\n     putStrLn $ show (perimeter)\n",
  "php": "<?php\n$x = readline('Enter Side of Square: ');\n\n$x1 = $x * 4;\necho \"Perimeter: $x1 \\n\";\n\n?>\n",
  "python": "def perimeter_of_square(side):\n    return 4 * side\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter side of square\"))\n    print(\"Perimeter of square:\", perimeter_of_square(n))\n",
  "r": "side = 2\ncat(\"Perimeter of square  : \", 4 * side)\n",
  "rust": "/*\n * Program: Find perimeter of a square\n * Author: Manan Karnik\n * Date: 13/10/2022\n */\n\nuse std::io::{self, Write};\n\nfn main() {\n    // String to store input\n    let mut input_text = String::new();\n    print!(\"Enter side of square: \");\n    io::stdout().flush().unwrap();\n\n    // Accept input\n    io::stdin()\n        .read_line(&mut input_text)\n        .expect(\"Failed to read line\");\n\n    // Parse input to f32\n    let side: f32 = input_text.trim().parse().expect(\"Input is not a number\");\n\n    // Print result\n    println!(\"The perimeter of a square with side length {} is {}\", side, side * 4.0);    \n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "perl",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "python",
    "r",
    "rust"
  ]
}