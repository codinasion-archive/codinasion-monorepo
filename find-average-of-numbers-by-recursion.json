{
  "slug": "find-average-of-numbers-by-recursion",
  "title": "Find Average Of Numbers By Recursion",
  "c": "#include <stdio.h>\n\nfloat findSumByRecursion(int a[], int index, int n)\n{\n    if (index == n)\n    {\n        return 0;\n    }\n\n    return a[index] + findSumByRecursion(a, index + 1, n);\n}\nint main()\n{\n    int input[10000], n;\n    printf(\"Enter the number of elements: \");\n    scanf(\"%d\", &n);\n\n    for (int i = 0; i < n; i++)\n    {\n        scanf(\"%d\", &input[i]);\n    }\n\n    float sum = findSumByRecursion(input, 0, n);\n\n    printf(\"Average : %f\\n\", sum / n);\n}",
  "c-plus-plus": "#include <iostream>\nusing namespace std;\n\ndouble FindAverageByRecursion(double arr[], int index, int num)\n{\n    if (index == num)\n    {\n        return 0;\n    }\n    double total = arr[index] + FindAverageByRecursion(arr, index + 1, num);\n    if (index == 0)\n        return total / num;\n    return total;\n}\nint main()\n{\n    int numEle;\n    cout << \"Enter the number of elements :\";\n    cin >> numEle;\n\n    double arr[numEle];\n    for (int i = 0; i < numEle; ++i)\n    {\n        cin >> arr[i];\n    }\n    cout << \"Average : \" << FindAverageByRecursion(arr, 0, numEle);\n    return 0;\n}",
  "c-sharp": "using System;\nclass Average {\n     \n    static double average(int []a, int n)\n    {\n\n        int sum = 0;\n         \n        for (int i = 0; i < n; i++)\n            sum += a[i];\n     \n        return (double)sum / n;\n    }\n     \n    public static void Main ()\n    {\n         \n        int []arr = {1, 2, 3, 4, 5};\n        int n = arr.Length;\n     \n        Console.Write(average(arr, n));\n    }\n}\n",
  "f-sharp": "let rec average (numbers : int list) =\r\n    match numbers with\r\n    | [] -> 0.0 // Base case: empty list, return 0\r\n    | x::xs -> (float x + average xs * float (List.length xs)) / float (List.length numbers)\r\n\r\nlet input = [1; 2; 3; 4; 5]\r\nlet result = average input\r\n\r\nprintfn \"Average of numbers: %.1f\" result",
  "java": "import java.util.Scanner;\n\npublic class FindAverageOfDigitsOfANumberByRecursion {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int num = sc.nextInt();\n        System.out.println(findAverage(num));\n    }\n    static double findAverage(int num){\n        return helper(num,0,0);\n    }\n    static double helper(int num, int sum, int count){\n        if(num == 0){\n            return (double)sum/count;\n        } return helper(num/10, sum + num%10, count+1);\n    }\n}\n",
  "javascript": "function avgRec(a, i, n) {\n  if (i == n - 1) return a[i];\n\n  if (i == 0) return (a[i] + avgRec(a, i + 1, n)) / n;\n\n  return a[i] + avgRec(a, i + 1, n);\n}\n\nlet arr = [1, 2, 3, 4, 5];\nlet n = arr.length;\n\nconsole.log(avgRec(arr, 0, n));\n",
  "kotlin": "// a is array, i is index and n is size of array\nfun avgRec(a: IntArray, i: Int, n: Int): Double {\n    // for last element\n    if (i == n - 1) return a[i].toDouble()\n\n    // When index is 0, divide sum computed so far by n and compute sum\n    return if (i == 0) (a[i] + avgRec(a, i + 1, n)) / n else a[i] + avgRec(a, i + 1, n)\n}\n\nfun main() {\n    val arr = intArrayOf(1, 2, 3, 4, 5)\n    val avgByRecursion = (avgRec(arr, 0, arr.size));\n    println(\"Average By Recursion = $avgByRecursion\")\n}\n",
  "ruby": "def calculate_average(numbers, index = 0)\n  if index == numbers.length - 1\n    return numbers[index].to_f\n  else\n    return numbers[index].to_f + calculate_average(numbers, index + 1)\n  end\nend\n\ndef main\n  puts \"Enter numbers separated by spaces:\"\n  input = gets.chomp\n  numbers = input.split.map(&:to_i)\n\n  if numbers.empty?\n    puts \"No numbers entered. Exiting program.\"\n  else\n    average = calculate_average(numbers) / numbers.length\n    puts \"The average of #{numbers.join(', ')} is: #{average}\"\n  end\nend\n\nmain\n",
  "swift": "import Foundation\n/*\n\nThis Swift program calculates the average of a list of numbers using recursion. The user is prompted to input a series of numbers separated by spaces. The program then employs a recursive algorithm to compute the sum of the provided numbers, and subsequently, calculates and displays their average. In the event of invalid input, the program notifies the user and prompts for a valid list of numbers. This implementation is designed for simplicity and educational purposes, offering a basic example of recursive function usage in Swift.\n\nSample Input:\n    Enter a list of numbers separated by spaces:\n    5.0 10.0 15.0 20.0\n\nSample Output:\n    Numbers: [5.0, 10.0, 15.0, 20.0]\n    Average: 12.5\n\n*/\n\n\n\nfunc calculateAverage(numbers: [Double]) -> Double {\n    return sumOfNumbers(numbers: numbers) / Double(numbers.count)\n}\n\nfunc sumOfNumbers(numbers: [Double]) -> Double {\n    guard let firstNumber = numbers.first else {\n        return 0\n    }\n    let remainingNumbers = Array(numbers.dropFirst())\n    return firstNumber + sumOfNumbers(numbers: remainingNumbers)\n}\n\n// Get input from the user\nprint(\"Enter a list of numbers separated by spaces:\")\nif let input = readLine(), !input.isEmpty {\n    let numbers = input.split(separator: \" \").compactMap { Double($0) }\n    \n    if !numbers.isEmpty {\n        let average = calculateAverage(numbers: numbers)\n        print(\"Numbers: \\(numbers)\")\n        print(\"Average: \\(average)\")\n    } else {\n        print(\"Invalid input. Please enter valid numbers.\")\n    }\n} else {\n    print(\"Invalid input. Please enter valid numbers.\")\n}\n",
  "typescript": "function average_of_numbers(arr: number[]): number {\n  if (arr.length === 1) {\n    return arr[0];\n  }\n  const innerArray: number[] = arr.slice(1);\n  return (\n    (arr[0] + average_of_numbers(innerArray) * innerArray.length) / arr.length\n  );\n}\n\nconst array = [1, 2, 3, 4, 5];\nconsole.log(average_of_numbers(array));\n",
  "description": "\n## Write a program to find average of numbers by recursion\n\nAverage of numbers is the sum of all numbers divided by the number of numbers. For example, the average of 1, 2, 3, 4, 5 is 3. The average of 1, 2, 3, 4, 5, 6 is 3.5.\n\nAverage of numbers can be calculated by recursion. The average of numbers is the sum of the first number and the average of the rest of the numbers. The average of the rest of the numbers is the sum of the second number and the average of the rest of the numbers. The average of the rest of the numbers is the sum of the third number and the average of the rest of the numbers. And so on.\n\n```txt\nInput  : 1 2 3 4 5\nOutput : 3\n```\n\n---\n",
  "trackId": 4611,
  "lastUpdated": "2024-06-16T13:55:26Z",
  "contributors": [
    "harshraj8843",
    "charan-hash",
    "srini696",
    "pradeepch2107",
    "Shubham-2110",
    "psmanam",
    "akshithagunupati",
    "sahanasurapureddy",
    "1movemate",
    "AdityaNarayanPradhan",
    "anandfresh",
    "UrielOfir",
    "dineshlalam15",
    "tirumalarakesh",
    "mrajesh09",
    "vagesh-verma",
    "swapn652"
  ],
  "julia": "function average_recursive(numbers, n)\n    if n == 0\n        return 0.0\n    else\n        return (numbers[n] + (n - 1) * average_recursive(numbers, n - 1)) / n\n    end\nend\n\nfunction main()\n    println(\"Enter numbers separated by spaces:\")\n    input = readline()\n    numbers = [parse(Float64, num) for num in split(input)]\n    avg = average_recursive(numbers, length(numbers))\n    println(\"Average:\", avg)\nend\n\nmain()\n",
  "scala": "//Write a Scala program to find average of numbers by recursion \n\nobject AverageCalculator {\n  def main(args: Array[String]): Unit = {\n    println(\"Enter numbers separated by space:\")\n    val input = scala.io.StdIn.readLine()\n    val numbers = input.split(\" \").map(_.toInt).toList\n\n    if (numbers.nonEmpty) {\n      val average = calculateAverage(numbers)\n      println(s\"Average: $average\")\n    } else {\n      println(\"Please enter at least one number.\")\n    }\n  }\n\n  def calculateAverage(numbers: List[Int]): Double = {\n    def helper(list: List[Int], sum: Int, count: Int): Double = {\n      list match {\n        case Nil => sum.toDouble / count\n        case head :: tail => helper(tail, sum + head, count + 1)\n      }\n    }\n    helper(numbers, 0, 0)\n  }\n}",
  "dart": "import 'dart:io';\n\ndouble findAverage(List<int> numbers, int index, double sum) {\n  // Base case: when index reaches the end of the list\n  if (index == numbers.length) {\n    // Return the average\n    return sum / numbers.length;\n  } else {\n    // Recursive case: add current number to sum and move to the next index\n    return findAverage(numbers, index + 1, sum + numbers[index]);\n  }\n}\n\nvoid main() {\n  print(\"Enter the numbers separated by space:\");\n  String input = stdin.readLineSync()!;\n  List<String> numberStrings = input.split(' ');\n  \n  // Convert input strings to integers\n  List<int> numbers = numberStrings.map(int.parse).toList();\n  \n  // Calculate the average using recursion\n  double average = findAverage(numbers, 0, 0);\n  \n  print(\"Average of the numbers: $average\");\n}\n",
  "php": "<?php\n\nfunction averageRecursion($a, $i, $n)\n{\n    if ($i == $n - 1)\n        return $a[$i];\n\n    if ($i == 0)\n        return (($a[$i] + averageRecursion($a, $i + 1, $n)) / $n);\n \n    return ($a[$i] + averageRecursion($a, $i + 1, $n));\n}\n\n \n$arr = [1,2,3,4,5];\n$n = sizeof($arr);\n \necho averageRecursion($arr, 0, $n);\n\n?>\n \n",
  "perl": "#!/usr/bin/perl\r\n\r\nuse strict;\r\nuse warnings;\r\n\r\nsub calc_average {\r\n    my ($numbers_ref, $start_index, $end_index) = @_;\r\n    if ($start_index > $end_index) {\r\n        return 0;\r\n    }\r\n    \r\n    elsif ($start_index == $end_index) {\r\n        return $numbers_ref->[$start_index];\r\n    }\r\n   \r\n    else {\r\n        my $mid_index = int(($start_index + $end_index) / 2);\r\n        my $left_average = calc_average($numbers_ref, $start_index, $mid_index);\r\n        my $right_average = calc_average($numbers_ref, $mid_index+1, $end_index);\r\n        my $total_sum = $left_average + $right_average;\r\n        my $average_value = int($total_sum / 2);\r\n        return $average_value;\r\n    }\r\n}\r\n\r\nmy @numbers = (1, 2, 3, 4, 5);\r\nmy $average_value = calc_average(\\@numbers, 0, $#numbers);\r\nprint \"The average value is $average_value\\n\";\r\n",
  "python": "def avgRec(a, i, n):\n    if i == n - 1:\n        return a[i]\n\n    if i == 0:\n        return (a[i] + avgRec(a, i + 1, n)) / n\n\n    return a[i] + avgRec(a, i + 1, n)\n\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(avgRec(arr, 0, n))\n",
  "r": "calculate_average <- function(numbers, n) {\n  if (n == 1) {\n    return(numbers[1])\n  } else {\n    return((numbers[n] + (n - 1) * calculate_average(numbers, n - 1)) / n)\n  }\n}\n\nnumbers <- c(1, 2, 3, 4, 5)\nresult <- calculate_average(numbers, length(numbers))\n\ncat(\"Average of numbers is:\", result, \"\\n\")\n",
  "rust": "use std::io;\nuse std::str::FromStr;\n\nfn average_recursive(numbers: &[i32], sum: f64, count: usize) -> f64 {\n    match numbers {\n        [] => sum / count as f64,\n        [first, rest @ ..] => {\n            let new_sum = sum + *first as f64;\n            let new_count = count + 1;\n            average_recursive(rest, new_sum, new_count)\n        }\n    }\n}\n\nfn main() {\n    println!(\"Enter numbers separated by space:\");\n\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n\n    let numbers: Vec<i32> = input\n        .split_whitespace()\n        .filter_map(|num| i32::from_str(num).ok())\n        .collect();\n\n    if numbers.is_empty() {\n        println!(\"No numbers entered.\");\n        return;\n    }\n\n    let avg = average_recursive(&numbers, 0.0, 0);\n    println!(\"The average is {}\", avg);\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}