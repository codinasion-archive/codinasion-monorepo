{
  "slug": "convert-meters-to-miles",
  "title": "Convert Meters To Miles",
  "c": "#include <stdio.h>\n#include <math.h>\n\nint main()\n{\n    // Declare variables\n    int meter;\n    double miles;\n\n    printf(\"Enter distance in meters : \");\n    scanf(\"%d\", &meter);\n\n    // Convert meter to miles\n    miles = meter * 0.00062137119;\n\n    // Using Round off  - nearest integer value\n    int result = round(miles);\n\n    // Distance in miles\n    printf(\"\\nDistance in miles : %d\\n\", result);\n\n    return 0;\n}\n",
  "c-plus-plus": "#include <iostream>  // cin , cout\n\nint ConvertMetersToMiles(float meters);\n\nint main()\n{\n    float a = 0;\n\n    std::cout << \"please enter a value:\" << std::endl;\n\n    std::cin >> a;\n\n    std::cout << ConvertMetersToMiles(a);\n\n    return 0;\n}\n\nint ConvertMetersToMiles(float meters)\n{\n    return meters / 1609;\n}\n",
  "c-sharp": "using System;\n\nclass MainClass {\n    public static void Main (string[] args) {\n    Console.WriteLine (\"Please enter the meter value :\");\n    double meter = Convert.ToDouble(Console.ReadLine());\n    double miles =  Math.Round(meter/1609, 2);\n    Console.WriteLine(meter+\" meter is \"+ miles+\" miles\");\n  }\n}\n",
  "f-sharp": "let meterToMiles meter : float =\n  meter / 1609.00\n\nlet miles =  meterToMiles 8046.72\n\nprintfn \"Equivalent miles : %f\" miles\n",
  "java": "import java.util.Scanner;\n\npublic class ConvertMetersToMiles {\n\tpublic static void main(String[] args) throws Exception {\n\t\tSystem.out.print(\"input   : \");\n\t\tScanner sc = new Scanner(System.in);\n\t\tDouble meter = sc.nextDouble();\n\t\tsc.close();\n\t\tSystem.out.println(\"ouput   : \" + Math.round(meter / 1609));\n\t}\n}",
  "javascript": "// program to convert meters to miles (1 mile = 1609.344 meters)\n\nfunction convertMetersToMiles(meters) {\n  return meters / 1609.344;\n}\n\n// const userInput=prompt('Input: ')\n// alert(convertMetersToMiles(userInput))\n\nconst userInput = 8046.72;\nconsole.log(\"input  : \" + userInput);\nconsole.log(\"output : \" + convertMetersToMiles(userInput));\n",
  "kotlin": "fun main() {\n    print(\"Enter Meters : \")\n    println()\n    var input = readLine()\n\n    println(\"$input meters = \" + ConvertMetersToMiles(input!!.toDouble()) + \" miles\")\n\n}\n\nprivate fun ConvertMetersToMiles(meters: Double): Double {\n    var miles = meters / 1609.344\n\n    return miles\n}\n",
  "ruby": "def convertMetersToMiles(meters)\n  meters / 1609.344\nend\n\ndef strip_trailing_zero(n)\n  n.to_s.sub(/\\.?0+$/, '')\nend\n\nprint 'Input  : '\nmeters = gets.chomp.to_f\nmiles = convertMetersToMiles(meters)\nputs \"Output : #{strip_trailing_zero(miles)}\"\n",
  "swift": "import Swift\nimport Foundation\n\nprint(\"Enter meters: \")\nvar meters = Double(readLine()!)!\nprint(\"Miles: \", meters / 1609.34)\n",
  "typescript": "export const convertMetersToMiles = (meters: number): number =>\n  meters / 1609.344;\n\nconst meters = 8046.72;\nconsole.log(\"Input  : \" + meters);\nconsole.log(\"Output : \" + convertMetersToMiles(meters));\n",
  "description": "\n## Write a program to convert meters to miles\n\n1 mile = 1609 meters\n\n```txt\nInput  : 8046.72\nOutput : 5\n```\n\n---\n",
  "trackId": 277,
  "lastUpdated": "2023-11-28T19:06:11Z",
  "contributors": [
    "Shaileshalluri",
    "harshraj8843",
    "RiteshK-611",
    "anandfresh",
    "esivakumar26",
    "Osher160",
    "rksp25",
    "joao-vitor-souza",
    "kangjung",
    "sudiptog81",
    "chinmaykumbhare",
    "Anushka-codergirl",
    "MadhuS-1605",
    "MusabMuhie",
    "NidishM",
    "madil89"
  ],
  "julia": "println(\"Enter value in meters: \")\nmeters = readline()\nmeters = parse(Float64, meters)\nmiles = round((meters / 1609); digits = 2)\nprintln(meters, \" meters equals \", miles, \" miles\")",
  "scala": "import scala.io.StdIn._;\n\nobject metresToMiles {\n  def main(args:Array[String]):Unit={\n    println(\"Enter the metre value : \");\n    var metres = readLine();\n    var miles = metres.toDouble / 1609;\n    println(metres+\" metres is \"+miles+\" miles\");\n  }\n}\n",
  "dart": "import 'dart:io';\nvoid main(){\n  print(\"Enter the meters :\");\n  var meter = double.parse(stdin.readLineSync());\n  var miles = meter/1609;\n  print('Equivalent miles : $miles');\n}\n",
  "go": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar meter int\n\tfmt.Println(\"Enter meter(s):\")\n  fmt.Scan(&meter)\n  fmt.Println(\"Mile(s) for given meter is:\", (float32(meter) / 1609))\n}\n",
  "php": "<?php\n\nfscanf(STDIN, \"%f\", $meters);\n$miles = $meters / 1609;\n\necho round($miles, 2) . \"\\n\";\n\n?>",
  "perl": "#!/usr/bin/perl\nuse warnings;\nuse strict;\nprint \"Enter the metre : \";\nmy $metre = <STDIN>;\nmy $miles = $metre/1609;\nprint \"Equivalent Miles : \".$miles, \"\\n\";\n",
  "python": "# --------- Program to convert meters to miles ---------#\n\n\n# Covert meters to miles (1 mile = 1609 meters)\ndef metersToMiles(meter_value):\n    return int(meter_value // 1609)\n\n\n# User input\ninput_in_meters = float(input(\"Input  : \"))\noutput_in_miles = metersToMiles(input_in_meters)\nprint(\"Output :\", output_in_miles)\n",
  "r": "convertMetersToMiles <- function(meters) {\n  miles <- meters / 1609\n  return(miles)\n}\n\n# Example usage\ninputMeters <- 8046.72\noutputMiles <- convertMetersToMiles(inputMeters)\n\ncat(\"Input:\", inputMeters, \"meters\\n\")\ncat(\"Output:\", outputMiles, \"miles\\n\")\n\n",
  "rust": "use std::io;\nuse std::process;\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Please enter meters: \");\n    io::stdin().read_line(&mut input).unwrap();\n    let meters = convert_str_to_float(input);\n    let miles = convert_to_miles(meters);\n    println!(\"Miles: {}\", miles);\n}\n\nfn convert_str_to_float(input: String) -> f32 {\n    input.trim().parse::<f32>().unwrap_or_else(|_| {\n        eprintln!(\"- Please enter a valid input!\");\n        drop(input);\n        process::exit(1);\n    })\n}\n\nfn convert_to_miles(meters: f32) -> f32 {\n    meters * 0.0006213712\n}",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}