{
  "slug": "find-the-maximum-sum-of-a-contiguous-subarray",
  "title": "Find The Maximum Sum Of A Contiguous Subarray",
  "c": "#include <stdio.h>\n\nint maxSubArray(int arr[], int n)\n{\n    int max_so_far = arr[0];\n    int max_ending_here = arr[0];\n    int i;\n\n    for (i = 1; i < n; i++)\n    {\n        max_ending_here = max(arr[i], max_ending_here + arr[i]);\n        max_so_far = max(max_so_far, max_ending_here);\n    }\n    return max_so_far;\n}\n\nint main()\n{\n    int arr[] = {-2, -3, 4, -1, -2, 1, 5, -3};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    int max_sum = maxSubArray(arr, n);\n    printf(\"Maximum subarray sum is %d\", max_sum);\n    return 0;\n}\n",
  "c-plus-plus": "#include <iostream>\n#include <limits.h>\n\nint main() {\n  const int maxArraySize = 100;\n  int arr[maxArraySize];\n  int n = 0;\n\n  std::cout << \"Enter the size of array: \";\n  std::cin >> n;\n\n  if(n > maxArraySize) {\n    std::cout << \"Error: Input array size cannot be greater than \" << maxArraySize << std::endl;\n    return 1;\n  }\n\n  std::cout << \"Enter the input values:\" << std::endl;\n\n  for(int i = 0; i < n; i++) {\n    std::cin >> arr[i];\n  }\n\n  long long int sum = 0;\n  long long int maxSum = LLONG_MIN;\n\n  for(int i = 0; i < n; i++) {\n    sum = 0;\n    for(int j = i; j < n; j++) {\n      sum += arr[j];\n      maxSum = std::max(maxSum, sum);\n    }\n  }\n\n  \n  std::cout << \"Maximum sum of contiguous elements of given array is: \" << maxSum << std::endl;\n\n  return 0;\n}",
  "c-sharp": "using System;\n \nclass Contiguous\n{\n    static int maxSubArraySum(int []a)\n    {\n        int size = a.Length;\n        int max_so_far = int.MinValue,\n            max_ending_here = 0;\n \n        for (int i = 0; i < size; i++)\n        {\n            max_ending_here = max_ending_here + a[i];\n             \n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n             \n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n         \n        return max_so_far;\n    }\n     \n    public static void Main ()\n    {\n        int [] a = {-2, -3, 4, -1, -2, 1, 5, -3};\n        Console.Write(\"Maximum contiguous sum is :\" +maxSubArraySum(a));\n    }\n \n}\n",
  "java": "public class FindTheMaximumSumOfAContiguousSubarray {\n    public static void main(String[] args) {\n        int[] numberArray = {-2, -3, 4, -1, -2, 1, 5, -3};\n        System.out.println(\"Maximum contiguous sum is \"\n          + maxSubArraySum(numberArray));\n      }\n    \n      static int maxSubArraySum(int numberArray[]) {\n        int size = numberArray.length;\n        int maximum_so_far = Integer.MIN_VALUE, maximum_ending_here = 0;\n    \n        for (int i = 0; i < size; i++) {\n          maximum_ending_here = maximum_ending_here + numberArray[i];\n          if (maximum_so_far < maximum_ending_here)\n            maximum_so_far = maximum_ending_here;\n          if (maximum_ending_here < 0)\n            maximum_ending_here = 0;\n        }\n        return maximum_so_far;\n      }\n    \n}\n",
  "javascript": "function getTheHighstSumInArr(arr) {\n  if (arr.length === 1) return arr[0];\n\n  const arrToWork = [...new Set(arr)]; // Remove duplicates\n  const arrToSum = arrToWork.slice(-4); // Select the last 4 elements\n  const maxSum = arrToSum.reduce((a, b) => a + b);\n\n  return maxSum;\n}\n",
  "description": "\n## Write a program to find the maximum sum of a contiguous subarray\n\nMaximum subarray problem is the task of finding the contiguous subarray within a one-dimensional array of numbers which has the largest sum. For example, for the sequence of values `−2, 1, −3, 4, −1, 2, 1, −5, 4;` the contiguous subarray with the largest sum is `4, −1, 2, 1,` with sum `6`.\n\n```txt\nInput  : [-2, -3, 4, -1, -2, 1, 5, -3]\nOutput : 7\n```\n\n---\n",
  "trackId": 4166,
  "lastUpdated": "2024-06-16T13:55:26Z",
  "contributors": [
    "harshraj8843",
    "pramod-karkhani",
    "Parvezkhan0",
    "hona9",
    "ApurvaR1",
    "apurvagandhi",
    "Tushar12222",
    "Ishay1997",
    "anandfresh",
    "cacti23",
    "manishankardurai",
    "joao-vitor-souza",
    "Dhana-s",
    "BiscuitCandy"
  ],
  "dart": "import 'dart:math';\nvoid maxsumSubarray(List<int> arr){\n  int sum = 0;\n  int maxSum = 0;\n  for(var i = 0 ; i < arr.length ; i++){\n    sum = max(sum + arr[i] , arr[i]);\n    maxSum = max(sum , maxSum);\n  }\n  print(maxSum);\n}\n\nvoid main() {\n  maxsumSubarray([1 , -1 , -2 , 3 , 5 ,1]);\n}",
  "go": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc maxSubarraySum(arr []int) int {\n\tmaxSoFar := 0\n\tmaxEndingHere := 0\n\tfor _, num := range arr {\n\t\tmaxEndingHere = maxEndingHere + num\n\t\tif maxEndingHere < 0 {\n\t\t\tmaxEndingHere = 0\n\t\t} else if maxSoFar < maxEndingHere {\n\t\t\tmaxSoFar = maxEndingHere\n\t\t}\n\t}\n\treturn maxSoFar\n}\n\nfunc main() {\n\tarr := []int{-2, -3, 4, -1, -2, 1, 5, -3}\n\tfmt.Println(\"Maximum sum of a contiguous subarray:\", maxSubarraySum(arr))\n}\n",
  "perl": "sub maxSubArray {\n    my @arr = @_;\n    my $n = scalar(@arr);\n    my $max_so_far = $arr[0];\n    my $max_ending_here = $arr[0];\n\n    for (my $i = 1; $i < $n; $i++) {\n        $max_ending_here = max($arr[$i], $max_ending_here + $arr[$i]);\n        $max_so_far = max($max_so_far, $max_ending_here);\n    }\n\n    return $max_so_far;\n}\n\n# Helper function to find the maximum of two numbers\nsub max {\n    my ($a, $b) = @_;\n    return ($a > $b) ? $a : $b;\n}\n\n# Main program\nmy @arr = (-2, -3, 4, -1, -2, 1, 5, -3);\nmy $n = scalar(@arr);\nmy $max_sum = maxSubArray(@arr);\nprint \"Maximum subarray sum is $max_sum\\n\";\n",
  "python": "arr = list(map(int, input().split()))\n\nsm = 0\nmx = 0\n\nfor i in range(len(arr)):\n    sm = max(sm + arr[i], arr[i])\n    mx = max(mx, sm)\n\nprint(mx)\n",
  "r": "findMaxSubarraySum <- function(arr) {\n  max_so_far <- arr[1]\n  max_ending_here <- arr[1]\n  \n  for (i in 2:length(arr)) {\n    max_ending_here <- max(arr[i], max_ending_here + arr[i])\n    max_so_far <- max(max_so_far, max_ending_here)\n  }\n  \n  return(max_so_far)\n}\n\n# Test the function with the provided input\ninput_array <- c(-2, -3, 4, -1, -2, 1, 5, -3)\nmax_sum <- findMaxSubarraySum(input_array)\nprint(max_sum)\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "dart",
    "go",
    "perl",
    "python",
    "r"
  ]
}