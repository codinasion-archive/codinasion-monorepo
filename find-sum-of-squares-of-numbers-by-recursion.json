{
  "slug": "find-sum-of-squares-of-numbers-by-recursion",
  "title": "Find Sum Of Squares Of Numbers By Recursion",
  "c": "#include <stdio.h>\n\nlong long int recursiveSqSum(int *arr, int index){\n    if(index<0) return 0;\n    long long int val = recursiveSqSum(arr, index-1);\n    return val + (arr[index]*arr[index]);\n}\n\nint main() {\n    int input[] = {1,2,3,4,5};\n    long long int size = sizeof(input)/sizeof(input[0]);\n    printf(\"%lld\",recursiveSqSum(input, size-1));\n    return 0;\n}",
  "c-plus-plus": "#include <iostream> // cout,cin \n#include <vector> // vector \n\n//wrapper for FindSumOfSquaresRec\nint FindSumOfSquares(std::vector<int>& nums);\n// Find a square of numbers by recursion\nint FindSumOfSquaresRec(std::vector<int>& nums,size_t idx);\n\nint main()\n{\n    size_t size = 0;\n\n    std::cout << \"please enter the size of the array:\" << std::endl;\n    std::cin >> size;\n\n    std::cout << \"please enter elements of the array in ascending order:\" << std::endl;\n\n    int tmp = 0;\n    std::vector<int> nums;\n    \n    for(size_t i = 0; i < size; ++i)\n    {\n        std::cin >> tmp;\n        nums.push_back(tmp);\n    }\n\n    std::cout << FindSumOfSquares(nums) << std::endl;\n\n    return 0;\n}\n\nint FindSumOfSquares(std::vector<int>& nums)\n{\n    return FindSumOfSquaresRec(nums,nums.size() - 1);\n}\n\n\nint FindSumOfSquaresRec(std::vector<int>& nums,size_t idx)\n{\n    if(idx == 0)\n    {\n        return nums[idx] * nums[idx];\n    }\n\n    int square_of = nums[idx] * nums[idx];\n\n    return square_of + FindSumOfSquaresRec(nums,idx - 1);\n}",
  "c-sharp": "using System;\n\nclass sumOfSquares {\n  static int Sum(int n) { \n    if(n == 1)\n      return 1;\n    else\n      return (n*n + Sum(n-1));\n  } \n\n  static void Main(string[] args) {\n    string n;int res;\n    Console.WriteLine(\"Enter a Number: \");\n    n = Console.ReadLine();\n    res=Convert.ToInt32(n);\n    Console.WriteLine(\"Sum of squares of first \"+res+\" natural numbers: \" + Sum(res));\n  }\n}\n",
  "java": "import java.util.Arrays;\n\nclass FindSumOfSquaresOfNumbersByRecursion {\n    public static void main(String[] args) {\n        String input = \"1 2 3 4 5\";\n        int[] arr = Arrays.stream(input.split(\" \")).mapToInt(Integer::parseInt).toArray();\n        int n = arr.length;\n        System.out.println(\"Result : \" + sumOfSquares(arr, n)); // 55\n    }\n\n    private static int sumOfSquares(int[] arr, int n) {\n        if (n == 0) {\n            return 0;\n        }\n        return (arr[n - 1] * arr[n - 1]) + sumOfSquares(arr, n - 1);\n    }\n}",
  "javascript": "function FindSumOfSquaresOfNumbersByRecursion(number) {\n  if (number.split(\" \").length <= 1) {\n    return Number(number.split(\" \", 1)) ** 2;\n  }\n  return (\n    Number(number.split(\" \", 1)) ** 2 +\n    FindSumOfSquaresOfNumbersByRecursion(\n      number.substring(number.indexOf(\" \") + 1, number.length),\n    )\n  );\n}\n\nlet number = \"1 2 3 4 5\";\nconsole.log(\"Input  :\", number);\nconsole.log(\"Output :\", FindSumOfSquaresOfNumbersByRecursion(number));\n",
  "kotlin": "class FindSumOfSquaresOfNumbersByRecursion {\n    fun sumOfSquares(nums: IntArray): Int {\n        return recursiveSum(nums, 0)\n    }\n\n    private fun recursiveSum(nums: IntArray, index: Int): Int {\n        if (index > nums.lastIndex) return 0\n        return nums[index] * nums[index] + recursiveSum(nums, index + 1)\n    }\n\n}",
  "ruby": "# frozen_string_literal: true\n\nputs 'This program calculates the sum of squares of numbers.'\nputs 'Enter the numbers separated by spaces'\n\ninput_array = gets.chomp.split(' ').map(&:to_i)\n\nputs \"Sum of squares is #{input_array.sum { |num| num * num }}\"\n",
  "swift": "func sumOfSquares(_ numbers: [Int], _ index: Int = 0) -> Int {\n    // Base case: when index reaches the end of the array\n    if index >= numbers.count {\n        return 0\n    }\n    // Recursive case: square the current number and add to the sum of squares of the rest\n    return numbers[index] * numbers[index] + sumOfSquares(numbers, index + 1)\n}\n\n// Example usage\nlet numbers = [1, 2, 3, 4, 5]\nlet result = sumOfSquares(numbers)\nprint(\"Output: \\(result)\")\n",
  "typescript": "function sum_sq(array: any) {\n  let sum = 0,\n    i = array.length;\n  while (i--) sum += Math.pow(array[i], 2);\n  return sum;\n}\n\nconsole.log(sum_sq([0, 1, 2, 3, 4, 5]));\n",
  "description": "\n## Write a program to find sum of squares of numbers by recursion\n\n```txt\nInput  : 1 2 3 4 5\nOutput : 55\n```\n\n---\n",
  "trackId": 481,
  "lastUpdated": "2024-05-03T09:42:21Z",
  "contributors": [
    "bulutg",
    "harshraj8843",
    "rakibul-islam-raju",
    "sancoLgates",
    "patel-aum",
    "anandfresh",
    "Osher160",
    "joao-vitor-souza",
    "Ipankaj07",
    "ridsuteri",
    "Ritesh-Dabral",
    "kangjung",
    "UsmanFani",
    "AthiraKadampatta"
  ],
  "scala": "object SumOfSquares {\n  def findSumOfSquaresByRecursion(input: String): Int = {\n    val numList = input.split(\" \").map(_.toInt)\n    \n    if (numList.length <= 1) {\n      math.pow(numList.head, 2).toInt\n    } else {\n      val headSquare = math.pow(numList.head, 2).toInt\n      val restOfNumbers = numList.tail.mkString(\" \")\n      headSquare + findSumOfSquaresByRecursion(restOfNumbers)\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val number = \"1 2 3 4 5\"\n    val result = findSumOfSquaresByRecursion(number)\n\n    println(s\"Input  : $number\")\n    println(s\"Output : $result\")\n  }\n}",
  "go": "package main\n\nimport \"fmt\"\n\nfunc sumSquareRecursive(arr []int, index int) int {\n\tif index < 0 {\n\t\treturn 0\n\t}\n\treturn arr[index] * arr[index] + sumSquareRecursive(arr, index - 1)\n}\n\nfunc main() {\n\tinput := []int{1, 2, 3, 4, 5}\n\tfmt.Println(sumSquareRecursive(input, len(input) - 1))\n}\n",
  "php": "<?php\n\nfunction recursiveSum($numbers)\n{\n    if (count($numbers) == 1) {\n        return pow((int) $numbers[0], 2);\n    } else {\n        return pow($numbers[0], 2) + recursiveSum(array_slice($numbers, 1));\n    }\n}\n\n\n$numbers = explode(\" \", readline());\n\necho recursiveSum($numbers) . \"\\n\";\n\n?>",
  "python": "x = input(\"Enter the integers in string form : \").replace(\" \", \"\")\r\n\r\n\r\ndef squarer(x):\r\n    if int(x) < 10:\r\n        return x**2\r\n    first_digit = int(str(x)[0])\r\n    return first_digit**2 + squarer(int(str(x)[1:]))\r\n\r\n\r\nprint(squarer(x))\r\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "scala",
    "go",
    "php",
    "python"
  ]
}