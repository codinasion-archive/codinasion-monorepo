{
  "slug": "find-the-rank-of-a-matrix",
  "title": "Find The Rank Of A Matrix",
  "c": "#include <stdio.h>\r\n\r\n#define ROWS 3\r\n#define COLS 3\r\n\r\nint rank(int matrix[ROWS][COLS]) {\r\n    int i, j, k, r;\r\n    int row, col;\r\n    int pivot_row, pivot_col;\r\n    int temp, multiplier;\r\n    int rank = 0;\r\n\r\n    // Apply Gaussian elimination to the matrix\r\n    for (r = 0; r < ROWS && r < COLS; r++) {\r\n        // Find pivot row\r\n        pivot_row = r;\r\n        for (i = r + 1; i < ROWS; i++) {\r\n            if (matrix[i][r] > matrix[pivot_row][r]) {\r\n                pivot_row = i;\r\n            }\r\n        }\r\n\r\n        // Swap rows\r\n        for (j = 0; j < COLS; j++) {\r\n            temp = matrix[r][j];\r\n            matrix[r][j] = matrix[pivot_row][j];\r\n            matrix[pivot_row][j] = temp;\r\n        }\r\n\r\n        // Reduce rows\r\n        if (matrix[r][r] != 0) {\r\n            for (i = r + 1; i < ROWS; i++) {\r\n                multiplier = matrix[i][r] / matrix[r][r];\r\n                for (j = r; j < COLS; j++) {\r\n                    matrix[i][j] = matrix[i][j] - multiplier * matrix[r][j];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Count non-zero rows in row echelon form\r\n    for (i = 0; i < ROWS; i++) {\r\n        row = 0;\r\n        for (j = 0; j < COLS; j++) {\r\n            if (matrix[i][j] != 0) {\r\n                row = 1;\r\n                break;\r\n            }\r\n        }\r\n        if (row == 1) {\r\n            rank++;\r\n        }\r\n    }\r\n\r\n    return rank;\r\n}\r\n\r\nint main() {\r\n    int matrix[ROWS][COLS] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\r\n    int rank_of_matrix;\r\n\r\n    rank_of_matrix = rank(matrix);\r\n    printf(\"Rank of matrix = %d\\n\", rank_of_matrix);\r\n\r\n    return 0;\r\n}",
  "c-plus-plus": "#include <stdio.h>\n#include <iostream>\n\nusing namespace std;\n\n#define ROWS 3\n#define COLS 3\n\nint Rank(int matrix[ROWS][COLS])\n{\n    int pivot = 0;\n    int rank = 0;\n\n    // loop over rows\n    for(int i = 0; i < 3; i++)\n    {\n        // check if pivot element is zero\n        if(matrix[i][pivot] == 0)\n        {\n            // swap rows to get non-zero pivot element\n            for(int j = i + 1; j < 3; j++)\n            {\n                if(matrix[j][pivot] != 0)\n                {\n                    // swap rows\n                    for(int k = 0; k < 3; k++)\n                    {\n                        int temp = matrix[i][k];\n                        matrix[i][k] = matrix[j][k];\n                        matrix[j][k] = temp;\n                    }\n                    break;\n                }\n            }\n        }\n\n        // check if pivot element is non-zero\n        if(matrix[i][pivot] != 0)\n        {\n            // increment rank and reduce rows\n            rank++;\n            for(int j = i + 1; j < 3; j++)\n            {\n                int factor = matrix[j][pivot] / matrix[i][pivot];\n                for(int k = pivot; k < 3; k++)\n                {\n                    matrix[j][k] = matrix[j][k] - factor * matrix[i][k];\n                }\n            }\n        }\n\n        // increment pivot index\n        pivot++;\n    }\n\n    return rank;\n}\n\nint main()\n{\n    int matrix[ROWS][COLS] = {{3,2,1},{6,4,2},{7,8,9}};\n    int RANK_OF_MATRIX;\n\n    RANK_OF_MATRIX = Rank(matrix);\n    cout << \"Rank of Matrix: \" << RANK_OF_MATRIX << endl;\n    return 0;\n}",
  "c-sharp": "using System;\nclass Matrix {\n      \n    static  int R = 3;\n    static  int C = 3;\n\n    static void swap(int [,]mat,int row1, int row2, int col)\n    {\n        for (int i = 0; i < col; i++)\n        {\n            int temp = mat[row1,i];\n            mat[row1,i] = mat[row2,i];\n            mat[row2,i] = temp;\n        }\n    }\n      \n    static void display(int [,]mat,int row, int col)\n    {\n        for (int i = 0; i < row; i++)\n        {\n            for (int j = 0; j < col; j++)\n                Console.Write(\" \"+ mat[i,j]);\n            Console.Write(\"\\n\");\n        }\n    }\n      \n    static int rankOfMatrix(int [,]mat)\n    {\n          \n        int rank = C;\n      \n        for (int row = 0; row < rank; row++)\n        {\n            if (mat[row,row] != 0)\n            {\n                for (int col = 0; col < R; col++)\n                {\n                    if (col != row)\n                    {\n                        double mult =\n                           (double)mat[col,row] /\n                                    mat[row,row];\n                                      \n                        for (int i = 0; i < rank; i++)\n                          \n                            mat[col,i] -= (int) mult\n                                     * mat[row,i];\n                    }\n                }\n            }\n            else\n            {\n                bool reduce = true;\n                for (int i = row + 1; i < R; i++)\n                {\n                    if (mat[i,row] != 0)\n                    {\n                        swap(mat, row, i, rank);\n                        reduce = false;\n                        break ;\n                    }\n                }\n\n                if (reduce)\n                {\n                    rank--;\n                    for (int i = 0; i < R; i ++)\n                        mat[i,row] = mat[i,rank];\n                }\n                row--;\n            }\n\n        }\n          \n        return rank;\n    }\n      \n    public static void Main ()\n    {\n        int [,]mat = {{10, 20, 10},\n                       {-20, -30, 10},\n                       {30, 50, 0}};\n                         \n        Console.Write(\"Rank of the matrix is : \"+ rankOfMatrix(mat));\n    }\n}\n",
  "java": "import java.util.Arrays;\npublic class FindTheRankOfAMatrix {\n    public static void main(String[] args) {\n        int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        System.out.println(matrixRank(matrix));\n    }\n\n    public static int matrixRank(int[][] matrix) {\n        int rows = matrix.length;\n        int cols = matrix[0].length;\n\n        int rank = Math.min(rows, cols);\n\n        for (int i = 0; i < rank; i++) {\n            if (matrix[i][i] != 0) {\n                for (int j = i + 1; j < rows; j++) {\n                    int factor = matrix[j][i] / matrix[i][i];\n                    for (int k = i; k < cols; k++) {\n                        matrix[j][k] -= factor * matrix[i][k];\n                    }\n                }\n            } else {\n                boolean reduce = true;\n                for (int j = i + 1; j < rows; j++) {\n                    if (matrix[j][i] != 0) {\n                        int[] temp = matrix[i];\n                        matrix[i] = matrix[j];\n                        matrix[j] = temp;\n                        reduce = false;\n                        break;\n                    }\n                }\n                if (reduce) {\n                    rank--;\n                    for (int j = 0; j < rows; j++) {\n                        matrix[j][i] = matrix[j][rank];\n                    }\n                }\n                i--;\n            }\n        }\n\n        return rank;\n    }\n}\n\n",
  "javascript": "function getRank(matrix) {\n  let m = matrix.length;\n  let n = matrix[0].length;\n  let rank = Math.min(m, n);\n  let pivot;\n\n  for (let i = 0; i < rank; i++) {\n    pivot = matrix[i][i];\n\n    if ((pivot = 0)) {\n      for (let j = i + 1; j < m; j++) {\n        if (matrix[j][i] != 0) {\n          let temp = matrix[i];\n          matrix[i] = matrix[j];\n          matrix[j] = temp;\n          pivot = matrix[i][i];\n          break;\n        }\n      }\n    }\n\n    if (pivot === 0) {\n      rank--;\n      continue;\n    }\n\n    for (let j = i; j < n; j++) {\n      matrix[i][j] /= pivot;\n    }\n\n    for (let j = 0; j < m; j++) {\n      if (j !== i) {\n        let factor = matrix[j][i];\n        for (let k = i; k < n; k++) {\n          matrix[j][k] -= factor * matrix[i][k];\n        }\n      }\n    }\n  }\n\n  return rank;\n}\n\nconsole.log(\n  getRank([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n  ]),\n);\n",
  "swift": "import Foundation\n\nfunc findRankOfMatrix(_ matrix: [[Double]]) -> Int {\n    var mat = matrix\n    let rowCount = mat.count\n    let colCount = mat[0].count\n    var rank = 0\n\n    for row in 0..<colCount {\n        if row < rowCount {\n            var swapRow = row\n            while mat[swapRow][row] == 0 {\n                swapRow += 1\n                if swapRow == rowCount {\n                    swapRow = row\n                    break\n                }\n            }\n            mat.swapAt(row, swapRow)\n\n            if mat[row][row] != 0 {\n                for i in (row+1)..<rowCount {\n                    let factor = mat[i][row] / mat[row][row]\n                    for j in row..<colCount {\n                        mat[i][j] -= factor * mat[row][j]\n                    }\n                }\n                rank += 1\n            }\n        }\n    }\n\n    return rank\n}\n\n// Example usage\nlet matrix = [\n    [1.0, 2.0, 3.0],\n    [4.0, 5.0, 6.0],\n    [7.0, 8.0, 9.0]\n]\n\nlet rank = findRankOfMatrix(matrix)\nprint(\"Rank of the matrix: \\(rank)\")\n",
  "typescript": "function matrixRank(matrix: number[][]): number {\n  const numRows = matrix.length;\n  const numCols = matrix[0].length;\n  let rank = Math.min(numRows, numCols);\n\n  for (let row = 0; row < rank; row++) {\n    if (matrix[row][row] !== 0) {\n      for (let col = 0; col < numRows; col++) {\n        if (col !== row) {\n          const multiplier = matrix[col][row] / matrix[row][row];\n          for (let i = row; i < numCols; i++) {\n            matrix[col][i] -= multiplier * matrix[row][i];\n          }\n        }\n      }\n    } else {\n      let reduce = true;\n      for (let i = row + 1; i < numRows; i++) {\n        if (matrix[i][row] !== 0) {\n          [matrix[row], matrix[i]] = [matrix[i], matrix[row]];\n          reduce = false;\n          break;\n        }\n      }\n      if (reduce) {\n        rank--;\n        for (let i = 0; i < numRows; i++) {\n          matrix[i][row] = matrix[i][rank];\n        }\n      }\n      row--;\n    }\n  }\n\n  return rank;\n}\n\n// Example usage\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nconsole.log(matrixRank(matrix)); // Output: 2\n",
  "description": "\n## Write a program to find the rank of a matrix\n\nThe rank of a matrix is the dimension of the vector space generated by its columns. The rank of a matrix is also equal to the dimension of the vector space generated by its rows. The rank of a matrix is also equal to the number of pivots in its reduced row echelon form.\n\n```txt\nInput  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n2\n```\n\n---\n",
  "trackId": 3372,
  "lastUpdated": "2024-04-12T19:54:47Z",
  "contributors": [
    "bulutg",
    "anandfresh",
    "harshraj8843",
    "AshitaSingamsetty",
    "vishalsingh2972",
    "Ishay1997",
    "ddinh0411",
    "yuvalelarat",
    "Petrosdevri",
    "joao-vitor-souza"
  ],
  "julia": "using LinearAlgebra\nA = [1 2 3; 4 5 6; 7 8 9]\nprintln(rank(A))\n",
  "go": "package main\nimport \"fmt\"\n\nfunc findRank(matrix [][]float64) int {\n    rows,cols := len(matrix),len(matrix[0])\n    rank := cols\n      for i := 0; i< rows ; i ++ {\n          for j := i+1; j < cols; j ++ {\n              if i != j {\n                  ratio :=  matrix[j][i]/matrix[i][i]\n                  for k:=i ; k< cols; k++ {\n                      matrix[j][k] -= ratio*matrix[i][k]\n                  }\n              }\n          }\n      }\n      for i := 0; i< rows ; i ++ {\n          if matrix [i][i] == 0 {\n              rank--\n            }\n        } \n    return rank\n}\nfunc main() {\n    matrix := [][] float64 {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}\n    rank := findRank(matrix)\n    fmt.Println(\"Output : \", rank)\n}",
  "php": "<?php\n\n$R = 3;\n$C = 3;\n\nfunction swap(&$mat, $row1, $row2, $col)\n{\n    for ($i = 0; $i < $col; $i++)\n    {\n        $temp = $mat[$row1][$i];\n        $mat[$row1][$i] = $mat[$row2][$i];\n        $mat[$row2][$i] = $temp;\n    }\n}\n\nfunction rankOfMatrix($mat)\n{\n    global $R, $C;\n    $rank = $C;\n\n    for ($row = 0; $row < $rank; $row++)\n    {\n        if ($mat[$row][$row])\n        {\n            for ($col = 0; $col < $R; $col++)\n            {\n                if ($col != $row)\n                {\n                    $mult = $mat[$col][$row] / $mat[$row][$row];\n                    for ($i = 0; $i < $rank; $i++)\n                        $mat[$col][$i] -= $mult * $mat[$row][$i];\n                }\n            }\n        }\n        else\n        {\n            $reduce = true;\n            for ($i = $row + 1; $i < $R; $i++)\n            {\n                if ($mat[$i][$row])\n                {\n                    swap($mat, $row, $i, $rank);\n                    $reduce = false;\n                    break ;\n                }\n            }\n\n            if ($reduce)\n            {\n                $rank--;\n                for ($i = 0; $i < $R; $i++)\n                    $mat[$i][$row] = $mat[$i][$rank];\n            }\n\n            $row--;\n        }\n    }\n    return $rank;\n}\n\nfunction display($mat, $row, $col)\n{\n    for ($i = 0; $i < $row; $i++)\n    {\n        for ($j = 0; $j < $col; $j++)\n            print(\" $mat[$i][$j]\");\n        print(\"\\n\");\n    }\n}\n\n$mat = array(array(1, 2, 3),\n                array(4, 5, 6),\n                array(7, 8, 9));\nprint(\"Rank of the matrix is : \".rankOfMatrix($mat));\n\n?>\n",
  "python": "import numpy as np\n\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nprint(np.linalg.matrix_rank(matrix))  # Output: 2\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "swift",
    "typescript",
    "julia",
    "go",
    "php",
    "python"
  ]
}