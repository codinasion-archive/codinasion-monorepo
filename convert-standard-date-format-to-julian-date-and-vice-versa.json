{
  "slug": "convert-standard-date-format-to-julian-date-and-vice-versa",
  "title": "Convert Standard Date Format To Julian Date And Vice Versa",
  "c": "#include <stdio.h>\r\nint isLeapYear(int year) {\r\n    // A leap year is divisible by 4 but not by 100, or divisible by 400\r\n    return ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0));\r\n}\r\n\r\nint daysInMonth(int month, int year) {\r\n    // Array to store the number of days in each month\r\n    int days[] = {31, 28 + isLeapYear(year), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\r\n    \r\n    return days[month - 1];\r\n}\r\n\r\n// Function to check if the input month is valid (between 1 and 12)\r\nint isMonthValid(int month)\r\n{\r\n    int ret=0;\r\n    // Check if month is between 1 and 12 (inclusive)\r\n    if (month >= 1 && month <= 12) {\r\n        // If so, set ret to 1, indicating the month is valid\r\n        ret = 1;\r\n    }\r\n\r\n    return ret;\r\n}\r\n\r\n// Function to check if the input day is valid for the given month and year\r\nint isDayValid(int day, int month, int year)\r\n{\r\n    int ret = 0;\r\n    // Check if day is greater than or equal to 1 and less than or equal to the number of days in the given month and year\r\n    if(day >= 1 && day <= daysInMonth(month, year)) {\r\n        // If so, set ret to 1, indicating the day is valid\r\n        ret = 1;\r\n    }\r\n\r\n    return ret;\r\n}\r\n\r\n// Function to convert standard date format to Julian date format\r\nint standardToJulian(int day, int month, int year) {\r\n    int julianDate = 0;\r\n    \r\n    // Add days of months before current month\r\n    for(int i = 1; i < month; i++) \r\n    {\r\n        julianDate += daysInMonth(i,year);\r\n    }\r\n    \r\n    // Add current day\r\n    julianDate += day;\r\n    \r\n    // Combine the year and julianDate to get the Julian date format\r\n    return (year * 1000) + julianDate;\r\n}\r\n\r\n// Function to convert Julian date format to standard date format\r\nint julianToStandard(int julianDate, int *day, int *month, int *year) {\r\n    int valid = 1;\r\n    *year = julianDate / 1000;\r\n    int days = julianDate % 1000;\r\n    \r\n   // Check if the number of days exceeds 365\r\n    if (days > 365) {\r\n        valid = 0;\r\n        // If days equals 366, check if it's a leap year\r\n        if (days == 366 && isLeapYear(*year)) {\r\n            // If it's a leap year, mark it as valid\r\n            valid = 1; \r\n        }\r\n    }\r\n\r\n    if(valid) {\r\n        // Calculate month and day from remaining days\r\n        int i = 1;\r\n        while (days > daysInMonth(i,*year)) {\r\n            days -= daysInMonth(i,*year);\r\n            i++;\r\n        }\r\n        *month = i;\r\n        *day = days;\r\n    }\r\n    return valid;\r\n}\r\n\r\nint main() {\r\n    int choice;\r\n    printf(\"Choose conversion option:\\n\");\r\n    printf(\"1. Standard date format to Julian date format\\n\");\r\n    printf(\"2. Julian date format to Standard date format\\n\");\r\n    scanf(\"%d\", &choice);\r\n\r\n    if (choice == 1) {\r\n        int day, month, year;\r\n        printf(\"Enter day, month, and year (in format dd mm yyyy): \");\r\n        scanf(\"%d %d %d\", &day, &month, &year);\r\n        if (isMonthValid(month) && isDayValid(day,month,year)) {\r\n            int julianDate = standardToJulian(day, month, year);\r\n            printf(\"Julian date: %d\\n\", julianDate);\r\n        }\r\n        else{\r\n            printf(\"Invalid date\\n\");\r\n        }\r\n\r\n    } else if (choice == 2) {\r\n        int julianDate, day, month, year, valid;\r\n        printf(\"Enter Julian date: \");\r\n        scanf(\"%d\", &julianDate);\r\n        valid = julianToStandard(julianDate, &day, &month, &year);\r\n        if (valid && isMonthValid(month) && isDayValid(day,month,year)) {\r\n            printf(\"Standard date: %02d-%02d-%d\\n\", day, month, year);\r\n        }\r\n        else {\r\n            printf(\"Invalid date\\n\");\r\n        }\r\n\r\n    } else {\r\n        printf(\"Invalid choice\\n\");\r\n    }\r\n\r\n    return 0;\r\n}",
  "c-plus-plus": "#include <iostream>\n#include <sstream>\n#include <iomanip>\nclass DateConverter {\npublic:\n    static int standardDateToJulianDate(int year, int month, int day) {\n        int julianDate = day;\n        \n        // Add days from previous months\n        for (int i = 1; i < month; ++i) {\n            julianDate += daysInMonth(i, year);\n        }\n\n        // Add days from previous years\n        for (int i = 1; i < year; ++i) {\n            julianDate += daysInYear(i);\n        }\n\n        return julianDate;\n    }\n\n    static void julianDateToStandardDate(int julianDate, int& year, int& month, int& day) {\n        int remainingDays = julianDate;\n        year = 1;\n\n        // Subtract days from previous years\n        while (remainingDays > daysInYear(year)) {\n            remainingDays -= daysInYear(year);\n            ++year;\n        }\n\n        // Subtract days from previous months\n        month = 1;\n        while (remainingDays > daysInMonth(month, year)) {\n            remainingDays -= daysInMonth(month, year);\n            ++month;\n        }\n\n        day = remainingDays;\n    }\n\nprivate:\n    static int daysInMonth(int month, int year) {\n        static const int daysInMonth[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        if (month == 2 && isLeapYear(year)) {\n            return 29;\n        }\n        return daysInMonth[month];\n    }\n\n    static int daysInYear(int year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    static bool isLeapYear(int year) {\n        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n    }\n};\n\nint main() {\n    int choice;\n    std::cout << \"Choose conversion:\\n\";\n    std::cout << \"1. Standard Date to Julian Date\\n\";\n    std::cout << \"2. Julian Date to Standard Date\\n\";\n    std::cin >> choice;\n\n    if (choice == 1) {\n        int year, month, day;\n        std::cout << \"Enter standard date (YYYY MM DD): \";\n        std::cin >> year >> month >> day;\n        int julianDate = DateConverter::standardDateToJulianDate(year, month, day);\n        std::cout << \"Julian Date: \" << year << std::setw(3) << std::setfill('0') << julianDate << std::endl;\n    } else if (choice == 2) {\n        int julianDate, year, month, day;\n        std::cout << \"Enter Julian Date (YYYYDDD): \";\n        std::cin >> year >> julianDate;\n        DateConverter::julianDateToStandardDate(julianDate, year, month, day);\n        std::cout << \"Standard Date: \" << year << \" \" << month << \" \" << day << std::endl;\n    } else {\n        std::cout << \"Invalid choice\\n\";\n    }\n\n    return 0;\n}\n",
  "c-sharp": "using System;\n\nnamespace JulianDateConverter\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Test the conversion functions\n            Console.WriteLine(\"Convert standard date format to Julian date:\");\n            string standardDate = \"2022-04-01\";\n            string julianDate = StandardDateToJulian(standardDate);\n            Console.WriteLine($\"{standardDate} => {julianDate}\");\n\n            Console.WriteLine(\"\\nConvert Julian date to standard date format:\");\n            string julianDateInput = \"22-091\";\n            string standardDateOutput = JulianToStandardDate(julianDateInput);\n            Console.WriteLine($\"{julianDateInput} => {standardDateOutput}\");\n        }\n\n        // Function to convert standard date format (yyyy-mm-dd) to Julian date (yy-ddd)\n        static string StandardDateToJulian(string standardDate)\n        {\n            DateTime date = DateTime.Parse(standardDate);\n            int year = date.Year % 100;\n            int dayOfYear = date.DayOfYear;\n            return $\"{year:D2}-{dayOfYear:D3}\";\n        }\n\n        // Function to convert Julian date (yy-ddd) to standard date format (yyyy-mm-dd)\n        static string JulianToStandardDate(string julianDate)\n        {\n            int year = int.Parse(julianDate.Substring(0, 2));\n            int dayOfYear = int.Parse(julianDate.Substring(3));\n\n            DateTime date = new DateTime(2000 + year, 1, 1).AddDays(dayOfYear - 1);\n            return date.ToString(\"yyyy-MM-dd\");\n        }\n    }\n}\n",
  "f-sharp": "open System\n\n// Function to convert standard date format (year, month, day) to Julian date\nlet toJulianDate (year : int) (month : int) (day : int) : DateTime =\n    new DateTime(year, month, day)\n\n// Function to convert Julian date to standard date format (year, month, day)\nlet fromJulianDate (date : DateTime) : int * int * int =\n    date.Year, date.Month, date.Day\n\n// Example usage\n[<EntryPoint>]\nlet main argv =\n    // Convert standard date format to Julian date\n    let julianDate = toJulianDate 2024 4 9\n    printfn \"Julian date: %A\" julianDate\n\n    // Convert Julian date to standard date format\n    let (year, month, day) = fromJulianDate julianDate\n    printfn \"Standard date format: %d-%d-%d\" year month day\n\n    0 // Return an integer exit code\n",
  "java": "import java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Scanner;\n\npublic class ConvertStandardDateFormatToJulianDateAndViceversa {\n    public static void main(String[] args) {\n        String ans = \"\";\n\n        Scanner in = new Scanner(System.in);\n        String date = in.next();\n        if (date.contains(\"-\")) {\n            ans = DateFormatToJulianDate(date);\n            System.out.println(\"Julian Date: \" + ans);\n        } else {\n            ans = JulianDateToDateFormat(date);\n            System.out.println(\"Standard Date: \" + ans);\n        }\n\n    }\n\n    // Function to convert the Date format to Julian Date format\n    static String DateFormatToJulianDate(String date) {\n        // Input Format : year - month - day\n        // Output Format : year + noOfDays\n        // ----------------------------------\n        String[] dateSplit = date.split(\"-\"); // Split year, month, date using regex\n\n        String ans = dateSplit[0];\n\n        int currentYear = Integer.parseInt(dateSplit[0]);\n        int currentMonth = Integer.parseInt(dateSplit[1]);\n        int currentDate = Integer.parseInt(dateSplit[2]);\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(Calendar.YEAR, currentYear);\n\n        int totalDays = currentDate;\n        for (int i = 0; i < currentMonth - 1; i++) {\n            calendar.set(Calendar.MONTH, i);\n            int days = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);\n            // System.out.println(days);\n            totalDays += days;\n        }\n\n        if (totalDays > 100) {\n            ans += String.valueOf(totalDays);\n        } else {\n            String formated = String.format(\"%03d\", totalDays);\n            ans += formated;\n        }\n\n        return ans;\n    }\n\n    // Function to convert the Julian date to Date format\n    static String JulianDateToDateFormat(String date) {\n        // Input Format : yeardayValue\n        // Output Format : year - month - date\n        // ----------------------------------\n        String ans = \"\";\n\n        int dateInt = Integer.parseInt(date);\n\n        int dayValue = dateInt % 1000;\n        int year = dateInt / 1000;\n        // System.out.println(year);\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(Calendar.YEAR, year);\n        calendar.set(Calendar.DAY_OF_YEAR, dayValue);\n\n        int month = calendar.get(Calendar.MONTH) + 1;\n        int day = calendar.get(Calendar.DAY_OF_MONTH);\n\n        ans = year + \"-\" + month + \"-\" + day; // Formating the answer to `year - month - date`\n\n        return ans;\n    }\n}\n",
  "javascript": "function toJulianDate(dateString) {\n    const date = new Date(dateString);\n    const start = new Date(date.getFullYear(), 0, 0);\n    const diff = (date - start) + ((start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000);\n    const oneDay = 1000 * 60 * 60 * 24;\n    const day = Math.floor(diff / oneDay) + 1; // Add 1 because dayOfYear should start at 1, not 0\n    return `${date.getFullYear()}${String(day).padStart(3, '0')}`;\n}\n\n\nfunction fromJulianDate(julianDate) {\n    const year = parseInt(julianDate.substring(0, 4), 10);\n    const dayOfYear = parseInt(julianDate.substring(4), 10);\n    const resultDate = new Date(year, 0); \n    resultDate.setDate(dayOfYear); \n    return resultDate.toISOString().split('T')[0];\n}\n\n\nconst testDate = '2023-06-10'; \nconst julianDate = toJulianDate(testDate);\nconst gregorianDate = fromJulianDate(julianDate);\nconsole.log(julianDate); \nconsole.log(gregorianDate); ",
  "kotlin": "import java.time.LocalDate\nimport java.time.format.DateTimeFormatter\n\n// Function to convert standard date format to Julian date\nfun standardToJulian(dateStr: String): String {\n    val date = LocalDate.parse(dateStr, DateTimeFormatter.ISO_DATE)\n    val year = date.year.toString().takeLast(2) // Last two digits of the year\n    val dayOfYear = date.dayOfYear.toString().padStart(3, '0') // Day of year with leading zeros if needed\n    return \"$year-$dayOfYear\"\n}\n\n// Function to convert Julian date to standard date format\nfun julianToStandard(julianDate: String): String {\n    val year = julianDate.substring(0, 2).toInt() + 2000 // Convert to full year\n    val dayOfYear = julianDate.substring(3).toInt()\n    val date = LocalDate.ofYearDay(year, dayOfYear)\n    return date.format(DateTimeFormatter.ISO_DATE)\n}\n\n// Test\nfun main() {\n    val standardDate = \"2024-03-27\"\n    val julianDate = standardToJulian(standardDate)\n    println(\"Julian date for $standardDate: $julianDate\")\n\n    val convertedStandardDate = julianToStandard(julianDate)\n    println(\"Standard date for $julianDate: $convertedStandardDate\")\n}\n",
  "ruby": "require 'date'\n\ndef standard_date_to_julian(standard_date)\n  date = Date.parse(standard_date)\n  year = date.year % 100\n  day_of_year = date.yday\n  sprintf(\"%02d-%03d\", year, day_of_year)\nend\n\ndef julian_to_standard_date(julian_date)\n  year, day_of_year = julian_date.split('-').map(&:to_i)\n  date = Date.new((2000 + year), 1, 1) + day_of_year - 1\n  date.strftime(\"%Y-%m-%d\")\nend\n\n# Test the conversion functions\nputs \"Convert standard date format to Julian date:\"\nstandard_date = \"2022-04-01\"\njulian_date = standard_date_to_julian(standard_date)\nputs \"#{standard_date} => #{julian_date}\"\n\nputs \"\\nConvert Julian date to standard date format:\"\njulian_date_input = \"22-091\"\nstandard_date_output = julian_to_standard_date(julian_date_input)\nputs \"#{julian_date_input} => #{standard_date_output}\"\n",
  "swift": "import Foundation\n\nfunc convertToJulianDate(dateString: String) -> String? {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"yyyy-MM-dd\"\n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n    \n    if let date = dateFormatter.date(from: dateString) {\n        let year = Calendar.current.component(.year, from: date)\n        let dayOfYear = Calendar.current.ordinality(of: .day, in: .year, for: date)!\n        \n        return String(format: \"%04d%03d\", year, dayOfYear)\n    }\n    \n    return nil\n}\n\nfunc convertFromJulianDate(julianDateString: String) -> String? {\n    guard julianDateString.count == 7,\n          let year = Int(julianDateString.prefix(4)),\n          let dayOfYear = Int(julianDateString.suffix(3)) else {\n        return nil\n    }\n    \n    var dateComponents = DateComponents()\n    dateComponents.year = year\n    dateComponents.day = dayOfYear\n    \n    if let date = Calendar.current.date(from: dateComponents) {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat = \"yyyy-MM-dd\"\n        dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n        \n        return dateFormatter.string(from: date)\n    }\n    \n    return nil\n}\n\n// Example Usage\nlet standardDate = \"2023-06-10\"\nif let julianDate = convertToJulianDate(dateString: standardDate) {\n    print(\"Julian Date: \\(julianDate)\")\n}\n\nlet julianDate = \"2023160\"\nif let standardDate = convertFromJulianDate(julianDateString: julianDate) {\n    print(\"Standard Date: \\(standardDate)\")\n}\n",
  "typescript": "function standardToJulian(date: string): string {\n    const [year, month, day] = date.split('-').map(Number);\n    const julianDay = getDayOfYear(year, month, day);\n    return `${year}-${pad(julianDay, 3)}`;\n}\n\nfunction julianToStandard(julianDate: string): string {\n    const [year, dayOfYear] = julianDate.split('-').map(Number);\n    const date = getDateFromDayOfYear(year, dayOfYear);\n    const month = pad(date.getMonth() + 1, 2);\n    const day = pad(date.getDate(), 2);\n    return `${year}-${month}-${day}`;\n}\n\nfunction getDayOfYear(year: number, month: number, day: number): number {\n    const date = new Date(year, month - 1, day);\n    const startOfYear = new Date(year, 0, 0);\n    const diff = +date - +startOfYear;\n    const oneDay = 1000 * 60 * 60 * 24;\n    return Math.floor(diff / oneDay);\n}\n\nfunction getDateFromDayOfYear(year: number, dayOfYear: number): Date {\n    const date = new Date(year, 0); // January 1st\n    date.setDate(dayOfYear);\n    return date;\n}\n\nfunction pad(num: number, size: number): string {\n    let str = num.toString();\n    while (str.length < size) {\n        str = '0' + str;\n    }\n    return str;\n}\n\n// Example usage:\nconst standardDate = '2022-02-22';\nconst julianDate = '22-053';\n\nconsole.log(`Standard to Julian: ${standardToJulian(standardDate)}`);\nconsole.log(`Julian to Standard: ${julianToStandard(julianDate)}`);\n",
  "description": "\n## Write a program to convert standard date format to julian date and vice-versa\n\nA Julian date is a way of displaying a date that combines the current year with the number of days since the beginning of the year. For example, January 1, 2007 is 2007001, and December 31, 2007 is 2007365.\r\n\r\nThe first two digits of a Julian date represent the year, and the last three digits represent the number of days since the beginning of the year. For example, 21-001 represents January 1, 2021, and 22-165 represents June 14, 2022.\r\n\r\n### Example\r\n\r\n```\r\nInput  : 2023-06-10\r\nOutput : 2023160\r\n```\n\n---\n",
  "trackId": 5460,
  "lastUpdated": "2024-06-16T16:59:29Z",
  "contributors": [
    "harshraj8843",
    "Riyazul555",
    "pranavsilimkhan",
    "jiyac18",
    "pojith",
    "Rupa-Rd",
    "RithikaReddyK",
    "KorieDrakeChaney",
    "nitin-rjadhav",
    "bulutg",
    "Saipraneeth99",
    "magar51"
  ],
  "julia": "using Dates\n\n# Function to convert standard date format to Julian date\nfunction standard_to_julian(date_str::String)\n    date = Date(date_str)\n    year = year(date) % 100  # Last two digits of the year\n    day_of_year = Dates.dayofyear(date)\n    return \"$(year)-$(lpad(day_of_year, 3, '0'))\"\nend\n\n# Function to convert Julian date to standard date format\nfunction julian_to_standard(julian_date::String)\n    year = parse(Int, julian_date[1:2]) + 2000  # Convert to full year\n    day_of_year = parse(Int, julian_date[4:end])\n    date = Date(year, day_of_year)\n    return string(date)\nend\n\n# Test\nstandard_date = \"2024-03-27\"\njulian_date = standard_to_julian(standard_date)\nprintln(\"Julian date for $(standard_date): $(julian_date)\")\n\nconverted_standard_date = julian_to_standard(julian_date)\nprintln(\"Standard date for $(julian_date): $(converted_standard_date)\")\n",
  "scala": "import java.time.LocalDate\nimport java.time.format.DateTimeFormatter\n\nobject DateConverter {\n  def main(args: Array[String]): Unit = {\n    // Example usage\n    val standardDate = \"2023-10-05\"\n    val julianDate = convertStandardToJulian(standardDate)\n    println(s\"Standard to Julian: $standardDate -> $julianDate\")\n\n    val convertedStandardDate = convertJulianToStandard(julianDate)\n    println(s\"Julian to Standard: $julianDate -> $convertedStandardDate\")\n  }\n\n  def convertStandardToJulian(standardDate: String): String = {\n    val date = LocalDate.parse(standardDate, DateTimeFormatter.ISO_DATE)\n    val year = date.getYear\n    val dayOfYear = date.getDayOfYear\n    f\"$year%02d$dayOfYear%03d\"\n  }\n\n  def convertJulianToStandard(julianDate: String): String = {\n    val year = julianDate.substring(0, 2).toInt\n    val dayOfYear = julianDate.substring(2).toInt\n    val date = LocalDate.ofYearDay(year + 2000, dayOfYear)\n    date.format(DateTimeFormatter.ISO_DATE)\n  }\n}\n",
  "dart": "import 'dart:io';\n\n// Function to convert standard date format to Julian date\nString standardToJulianDate(int year, int month, int day) {\n  int daysInMonth = 0;\n  List<int> daysInMonths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\n    daysInMonths[1] = 29; // Leap year\n  }\n  for (int i = 0; i < month - 1; i++) {\n    daysInMonth += daysInMonths[i];\n  }\n  daysInMonth += day;\n  return '$year${daysInMonth.toString().padLeft(3, '0')}';\n}\n\n// Function to convert Julian date to standard date format\nList<int> julianToStandardDate(String julianDate) {\n  int year = int.parse(julianDate.substring(0, 2));\n  int dayOfYear = int.parse(julianDate.substring(2));\n  List<int> daysInMonths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\n    daysInMonths[1] = 29; // Leap year\n  }\n  int month = 1;\n  while (dayOfYear > daysInMonths[month - 1]) {\n    dayOfYear -= daysInMonths[month - 1];\n    month++;\n  }\n  return [year, month, dayOfYear];\n}\n\nvoid main() {\n  stdout.write('Enter the standard date (YYYY-MM-DD): ');\n  String inputDate = stdin.readLineSync()!;\n  List<String> parts = inputDate.split('-');\n  int year = int.parse(parts[0]);\n  int month = int.parse(parts[1]);\n  int day = int.parse(parts[2]);\n\n  String julianDate = standardToJulianDate(year, month, day);\n  print('Julian Date: $julianDate');\n\n  stdout.write('Enter the Julian date (YYDDD): ');\n  String inputJulianDate = stdin.readLineSync()!;\n  List<int> standardDate = julianToStandardDate(inputJulianDate);\n  print('Standard Date: ${standardDate[0]}-${standardDate[1].toString().padLeft(2, '0')}-${standardDate[2].toString().padLeft(2, '0')}');\n}\n",
  "go": "package main\n\nimport (\n    \"fmt\"\n    \"strconv\"\n    \"strings\"\n    \"time\"\n)\n\n// Function to convert standard date format to Julian date\nfunc standardToJulian(dateStr string) string {\n    date, _ := time.Parse(\"2006-01-02\", dateStr)\n    year := date.Year() % 100 // Last two digits of the year\n    dayOfYear := date.YearDay()\n    return fmt.Sprintf(\"%02d-%03d\", year, dayOfYear)\n}\n\n// Function to convert Julian date to standard date format\nfunc julianToStandard(julianDate string) string {\n    parts := strings.Split(julianDate, \"-\")\n    year, _ := strconv.Atoi(parts[0])\n    year += 2000 // Convert to full year\n    dayOfYear, _ := strconv.Atoi(parts[1])\n    date := time.Date(year, 1, 0, 0, 0, 0, 0, time.UTC).AddDate(0, 0, dayOfYear)\n    return date.Format(\"2006-01-02\")\n}\n\nfunc main() {\n    standardDate := \"2024-03-27\"\n    julianDate := standardToJulian(standardDate)\n    fmt.Printf(\"Julian date for %s: %s\\n\", standardDate, julianDate)\n\n    convertedStandardDate := julianToStandard(julianDate)\n    fmt.Printf(\"Standard date for %s: %s\\n\", julianDate, convertedStandardDate)\n}\n",
  "haskell": "import Data.Time.Calendar\nimport Data.Time.Calendar.OrdinalDate\n\n-- Function to convert standard date format (year, month, day) to Julian date\ntoJulianDate :: Integer -> Int -> Int -> Day\ntoJulianDate year month day = fromGregorian year month day\n\n-- Function to convert Julian date to standard date format (year, month, day)\nfromJulianDate :: Day -> (Integer, Int, Int)\nfromJulianDate date = toGregorian date\n\n-- Example usage\nmain :: IO ()\nmain = do\n    -- Convert standard date format to Julian date\n    let julianDate = toJulianDate 2024 4 9\n    putStrLn $ \"Julian date: \" ++ show julianDate\n\n    -- Convert Julian date to standard date format\n    let (year, month, day) = fromJulianDate julianDate\n    putStrLn $ \"Standard date format: \" ++ show year ++ \"-\" ++ show month ++ \"-\" ++ show day\n",
  "php": "<?php\n\nfunction toJulianDate($year, $month, $day) {\n\n    $startOfYear = new DateTime(\"$year-01-01\");\n    $currentDate = new DateTime(\"$year-$month-$day\");\n    $difference = $startOfYear->diff($currentDate);\n    return sprintf('%d%03d', $year, $difference->days + 1);\n}\n\nfunction fromJulianDate($julianDate) {\n    $year = substr($julianDate, 0, 4);\n    $days = intval(substr($julianDate, 4)) - 1;\n    $date = new DateTime(\"$year-01-01\");\n    $date->add(new DateInterval(\"P{$days}D\"));\n    return $date->format('Y-m-d');\n}\n\n\n$standardDate = \"2023-06-10\";\nlist($year, $month, $day) = explode('-', $standardDate);\n$julianDate = toJulianDate($year, $month, $day);\necho \"Standard date: $standardDate\\n\";\necho \"Julian date: $julianDate\\n\";\n\n\n$convertedDate = fromJulianDate($julianDate);\necho \"Converted back to standard date: $convertedDate\\n\";\n\n?>\n",
  "perl": "use strict;\nuse warnings;\nuse Time::Piece;\n\n# Function to convert standard date format to Julian date\nsub standard_to_julian {\n    my ($date_str) = @_;\n    my $date = Time::Piece->strptime($date_str, '%Y-%m-%d');\n    return $date->strftime('%j');\n}\n\n# Function to convert Julian date to standard date format\nsub julian_to_standard {\n    my ($julian_date) = @_;\n    my $year = (localtime->year) + 1900;\n    my $date = Time::Piece->strptime(\"$year-$julian_date\", '%Y-%j');\n    return $date->strftime('%Y-%m-%d');\n}\n\n# Test\nmy $standard_date = '2024-03-27';\nmy $julian_date = standard_to_julian($standard_date);\nprint \"Julian date for $standard_date: $julian_date\\n\";\n\nmy $converted_standard_date = julian_to_standard($julian_date);\nprint \"Standard date for $julian_date: $converted_standard_date\\n\";\n",
  "python": "import datetime\n\n\n# Function to convert standard input date into julian date\ndef stddate_to_jd(std_date):\n    fmt = \"%Y-%m-%d\"\n    converted_date = datetime.datetime.strptime(std_date, fmt)\n    converted_date = converted_date.timetuple()\n    jul_date = str(converted_date.tm_year) + \"\" + str(converted_date.tm_yday)\n    return jul_date\n\n\n# Function to convert julian input date into standard date\ndef jd_to_stddate(jdate):\n    fmt = \"%Y%j\"\n    date_std = datetime.datetime.strptime(jdate, fmt).date()\n    return date_std\n\n\nprint(\"Please provide input date to be converted : \")\ninput_date = input()\n\nif len(input_date) == 10:\n    return_val = stddate_to_jd(input_date)\n    print(\"Converted date is : \", return_val)\nelif len(input_date) == 7:\n    return_val = jd_to_stddate(input_date)\n    print(\"Converted date is : \", return_val)\nelse:\n    print(\"Incorrect format of date. Please provide correct format.\")\n",
  "r": "# Function to convert standard date format to Julian date\nstandard_to_julian <- function(date) {\n  parts <- unlist(strsplit(date, \"-\"))\n  year <- as.numeric(parts[1])\n  month <- as.numeric(parts[2])\n  day <- as.numeric(parts[3])\n  \n  julian_day <- as.numeric(format(as.Date(date), \"%j\"))\n  julian_year <- as.numeric(format(as.Date(date), \"%y\"))\n  \n  return(paste(julian_year, sprintf(\"%03d\", julian_day), sep = \"-\"))\n}\n\n# Function to convert Julian date format to standard date format\njulian_to_standard <- function(julian_date) {\n  parts <- unlist(strsplit(julian_date, \"-\"))\n  julian_year <- as.numeric(parts[1])\n  julian_day <- as.numeric(parts[2])\n  \n  standard_date <- as.Date(paste0(\"20\", julian_year, \"-01-01\")) + julian_day - 1\n  \n  return(as.character(standard_date))\n}\n\n# Example usage:\nstandard_date <- \"2022-02-22\"\njulian_date <- \"22-053\"\n\ncat(\"Standard to Julian:\", standard_to_julian(standard_date), \"\\n\")\ncat(\"Julian to Standard:\", julian_to_standard(julian_date), \"\\n\")\n",
  "rust": "const MONTHS: [u32; 12] = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n/// Check if the given year is a leap year\nfn is_leap_year(year: u32) -> bool {\n    year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)\n}\n\n/// Get days up to the given month\nfn days_up_to_month(month: u32, year: u32) -> u32 {\n    let mut days = 0;\n    for i in 0..month - 1 {\n        days += MONTHS[i as usize];\n    }\n    if month > 2 && is_leap_year(year) {\n        days += 1;\n    }\n    days\n}\n\n/// Convert standard date format to Julian date\n/// The standard date format is `YYYY-MM-DD`\n/// The Julian date format is `YYYYDDD`\nfn convert_standard_date_to_julian_date(standard_date: &str) -> String {\n    let parts: Vec<&str> = standard_date.split('-').collect();\n    if let (Ok(year), Ok(month), Ok(day)) = (\n        parts[0].parse::<u32>(),\n        parts[1].parse::<u32>(),\n        parts[2].parse::<u32>(),\n    ) {\n        let days = day + days_up_to_month(month, year);\n\n        format!(\"{}{:03}\", year, days)\n    } else {\n        \"Invalid date format\".to_string()\n    }\n}\n\n// Convert Julian date format to standard date\n/// The standard date format is `YYYY-MM-DD`\n/// The Julian date format is `YYYYDDD`\nfn convert_julian_date_to_standard_date(julian_date: &str) -> String {\n    if julian_date.len() != 7 {\n        return \"Invalid date format\".to_string();\n    }\n    let year = &julian_date[0..4];\n    let days = &julian_date[4..7];\n\n    if let (Ok(year), Ok(days)) = (year.parse::<u32>(), days.parse::<u32>()) {\n        if days == 0 {\n            return \"Invalid date format\".to_string();\n        }\n        let mut day = days;\n        let mut month = 0;\n        for (i, &month_days) in MONTHS.iter().enumerate() {\n            if i == 1 && is_leap_year(year) {\n                day -= 1;\n            }\n\n            if day <= month_days {\n                month = i as u32 + 1;\n                break;\n            }\n            day -= month_days;\n        }\n\n        format!(\"{}-{:02}-{:02}\", year, month, day)\n    } else {\n        \"Invalid date format\".to_string()\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    #[test]\n    fn test_standard_date_to_julian_date() {\n        assert_eq!(\n            convert_standard_date_to_julian_date(\"2023-06-10\"),\n            \"2023161\"\n        );\n\n        assert_eq!(\n            convert_standard_date_to_julian_date(\"2023-12-31\"),\n            \"2023365\"\n        );\n\n        assert_eq!(\n            convert_standard_date_to_julian_date(\"2024-01-01\"),\n            \"2024001\"\n        );\n\n        assert_eq!(\n            convert_standard_date_to_julian_date(\"2024-12-31\"),\n            \"2024366\"\n        );\n\n        assert_eq!(\n            convert_standard_date_to_julian_date(\"2025-01-01\"),\n            \"2025001\"\n        );\n    }\n\n    #[test]\n    fn test_julian_date_to_standard_date() {\n        assert_eq!(\n            convert_julian_date_to_standard_date(\"2023161\"),\n            \"2023-06-10\"\n        );\n\n        assert_eq!(\n            convert_julian_date_to_standard_date(\"2023365\"),\n            \"2023-12-31\"\n        );\n\n        assert_eq!(\n            convert_julian_date_to_standard_date(\"2024001\"),\n            \"2024-01-01\"\n        );\n\n        assert_eq!(\n            convert_julian_date_to_standard_date(\"2024366\"),\n            \"2024-12-31\"\n        );\n\n        assert_eq!(\n            convert_julian_date_to_standard_date(\"2025001\"),\n            \"2025-01-01\"\n        );\n\n        assert_eq!(\n            convert_julian_date_to_standard_date(\"2025000\"),\n            \"Invalid date format\"\n        );\n    }\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}