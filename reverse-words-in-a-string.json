{
  "slug": "reverse-words-in-a-string",
  "title": "Reverse Words In A String",
  "description": "\n## Write a program to reverse words in a string\n\n```\r\nInput  : \"Hello World\"\r\nOutput : \"World Hello\"\r\n```\n\n---\n",
  "trackId": 4997,
  "lastUpdated": "2024-06-28T08:08:53Z",
  "contributors": [
    "Riyazul555",
    "harshraj8843",
    "anandfresh",
    "itskarelleh",
    "mktana",
    "Parvezkhan0",
    "SapirKro",
    "fdlpm",
    "andysama79",
    "hamzambo",
    "mukulbindal",
    "andrysatko"
  ],
  "c": "#include <stdio.h>\n#include <string.h>\n\nvoid reverseWords(char *str) {\n    int start = 0;\n    int end = strlen(str) - 1;\n\n    // Reverse the whole string\n    while (start < end) {\n        char temp = str[start];\n        str[start] = str[end];\n        str[end] = temp;\n        start++;\n        end--;\n    }\n\n    // Reverse individual words\n    start = 0;\n    while (str[start] != '\\0') {\n        // Skip spaces\n        while (str[start] == ' ') {\n            start++;\n        }\n\n        // Find the end of the current word\n        end = start;\n        while (str[end] != ' ' && str[end] != '\\0') {\n            end++;\n        }\n\n        // Reverse the current word\n        int wordStart = start;\n        int wordEnd = end - 1;\n        while (wordStart < wordEnd) {\n            char temp = str[wordStart];\n            str[wordStart] = str[wordEnd];\n            str[wordEnd] = temp;\n            wordStart++;\n            wordEnd--;\n        }\n\n        // Move to the next word\n        start = end;\n    }\n}\n\nint main() {\n    char input[] = \"Hello World\";\n    \n    printf(\"Input : %s\\n\", input);\n\n    reverseWords(input);\n\n    printf(\"Output: %s\\n\", input);\n\n    return 0;\n}\n",
  "c-plus-plus": "#include <iostream>\n#include <sstream>\n#include <vector>\n\nvoid reverseWords(std::string& str) {\n    std::istringstream iss(str);\n    std::vector<std::string> words;\n\n    // Split the string into words\n    while (iss >> str) {\n        words.push_back(str);\n    }\n\n    // Reverse the order of words\n    std::reverse(words.begin(), words.end());\n\n    // Construct the reversed string\n    str.clear();\n    for (const auto& word : words) {\n        str += word + \" \";\n    }\n\n    // Remove the trailing space\n    if (!str.empty()) {\n        str.pop_back();\n    }\n}\n\nint main() {\n    std::string input;\n    \n    // Input string\n    std::cout << \"Enter a string: \";\n    std::getline(std::cin, input);\n\n    // Reverse the words in the string\n    reverseWords(input);\n\n    // Output the reversed string\n    std::cout << \"Reversed string: \" << input << std::endl;\n\n    return 0;\n}\n",
  "c-sharp": "using System;\n\nclass Program\n{\n    static string ReverseWords(string inputString)\n    {\n        // Split the input string into an array of words\n        string[] wordsArray = inputString.Split(' ');\n\n        // Reverse the array of words\n        Array.Reverse(wordsArray);\n\n        // Join the reversed array of words to form the reversed string\n        string reversedString = string.Join(\" \", wordsArray);\n\n        return reversedString;\n    }\n\n    static void Main()\n    {\n        string inputString = \"Hello World\";\n        string output = ReverseWords(inputString);\n\n        Console.WriteLine($\"Input : \\\"{inputString}\\\"\");\n        Console.WriteLine($\"Output: \\\"{output}\\\"\");\n    }\n}\n",
  "f-sharp": "let reverseWords (input: string) =\n    let words = input.Split([|' '|], System.StringSplitOptions.RemoveEmptyEntries)\n    let reversed = System.String.Join(\" \", words |> Array.rev)\n    reversed\n\n// Example usage:\nlet inputString = \"Hello World\"\nlet outputString = reverseWords inputString\nprintfn \"Input:  %s\" inputString\nprintfn \"Output: %s\" outputString\n\n//This program defines a function reverseWords that takes a string as input,\n//splits it into words, reverses the array of words, \n//and then joins them back into a string with spaces. \n//The example usage demonstrates reversing the words in the input string \"Hello World\".",
  "java": "\nclass ReverseWordsInAString {\n\n\t/**\n\t * This program reverses the words in a string<br><br>\n\t * \n\t * <b>input:</b> The input String for which the words to be reversed<br><br>\n\t * \n\t * <b>Returns a new String</b><br><br>\n\t * \n\t * <b>Example:</b><br><br>\n\t * input: hello world<br><br>\n\t * output: world hello<br><br>\n\t * */\n\tpublic static String reverseWordsInAString(String input) {\n\t\t\n\t\t// Check if the string is null or blank\n\t\tif (input == null || input.isBlank()) {\n\t\t\treturn input;\n\t\t}\n\t\t\n\t\t// Split the string to get the words\n\t\tString[] words = input.split(\" \");\n\t\t\n\t\t// Join the string back in reverse order\n\t\tStringBuilder result = new StringBuilder();\n\t\tfor (int i = words.length - 1; i >= 0; --i) {\n\t\t\tresult.append(words[i] + \" \");\n\t\t}\n\t\t\n\t\t// Return the result\n\t\treturn result.toString().trim();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(reverseWordsInAString(\"Hello World\"));\n\t}\n\n}\n",
  "javascript": "//Write a JavaScript program to reverse words in a string #5007\n//Input  : \"Hello World\"\n//Output : \"World Hello\"\n\nconst string = \"Hello World\"\n\nfunction reverseString(str) {\n    const reversedWords = str.split(' ').reverse().join(' ');\n    return reversedWords\n}\n\nconsole.log(\"String reverse:\", reverseString(string));",
  "kotlin": "fun main() {\n    println(reverseWordsInAString(\"Hello World\"))\n}\n\n/**\n* reversed the words in a string\n* Input  : \"Hello World\"\n* Output : \"World Hello\"\n* @param words the string to be reversed\n */\nfun reverseWordsInAString(words : String) : String {\n    return words.split(\" \").reversed().joinToString(\" \")\n}",
  "ruby": "class String\n  def reverse_words\n    split.inject([]){|str, word| str.unshift word}.join(' ')\n  end\n\n  def reverse_chars\n    each_char.inject([]){|str, char| str.unshift char}.join('')\n  end\nend\n\nputs \"Hello World\".reverse_words.inspect\n",
  "swift": "import Foundation\n\nfunc reverseWords(in sentence: String) -> String {\n    // Split the sentence into an array of words\n    let words = sentence.split(separator: \" \")\n    \n    // Reverse the array of words\n    let reversedWords = words.reversed()\n    \n    // Join the reversed words back into a single string\n    let reversedSentence = reversedWords.joined(separator: \" \")\n    \n    return reversedSentence\n}\n\nfunc main() {\n    let sentence = \"Hello world this is a test\"\n    let reversedSentence = reverseWords(in: sentence)\n    print(\"Original sentence: \\(sentence)\")\n    print(\"Reversed words: \\(reversedSentence)\")\n}\n\nmain()\n",
  "typescript": "function reverseWords(input: string): string {\n    const words = input.split(' ');\n    const reversedWords = words.reverse().join(' ');\n    return reversedWords;\n}\n\nconst input = \"Hello World\";\nconsole.log(reverseWords(input))\n",
  "julia": "function reverse_words(sentence::String)\n    words = split(sentence)\n    reversed_words = reverse(words)\n    return join(reversed_words, \" \")\nend\n\nfunction main()\n    sentence = \"Hello world this is a test\"\n    reversed_sentence = reverse_words(sentence)\n    println(\"Original sentence: $sentence\")\n    println(\"Reversed words: $reversed_sentence\")\nend\n\nmain()\n",
  "scala": "object ReverseWordsInAString {\n  def main(args: Array[String]): Unit =  {\n    val inputString = scala.io.StdIn.readLine()\n    val reversedWords = reverseWords(inputString)\n    println(reversedWords)\n  }\n\n  def reverseWords(input: String): String = {\n    val words = input.split(\" \")\n    val reversedWords = words.reverse\n    val result = reversedWords.mkString(\" \")\n    result\n  }\n}",
  "dart": "void main() {\n  String input = \"Hello World\";\n  \n  // Reverse the words in the string\n  String reversedString = reverseWords(input);\n  \n  // Output the reversed string\n  print(\"Reversed string: $reversedString\");\n}\n\nString reverseWords(String input) {\n  List<String> words = input.split(\" \");\n\n  // Reverse the order of words\n  List<String> reversedWords = List.from(words.reversed);\n\n  // Construct the reversed string\n  String reversedString = reversedWords.join(\" \");\n\n  return reversedString;\n}\n",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// reverseWords reverses the order of words in a given string.\nfunc reverseWords(input string) string {\n\t// Split the input string into words.\n\twords := strings.Fields(input)\n\n\t// Reverse the order of words using a two-pointer approach.\n\tfor i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n\t\twords[i], words[j] = words[j], words[i]\n\t}\n\n\t// Join the reversed words into a string and return.\n\treturn strings.Join(words, \" \")\n}\n\nfunc main() {\n\t// Example usage of reverseWords function.\n\tinputString := \"Hello World\"\n\treversedResult := reverseWords(inputString)\n\tfmt.Println(reversedResult)\n}\n",
  "haskell": "reverseWords :: String -> String\nreverseWords sentence = unwords . reverse . words $ sentence\n\nmain :: IO ()\nmain = do\n    let sentence = \"Hello world this is a test\"\n    let reversedSentence = reverseWords sentence\n    putStrLn $ \"Original sentence: \" ++ sentence\n    putStrLn $ \"Reversed words: \" ++ reversedSentence\n",
  "php": "<?php\n\n#PHP program to reverse words in a string\n\n# Check if a string to reverse was passed in, if not, show error and usage message.\nif(isset($argv[1])){\n\n\t$string = $argv[1]; # Grab string to be reversed from input argument\n\n\t$words = preg_split('/\\s+/', $string); # Split string at whitespaces, resulting in an array of words\n\n\t$words = array_reverse($words); # Reverse the words array\n\t\n\t$reversed_string = join(\" \", $words); # Join words array back to a single string using a space between words\n\n\techo $reversed_string;  # Output the resulting reversed string.\n\texit(0); # Successful exit\n}\n\nelse{\n\n\techo \"No string was provided.\\r\\nUsage: php \", __FILE__, \" \\\"String to reverse\\\"\\r\\n\";\n\texit(1); # Error exit\n}\n\n?>\n",
  "perl": "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nsub reverse_words {\n    my ($input_string) = @_;\n\n    # Split the input string into words\n    my @words = split /\\s+/, $input_string;\n\n    # Reverse the order of words\n    my $output_string = join ' ', reverse @words;\n\n    return $output_string;\n}\n\n# Example usage\nmy $input_string = \"Hello World\";\nmy $output_string = reverse_words($input_string);\n\nprint \"Input  : \\\"$input_string\\\"\\n\";\nprint \"Output : \\\"$output_string\\\"\\n\";\n",
  "python": "def reverse_words_in_string(string: str) -> str:\n    \"\"\"Returns the reverse of words in string\n    input: str\n    \"\"\"\n\n    # If string is blank, return\n    if not string:\n        return string\n\n    # Split the words\n    words = string.split(\" \")\n    # Reverse and join the words\n    return \" \".join(reversed(words))\n\n\nif __name__ == \"__main__\":\n    result = reverse_words_in_string(\"hello world\")\n    print(result)\n",
  "rust": "fn reverse_words(sentence: &str) -> String {\n    let words: Vec<&str> = sentence.split_whitespace().collect();\n    let reversed_words: Vec<&str> = words.into_iter().rev().collect();\n    reversed_words.join(\" \")\n}\n\nfn main() {\n    let sentence = \"Hello world this is a test\";\n    let reversed_sentence = reverse_words(sentence);\n    println!(\"Original sentence: {}\", sentence);\n    println!(\"Reversed words: {}\", reversed_sentence);\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "rust"
  ]
}