{
  "slug": "find-the-smallest-two-elements-in-an-array",
  "title": "Find The Smallest Two Elements In An Array",
  "c": "#include <stdio.h>\n#include <stdlib.h>\n\n// Function to compare elements for qsort\nint compare(const void * a, const void * b) {\n    return (*(int*)a - *(int*)b);\n}\n\n// Function to find and print the smallest two elements\nvoid findSmallestTwo(int arr[], int size) {\n    // Sort the array\n    qsort(arr, size, sizeof(int), compare);\n\n    // Print the first two elements\n    printf(\"Smallest two elements: %d %d\\n\", arr[0], arr[1]);\n}\n\nint main() {\n    int arr1[] = {12, 13, 1, 10, 34, 1};\n    int size1 = sizeof(arr1) / sizeof(arr1[0]);\n\n    printf(\"Input 1: \");\n    for (int i = 0; i < size1; i++) {\n        printf(\"%d \", arr1[i]);\n    }\n    printf(\"\\n\");\n    findSmallestTwo(arr1, size1);\n\n    printf(\"\\n\");\n\n    int arr2[] = {10, 5, 10};\n    int size2 = sizeof(arr2) / sizeof(arr2[0]);\n\n    printf(\"Input 2: \");\n    for (int i = 0; i < size2; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    printf(\"\\n\");\n    findSmallestTwo(arr2, size2);\n\n    return 0;\n}\n",
  "c-plus-plus": "#include <iostream>\n#include <climits>\n\nvoid findSmallestTwo(int arr[], int size) {\n    if (size < 2) {\n        std::cout << \"Array size should be at least 2.\" << std::endl;\n        return;\n    }\n\n    int firstSmallest = INT_MAX;\n    int secondSmallest = INT_MAX;\n\n    for (int i = 0; i < size; ++i) {\n        if (arr[i] < firstSmallest) {\n            secondSmallest = firstSmallest;\n            firstSmallest = arr[i];\n        } else if (arr[i] < secondSmallest && arr[i] != firstSmallest) {\n            secondSmallest = arr[i];\n        }\n    }\n\n    if (secondSmallest == INT_MAX) {\n        std::cout << \"There are not enough distinct elements in the array.\" << std::endl;\n    } else {\n        std::cout << \"The smallest two elements are \" << firstSmallest << \" and \" << secondSmallest << std::endl;\n    }\n}\n\nint main() {\n    int size;\n\n    std::cout << \"Enter the size of the array: \";\n    std::cin >> size;\n\n    if (size <= 0) {\n        std::cout << \"Invalid array size.\" << std::endl;\n        return 1;\n    }\n\n    int arr[size];\n    std::cout << \"Enter the elements of the array: \";\n    for (int i = 0; i < size; ++i) {\n        std::cin >> arr[i];\n    }\n\n    findSmallestTwo(arr, size);\n\n    return 0;\n}\n",
  "c-sharp": "using System;\n\nclass Program\n{\n    static void FindSmallestTwoElements(int[] arr)\n    {\n        if (arr.Length < 2)\n        {\n            Console.WriteLine(\"Array should have at least two elements.\");\n            return;\n        }\n\n        int smallest = int.MaxValue;\n        int secondSmallest = int.MaxValue;\n\n        foreach (int num in arr)\n        {\n            if (num < smallest)\n            {\n                secondSmallest = smallest;\n                smallest = num;\n            }\n            else if (num < secondSmallest && num != smallest)\n            {\n                secondSmallest = num;\n            }\n        }\n\n        Console.WriteLine($\"Smallest Two Elements: {smallest} {secondSmallest}\");\n    }\n\n    static void Main()\n    {\n        int[] arr1 = { 12, 13, 1, 10, 34, 1 };\n        FindSmallestTwoElements(arr1);\n\n        int[] arr2 = { 10, 5, 10 };\n        FindSmallestTwoElements(arr2);\n    }\n}\n",
  "f-sharp": "let input = [ 12; 13; 1; 10; 34; 1]\n\nlet sort = List.sort input\n\nfor i = 0 to 1 do\n    printfn \"%d\" sort.[i]\n",
  "java": "import java.util.Arrays;\n\npublic class Main {\n    // Function to find and print the smallest two elements\n    public static void findSmallestTwo(int[] arr) {\n        // Sort the array\n        Arrays.sort(arr);\n\n        // Print the first two elements\n        System.out.println(\"Smallest two elements: \" + arr[0] + \" \" + arr[1]);\n    }\n\n    public static void main(String[] args) {\n        int[] arr1 = {12, 13, 1, 10, 34, 1};\n        System.out.print(\"Input 1: \");\n        for (int value : arr1) {\n            System.out.print(value + \" \");\n        }\n        System.out.println();\n        findSmallestTwo(arr1);\n\n        System.out.println();\n\n        int[] arr2 = {10, 5, 10};\n        System.out.print(\"Input 2: \");\n        for (int value : arr2) {\n            System.out.print(value + \" \");\n        }\n        System.out.println();\n        findSmallestTwo(arr2);\n    }\n}\n",
  "javascript": "function findTheSmallestTwoElementsInAnArray(arr) {\n    arr.sort((a, b) => a - b);\n    return arr.slice(0, 2);\n}\n\nconsole.log(findTheSmallestTwoElementsInAnArray([12, 13, 1, 10, 34, 1]));\nconsole.log(findTheSmallestTwoElementsInAnArray([10, 5, 10]));\n",
  "kotlin": "import org.junit.Assert.assertArrayEquals\nimport org.junit.Test\n\nfun main() {\n    arrayOf(12, 13, 1, 10, 34, 1)\n        .printSmallestTwo()\n}\n\n/**\n * Extension function that prints the smallest two elements\n * in the receiver array.\n *\n * Example:\n * ```kotlin\n * arrayOf(12, 13, 1, 10, 34, 1).printSmallestTwo()\n * ```\n *\n * Output:\n * ```console\n * 1 1\n * ```\n */\nprivate fun Array<Int>.printSmallestTwo() =\n    let(::toSmallestTwoElements)\n        .also {\n            println(it.joinToString(\" \"))\n        }\n\n/**\n * Function to find the smallest two elements in an array.\n * @return a new array comprising the smallest two members of the input.\n */\nprivate fun toSmallestTwoElements(input: Array<Int>): Array<Int> =\n    input.fold(\n        Array(2) { Int.MAX_VALUE }\n    ) { acc, i ->\n        when {\n            i < acc[0] -> arrayOf(i, acc[0])\n            i in acc[0]..acc[1] -> arrayOf(acc[0], i)\n            else -> acc\n        }\n    }\n\nclass FindTheSmallestTwoElementsInAnArrayTest {\n\n    @Test\n    fun testCase1() {\n        // GIVEN\n        val input = arrayOf(12, 13, 1, 10, 34, 1)\n        val expected = arrayOf(1, 1)\n\n        // WHEN\n        val actual = input.let(::toSmallestTwoElements)\n\n        // THEN\n        assertArrayEquals(expected, actual)\n    }\n\n    @Test\n    fun testCase2() {\n        // GIVEN\n        val input = arrayOf(10, 5, 10)\n        val expected = arrayOf(5, 10)\n\n        // WHEN\n        val actual = input.let(::toSmallestTwoElements)\n\n        // THEN\n        assertArrayEquals(expected, actual)\n    }\n}\n",
  "ruby": "input = [12, 13, 1, 10, 34, 1];\nif input.length() <= 1\n  print \"Array should contain atleast 2 elements\"\nelse\n  sort = input.sort\n  result = \"#{sort[0].to_i},#{sort[1].to_i}\"\n  print result\nend\n",
  "swift": "import Foundation\n\nfunc findSmallestTwoElements(in array: [Int]) -> (Int, Int)? {\n    guard array.count >= 2 else {\n        print(\"Array should have at least two elements.\")\n        return nil\n    }\n\n    var smallest = Int.max\n    var secondSmallest = Int.max\n\n    for number in array {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n\n    return (smallest, secondSmallest)\n}\n\n// Example usage:\nif let result = findSmallestTwoElements(in: [5, 3, 1, 2, 4]) {\n    print(\"The smallest element is \\(result.0) and the second smallest element is \\(result.1)\")\n} else {\n    print(\"Unable to find the smallest two elements.\")\n}\n",
  "typescript": "function findTheSmallestTwoElements(arr: number[]): number[] {\n  if (arr.length < 2) {\n    throw new Error(\"Array should have at least two elemnts.\")\n  }\n\n  const sortedArr = arr.slice().sort((a,b) => a - b);\n  return sortedArr.slice(0, 2);\n}\n\nconst numbers = [5, 2, 8, 1, 7, 3];\nconst smallestTwo = findTheSmallestTwoElements(numbers);\n\nconsole.log(\"Original Array:\", numbers);\nconsole.log(\"Smallest Two Elements:\", smallestTwo);",
  "description": "\n## Write a program to find the smallest two elements in an array\n\n```txt\r\nInput  : arr[] = {12, 13, 1, 10, 34, 1}\r\nOutput : 1 1\r\n\r\nInput  : arr[] = {10, 5, 10}\r\nOutput : 5 10\r\n```\n\n---\n",
  "trackId": 5068,
  "lastUpdated": "2024-06-28T08:08:39Z",
  "contributors": [
    "Riyazul555",
    "harshraj8843",
    "anandfresh",
    "rooksoto",
    "grinish21",
    "MohitKambli",
    "bharathbarma94",
    "zackbmz",
    "Parvezkhan0",
    "jcmlumacad1",
    "Amedi-Imbira",
    "hamzambo",
    "AdeosunDeji"
  ],
  "julia": "array = [10, 4, 3, 50, 23, 90]\nsmallest_element = sort(array)\nprintln(string(smallest_element[1],\",\", smallest_element[2]))\n",
  "scala": "object SmallestTwoElements {\n  def findSmallestTwoElements(arr: Array[Int]): Option[(Int, Int)] = {\n    if (arr.length < 2) {\n      println(\"Array should have at least two elements.\")\n      None\n    } else {\n      var smallest = Int.MaxValue\n      var secondSmallest = Int.MaxValue\n\n      for (num <- arr) {\n        if (num < smallest) {\n          secondSmallest = smallest\n          smallest = num\n        } else if (num < secondSmallest && num != smallest) {\n          secondSmallest = num\n        }\n      }\n\n      Some((smallest, secondSmallest))\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val array = Array(5, 3, 1, 2, 4)\n    findSmallestTwoElements(array) match {\n      case Some((smallest, secondSmallest)) =>\n        println(s\"The smallest element is $smallest and the second smallest element is $secondSmallest\")\n      case None =>\n        println(\"Unable to find the smallest two elements.\")\n    }\n  }\n}\n",
  "dart": "import 'dart:io';\n\nvoid findSmallestTwo(List<int> arr) {\n  if (arr.length < 2) {\n    print(\"Array should have at least two elements.\");\n    return;\n  }\n\n  int smallest = (arr[0] < arr[1]) ? arr[0] : arr[1];\n  int secondSmallest = (arr[0] < arr[1]) ? arr[1] : arr[0];\n\n  for (int i = 2; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = arr[i];\n    } else if (arr[i] < secondSmallest) {\n      secondSmallest = arr[i];\n    }\n  }\n\n  print(\"Smallest two elements in the array: $smallest $secondSmallest\");\n}\n\nvoid main() {\n  print(\"Enter integers for the array separated by space:\");\n  String input = stdin.readLineSync() ?? '';\n  List<int> array = input.split(' ').map((e) => int.tryParse(e) ?? 0).toList();\n\n  findSmallestTwo(array);\n}\n\n\n/*\n\nCommand Prompt Execution:\ndart find_the_smallest_two_elements_in_an_array.dart\nEnter integers for the array separated by space:\n10 11 9 1 20 3\nSmallest two elements in the array: 1 3\n\n*/\n",
  "go": "package main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc main() {\n    fmt.Println(smallestTwoElements([]int{12, 13, 1, 10, 34, 1}))\n    fmt.Println(smallestTwoElements([]int{10, 5, 10}))\n    fmt.Println(smallestTwoElements([]int{10, 10, 10}))\n}\n\nfunc smallestTwoElements(arr []int) []int {\n    // sort the input array in ascending order\n    sort.Sort(sort.IntSlice(arr))\n\n    // return the first 2 elements\n    return arr[:2]\n}\n",
  "haskell": "import Data.List (sort)\n\n-- Function to find the smallest two elements in a list\nfindSmallestTwoElements :: (Ord a) => [a] -> Maybe (a, a)\nfindSmallestTwoElements xs\n    | length xs < 2 = Nothing  -- If the list has fewer than two elements, return Nothing\n    | otherwise     = Just (head sortedList, head (tail sortedList))\n    where sortedList = sort xs  -- Sort the list in ascending order\n\n-- Main function to demonstrate the usage of findSmallestTwoElements\nmain :: IO ()\nmain = do\n    let array = [5, 3, 1, 2, 4]\n    case findSmallestTwoElements array of\n        Just (smallest, secondSmallest) -> putStrLn $ \"The smallest element is \" ++ show smallest ++ \" and the second smallest element is \" ++ show secondSmallest\n        Nothing -> putStrLn \"Unable to find the smallest two elements.\"\n",
  "php": "<?php\nfunction findSmallestTwo($arr) {\n    // Sort the array in ascending order\n    sort($arr);\n\n    // Get the first two elements\n    $smallestTwo = array_slice($arr, 0, 2);\n\n    // Print the result\n    echo \"Smallest two elements: \" . implode(' ', $smallestTwo) . \"\\n\";\n}\n\n// Test cases\n$arr1 = array(12, 13, 1, 10, 34, 1);\n$arr2 = array(10, 5, 10);\n\necho \"Input 1: \" . implode(' ', $arr1) . \"\\n\";\nfindSmallestTwo($arr1);\n\necho \"\\n\";\n\necho \"Input 2: \" . implode(' ', $arr2) . \"\\n\";\nfindSmallestTwo($arr2);\n?>\n",
  "perl": "@input = (12, 13, 1, 10, 34, 1);\n@input = sort { $a <=> $b } @input;\nif(scalar @input < 2){\n    print \"Array should have atleast 2 elements\";\n}else{\n    print \"@input[0],@input[1]\\n\";\n}\n",
  "python": "def main():\n    \"\"\"\n    Return the two smallest elements from a nonempty Python list (array)\n    1. Sort the array\n    2. Return the first two elements from the sorted array\n\n    Asymptotic analsis\n    By sorting the sequence of the elements, elements will be placed next to each other. Therefore\n    1. built in function sorted guarantees a worst case running time of O(n log n)\n    2. return tuple assignment is in constant time O(1)\n\n    \"\"\"\n    seq = [12, 13, 1, 10, 34]  # Test with various sequences\n\n    smallest, second_smallest = find_two_smallest_elements(seq)  # unpacking tuple\n    print(f\"Smallest: {smallest} || Second smallest: {second_smallest}\")\n\n\ndef find_two_smallest_elements(S):\n    S_sorted = sorted(S)\n\n    return (S_sorted[0], S_sorted[1])  # Return in tuple form\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "r": "findSmallestTwo <- function(arr) {\n  n <- length(arr)\n  \n  if (n < 2) {\n    print(\"Array should have at least two elements.\")\n    return(NULL)\n  }\n  \n  # Sort the array in ascending order\n  arr <- sort(arr)\n  \n  # Output the first two elements\n  cat(\"Smallest two elements:\", arr[1], arr[2], \"\\n\")\n}\n\n# Example usage:\narr1 <- c(12, 13, 1, 10, 34, 1)\nfindSmallestTwo(arr1)\n\narr2 <- c(10, 5, 10)\nfindSmallestTwo(arr2)\n",
  "rust": "fn main() {\n\n    // Initialized array\n    let arr = [-4, 0, 2, 1, 11, 23, 57, -10];\n\n    // Printing the array\n    print!(\"Our array: [  \");\n    for val in arr.iter(){\n        print!(\"{}  \", val); \n    }\n    print!(\"]\\n\");\n\n    // Declare and initialize variables to be the first element of array by default \n    let mut smallest_value = arr[0];\n    let mut second_smallest_value = arr[0];\n\n    // Loop to find the smallest value and second smallest value in the array\n    for val in arr.iter(){\n        if *val < smallest_value {\n            second_smallest_value = smallest_value;\n            smallest_value = *val;\n        }   \n    }\n\n    // Printing the smallest value and second smallest value\n    print!(\"smallest_value: {}  second_smallest_value: {} \\n\", smallest_value, second_smallest_value);\n\n\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}