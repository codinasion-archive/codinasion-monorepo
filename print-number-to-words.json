{
  "slug": "print-number-to-words",
  "title": "Print Number To Words",
  "c": "#include<stdlib.h>\n#include<stdio.h>\nint main() {\n long num, div, n1;\n int flag, digit, pos, tot_dig;\n \n printf(\"\\nEnter a number: \");\n scanf(\"%ld\", &num);\n \n if(num == 0) {\n printf(\"Zeron\\n\");\n exit(0);\n }\n \n if(num > 99999) {\n printf(\"please enter a number between 0 and 100000\\n\\n\");\n exit(0);\n }\n \n tot_dig = 0;\n div = 1;\n n1 = num;\n \n while ( n1 > 9 ) {\n n1 = n1 / 10;\n div = div * 10;\n \n tot_dig++;\n }\n \n \n tot_dig++;\n pos = tot_dig;\n \n while ( num != 0 ) {\n digit = num / div;\n num = num % div;\n div = div / 10;\n switch(pos) {\n case 2:\n case 5: \n if ( digit == 1 )\n flag = 1;\n else {\n flag = 0;\n switch(digit) {\n case 2: printf(\"twenty \");break;\n case 3: printf(\"thirty \");break;\n case 4: printf(\"forty \");break;\n case 5: printf(\"fifty \");break;\n case 6: printf(\"sixty \");break;\n case 7: printf(\"seventy \");break;\n case 8: printf(\"eighty \");break;\n case 9: printf(\"ninty \");\n }\n }\n break;\n case 1:\n case 4:\n if (flag == 1) {\n flag = 0;\n switch(digit) {\n case 0 : printf(\"ten \");break;\n case 1 : printf(\"eleven \");break;\n case 2 : printf(\"twelve \");break;\n case 3 : printf(\"thirteen \");break;\n case 4 : printf(\"fourteen \");break;\n case 5 : printf(\"fifteen \");break;\n case 6 : printf(\"sixteen \");break;\n case 7 : printf(\"seventeen \");break;\n case 8 : printf(\"eighteen \");break;\n case 9 : printf(\"nineteen \");\n }\n } else {\n switch(digit) {\n case 1 : printf(\"one \");break;\n case 2 : printf(\"two \");break;\n case 3 : printf(\"three \");break;\n case 4 : printf(\"four \");break;\n case 5 : printf(\"five \");break;\n case 6 : printf(\"six \");break;\n case 7 : printf(\"seven \");break;\n case 8 : printf(\"eight \");break;\n case 9 : printf(\"nine \");\n }\n }\n \n if (pos == 4) \n printf(\"thousand \");\n break;\n \n case 3:\n if (digit > 0) {\n switch(digit) {\n case 1 : printf(\"one \");break;\n case 2 : printf(\"two \");break;\n case 3 : printf(\"three \");break;\n case 4 : printf(\"four \");break;\n case 5 : printf(\"five \");break;\n case 6 : printf(\"six \");break;\n case 7 : printf(\"seven \");break;\n case 8 : printf(\"eight \");break;\n case 9 : printf(\"nine \");\n }\n printf(\"hundred \");\n }\n break;\n }\n pos--;\n }\n if (pos == 4 && flag == 0)\n printf(\"thousand\");\n else if (pos == 4 && flag == 1)\n printf(\"ten thousand\");\n \n if (pos == 1 && flag == 1)\n printf(\"ten \");\n  return 0;\n}\n",
  "c-plus-plus": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\n    string digitName(int digit);\n    string teenName(int number);\n    string tensName(int number);\n    string intName(int number);\n\n    vector<string> ones {\"\",\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    vector<string> teens {\"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"};\n    vector<string> tens {\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"};\n\n    string nameForNumber (long number) {\n        if (number < 10) {\n            return ones[number];\n        } else if (number < 20) {\n            return teens [number - 10];\n        } else if (number < 100) {\n            return tens[number / 10] + ((number % 10 != 0) ? \" \" + nameForNumber(number % 10) : \"\");\n        } else if (number < 1000) {\n            return nameForNumber(number / 100) + \" hundred\" + ((number % 100 != 0) ? \" \" + nameForNumber(number % 100) : \"\");\n        } else if (number < 1000000) {\n            return nameForNumber(number / 1000) + \" thousand\" + ((number % 1000 != 0) ? \" \" + nameForNumber(number % 1000) : \"\");\n        } else if (number < 1000000000) {\n            return nameForNumber(number / 1000000) + \" million\" + ((number % 1000000 != 0) ? \" \" + nameForNumber(number % 1000000) : \"\");\n        } else if (number < 1000000000000) {\n            return nameForNumber(number / 1000000000) + \" billion\" + ((number % 1000000000 != 0) ? \" \" + nameForNumber(number % 1000000000) : \"\");\n        }\n        return \"error\";\n    }\n\n    int main()\n    {\n        long input;\n        do\n        {\n            cout << \"Please enter a positive integer: \";    \n            cin >> input;\n            cout << \"\\n\" << nameForNumber(input) << endl;\n            cout << \"\\n\\n\" << endl;\n            break;\n        }while (input > 0);\n        return 0;\n    }\n",
  "c-sharp": "using System;\nclass NumberToWords\n{\nstatic void Main(string[] args)\n{\nstring[] a = { \"ONE\", \"TWO\", \"THREE\", \"FOUR\", \"FIVE\", \"SIX\", \"SEVEN\", \"EIGHT\", \"NINE\" };\nstring[] b = {\"TEN\", \"ELEVEN\", \"TWELVE\", \"THIRTEEN\", \"FOURTEEN\", \"FIFTEEN\", \"SIXTEEN\", \"SEVENTEEN\", \"EIGHTEEN\", \"NINTEEN\" };\nstring[] c = { \"TEN\", \"TWENTY\", \"THIRTY\", \"FOURTY\", \"FIFTY\", \"SIXTY\", \"SEVENTY\", \"EIGHTY\", \"NINTY\" };\nstring[] d = { \"zero\", \"TEN\", \"HUNDRED\", \"THOUSAND\", \"THOUSAND\", \"LAKHS\", \"LAKHS\", \"CRORES\", \"CRORES\", \"HUNDRED AND\" };\n\nlong number, temp = 0, strlen, value = 0;\nConsole.WriteLine(\"please enter integer \");\nnumber = Convert.ToInt64(Console.ReadLine());\n\nBoolean flag = false;\nif (number <= 9999999999)\n{\nwhile (number >= 0)\n{\nstrlen = number.ToString().Length;\nif (number > 0)\n{\n\nvalue = (long)Math.Pow(10, strlen - 1);\ntemp = number / value;\n\n\n}\n\nswitch (strlen)\n{\ncase 1: Console.Write(\" \" + a[temp - 1] + \" \");\n\nbreak;\ncase 2:\nif (number >= 10 && number < 20)\n{\nnumber = number % value;\nif (number == 0)\n{\nConsole.Write(\" \" + b[number] + \" \");\n}\nelse\n{\nConsole.Write(\" \" + b[number] + \" \");\n}\n\nflag = true;\n\n}\nelse\n{\nConsole.Write(\" \" + c[temp - 1] + \" \");\n}\n\nbreak;\ncase 3:\nConsole.Write(a[temp - 1] + \" \" + d[strlen - 1]);\nbreak;\ncase 4:\ncase 6:\ncase 8:\ncase 10:\nConsole.Write(\" \" + a[temp - 1] + \" \" + d[strlen - 1] + \" \");\nbreak;\ncase 5:\ncase 7:\ncase 9:\ncase 11:\nvalue = (long)Math.Pow(10, strlen - 2);\ntemp = number / value;\nif (temp >= 10 && temp < 20)\n{\ntemp = temp % 10;\nif (temp == 0)\n{\nConsole.Write(\" \" + c[temp] + \" \" + d[strlen - 1] + \" \");\n}\nelse\n{\nConsole.Write(\" \" + b[temp] + \" \" + d[strlen - 1] + \" \");\n\n}\n\n}\nelse\n{\nlong i = temp % 10;\ntemp = temp / 10;\nConsole.Write(\" \" + c[temp - 1] + \" \");\nif (i > 0)\n{\nConsole.Write(\" \" + a[i - 1] + \" \");\n\n}\nConsole.Write(\" \" + d[strlen - 1] + \" \");\n}\nbreak;\n}\nif (number == value)\n{\nConsole.Write(\" \");\nbreak;\n}\nelse\n{\nnumber = number % value;\n}\nif (number == 0 || flag == true)\n{\nbreak;\n}\nflag = false;\n}\n}\nelse\n{\nConsole.WriteLine(\"enter numner less than 9999999999\");\n}\n\n}\n}\n",
  "java": "import java.util.Scanner;\n\npublic class PrintNumberToWords {\n    private static final String[] ONES = {\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    private static final String[] TEENS = {\"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"};\n    private static final String[] TENS = {\"\", \"ten\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"};\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int num = scanner.nextInt();\n\n        System.out.println(numberToWords(num));\n    }\n\n    public static String numberToWords(int num) {\n        if (num == 0) {\n            return \"zero\";\n        }\n        if (num < 0) {\n            return \"minus \" + numberToWords(-num);\n        }\n\n        String words = \"\";\n\n        if ((num / 1000000) > 0) {\n            words += numberToWords(num / 1000000) + \" million \";\n            num %= 1000000;\n        }\n\n        if ((num / 1000) > 0) {\n            words += numberToWords(num / 1000) + \" thousand \";\n            num %= 1000;\n        }\n\n        if ((num / 100) > 0) {\n            words += numberToWords(num / 100) + \" hundred \";\n            num %= 100;\n        }\n\n        if (num > 0) {\n            if (num < 10) {\n                words += ONES[num];\n            } else if (num < 20) {\n                words += TEENS[num - 10];\n            } else {\n                words += TENS[num / 10];\n                if ((num % 10) > 0) {\n                    words += \" \" + ONES[num % 10];\n                }\n            }\n        }\n\n        return words;\n    }\n}\n",
  "javascript": "function numberToEnglish(n) {\n  var string = n.toString(),\n    units,\n    tens,\n    scales,\n    start,\n    end,\n    chunks,\n    chunksLen,\n    chunk,\n    ints,\n    i,\n    word,\n    words,\n    and = \"and\";\n\n  /* Remove spaces and commas */\n  string = string.replace(/[, ]/g, \"\");\n\n  /* Is number zero? */\n  if (parseInt(string) === 0) {\n    return \"zero\";\n  }\n\n  /* Array of units as words */\n  units = [\n    \"\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"ten\",\n    \"eleven\",\n    \"twelve\",\n    \"thirteen\",\n    \"fourteen\",\n    \"fifteen\",\n    \"sixteen\",\n    \"seventeen\",\n    \"eighteen\",\n    \"nineteen\",\n  ];\n\n  /* Array of tens as words */\n  tens = [\n    \"\",\n    \"\",\n    \"twenty\",\n    \"thirty\",\n    \"forty\",\n    \"fifty\",\n    \"sixty\",\n    \"seventy\",\n    \"eighty\",\n    \"ninety\",\n  ];\n\n  /* Array of scales as words */\n  scales = [\n    \"\",\n    \"thousand\",\n    \"million\",\n    \"billion\",\n    \"trillion\",\n    \"quadrillion\",\n    \"quintillion\",\n    \"sextillion\",\n    \"septillion\",\n    \"octillion\",\n    \"nonillion\",\n    \"decillion\",\n    \"undecillion\",\n    \"duodecillion\",\n    \"tredecillion\",\n    \"quatttuor-decillion\",\n    \"quindecillion\",\n    \"sexdecillion\",\n    \"septen-decillion\",\n    \"octodecillion\",\n    \"novemdecillion\",\n    \"vigintillion\",\n    \"centillion\",\n  ];\n\n  /* Split user argument into 3 digit chunks from right to left */\n  start = string.length;\n  chunks = [];\n  while (start > 0) {\n    end = start;\n    chunks.push(string.slice((start = Math.max(0, start - 3)), end));\n  }\n\n  /* Check if function has enough scale words to be able to stringify the user argument */\n  chunksLen = chunks.length;\n  if (chunksLen > scales.length) {\n    return \"\";\n  }\n\n  /* Stringify each integer in each chunk */\n  words = [];\n  for (i = 0; i < chunksLen; i++) {\n    chunk = parseInt(chunks[i]);\n\n    if (chunk) {\n      /* Split chunk into array of individual integers */\n      ints = chunks[i].split(\"\").reverse().map(parseFloat);\n\n      /* If tens integer is 1, i.e. 10, then add 10 to units integer */\n      if (ints[1] === 1) {\n        ints[0] += 10;\n      }\n\n      /* Add scale word if chunk is not zero and array item exists */\n      if ((word = scales[i])) {\n        words.push(word);\n      }\n\n      /* Add unit word if array item exists */\n      if ((word = units[ints[0]])) {\n        words.push(word);\n      }\n\n      /* Add tens word if array item exists */\n      if ((word = tens[ints[1]])) {\n        words.push(word);\n      }\n\n      /* Add 'and' string after units or tens integer if: */\n      if (ints[0] || ints[1]) {\n        /* Chunk has a hundreds integer or chunk is the first of multiple chunks */\n        if (ints[2] || (!i && chunksLen)) {\n          words.push(and);\n        }\n      }\n\n      /* Add hundreds word if array item exists */\n      if ((word = units[ints[2]])) {\n        words.push(word + \" hundred\");\n      }\n    }\n  }\n\n  return words.reverse().join(\" \");\n}\n\n// - - - - - Tests - - - - - -\nfunction test(v) {\n  var sep = \"string\" == typeof v ? '\"' : \"\";\n  console.log(numberToEnglish(v));\n}\n\ntest(123456789);\n",
  "kotlin": "import java.util.*\n\nfun numberToWords(number: Long): String {\n    if (number == 0L) return \"Zero\"\n\n    val units = arrayOf(\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val teens = arrayOf(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n    val tens = arrayOf(\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n    val thousands = arrayOf(\"\", \"Thousand\", \"Million\", \"Billion\", \"Trillion\")\n\n    fun convertToWords(num: Long): String {\n        if (num == 0L) return \"\"\n        var result = \"\"\n        val hundred = num / 100\n        val remainder = num % 100\n\n        if (hundred > 0) {\n            result += units[hundred.toInt()] + \" Hundred\"\n        }\n\n        if (remainder != 0L) {\n            if (hundred > 0) result += \" \"\n            if (remainder < 10) {\n                result += units[remainder.toInt()]\n            } else if (remainder < 20) {\n                result += teens[(remainder - 10).toInt()]\n            } else {\n                result += tens[(remainder / 10).toInt()]\n                if (remainder % 10 != 0L) {\n                    result += \" \" + units[(remainder % 10).toInt()]\n                }\n            }\n        }\n        return result\n    }\n\n    val parts = mutableListOf<String>()\n    var num = number\n    for (i in 0 until 5) {\n        val part = convertToWords(num % 1000)\n        if (part.isNotEmpty()) {\n            parts.add(part + \" \" + thousands[i])\n        }\n        num /= 1000\n    }\n    return parts.reversed().joinToString(\" \").trim()\n}\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    print(\"Enter a number: \")\n    val number = scanner.nextLong()\n    println(\"Input  : $number\")\n    println(\"Output : ${numberToWords(number)}\")\n}\n",
  "typescript": "function numberToEnglish(num: number) {\n  let strNum = num.toString(),\n    units: string[],\n    tens: string[],\n    scales: string[],\n    start: number,\n    end: number,\n    chunks: string[],\n    chunksLen: number,\n    chunk: number,\n    ints: number[],\n    i: number,\n    word: string,\n    words: string[],\n    and = \"and\";\n\n  /* Remove spaces and commas */\n  strNum = strNum.replace(/[, ]/g, \"\");\n\n  /* Is number zero? */\n  if (parseInt(strNum) === 0) {\n    return \"zero\";\n  }\n\n  /* Array of units as words */\n  units = [\n    \"\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"ten\",\n    \"eleven\",\n    \"twelve\",\n    \"thirteen\",\n    \"fourteen\",\n    \"fifteen\",\n    \"sixteen\",\n    \"seventeen\",\n    \"eighteen\",\n    \"nineteen\",\n  ];\n\n  /* Array of tens as words */\n  tens = [\n    \"\",\n    \"\",\n    \"twenty\",\n    \"thirty\",\n    \"forty\",\n    \"fifty\",\n    \"sixty\",\n    \"seventy\",\n    \"eighty\",\n    \"ninety\",\n  ];\n\n  /* Array of scales as words */\n  scales = [\n    \"\",\n    \"thousand\",\n    \"million\",\n    \"billion\",\n    \"trillion\",\n    \"quadrillion\",\n    \"quintillion\",\n    \"sextillion\",\n    \"septillion\",\n    \"octillion\",\n    \"nonillion\",\n    \"decillion\",\n    \"undecillion\",\n    \"duodecillion\",\n    \"tredecillion\",\n    \"quatttuor-decillion\",\n    \"quindecillion\",\n    \"sexdecillion\",\n    \"septen-decillion\",\n    \"octodecillion\",\n    \"novemdecillion\",\n    \"vigintillion\",\n    \"centillion\",\n  ];\n\n  /* Split user argument into 3 digit chunks from right to left */\n  start = strNum.length;\n  chunks = [];\n  while (start > 0) {\n    end = start;\n    chunks.push(strNum.slice((start = Math.max(0, start - 3)), end));\n  }\n\n  /* Check if function has enough scale words to be able to stringify the user argument */\n  chunksLen = chunks.length;\n  if (chunksLen > scales.length) {\n    return \"\";\n  }\n\n  /* Stringify each integer in each chunk */\n  words = [];\n  for (i = 0; i < chunksLen; i++) {\n    chunk = parseInt(chunks[i]);\n\n    if (chunk) {\n      /* Split chunk into array of individual integers */\n      ints = chunks[i].split(\"\").reverse().map(parseFloat);\n\n      /* If tens integer is 1, i.e. 10, then add 10 to units integer */\n      if (ints[1] === 1) {\n        ints[0] += 10;\n      }\n\n      /* Add scale word if chunk is not zero and array item exists */\n      if ((word = scales[i])) {\n        words.push(word);\n      }\n\n      /* Add unit word if array item exists */\n      if ((word = units[ints[0]])) {\n        words.push(word);\n      }\n\n      /* Add tens word if array item exists */\n      if ((word = tens[ints[1]])) {\n        words.push(word);\n      }\n\n      /* Add 'and' string after units or tens integer if: */\n      if (ints[0] || ints[1]) {\n        /* Chunk has a hundreds integer or chunk is the first of multiple chunks */\n        if (ints[2] || (!i && chunksLen > 2)) {\n          words.push(and);\n        }\n      }\n\n      /* Add hundreds word if array item exists */\n      if ((word = units[ints[2]])) {\n        words.push(word + \" hundred\");\n      }\n    }\n  }\n\n  return words.reverse().join(\" \");\n}\n\n// - - - - - Tests - - - - - -\nfunction test(num: number) {\n  console.log(numberToEnglish(num));\n}\n\ntest(123456789);\n",
  "description": "\n## Write a program to print number to words\n\n```txt\nInput  : 123456789\nOutput : One Hundred Twenty Three Million Four Hundred Fifty Six Thousand Seven Hundred Eighty Nine\n```\n\n---\n",
  "trackId": 2613,
  "lastUpdated": "2024-03-15T17:52:25Z",
  "contributors": [
    "Sheventon",
    "harshraj8843",
    "AshitaSingamsetty",
    "rsitters",
    "Ariel201711",
    "anandfresh",
    "mitrofmep",
    "joao-vitor-souza",
    "PravunathSingh",
    "manyadua16"
  ],
  "go": "package main\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\nvar(\n\tonesMap = map[int]string {0: \"\", 1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\", 5: \"five\", 6: \"six\", 7: \"seven\", 8: \"eight\", 9: \"nine\"}\n\tteensMap = map[int]string {11: \"eleven\", 12: \"twelve\", 13: \"thirteen\", 14: \"fourteen\", 15: \"fifteen\", 16: \"sixteen\", 17: \"seventeen\", 18: \"eighteen\", 19: \"nineteen\"}\n\ttensMap = map[int]string {1: \"ten\", 2: \"twenty\", 3: \"thirty\", 4: \"forty\", 5: \"fifty\", 6: \"sixty\", 7: \"seventy\", 8: \"eighty\", 9: \"ninety\"}\n)\nfunc numberToWords (num int) string{\n\tif (num == 0) {\n            return \"zero\";\n        }\n        if (num < 0) {\n            return \"minus \" + numberToWords(-num);\n        }\n        result := \"\";\n        if ((num / 1000000) > 0) {\n            result += numberToWords(num / 1000000) + \" million \";\n            num %= 1000000;\n        }\n        if ((num / 1000) > 0) {\n            result += numberToWords(num / 1000) + \" thousand \";\n            num %= 1000;\n        }\n        if ((num / 100) > 0) {\n            result += numberToWords(num / 100) + \" hundred \";\n            num %= 100;\n        }\n        if (num > 0) {\n            if (num < 10) {\n                result += onesMap[num];\n            } else if (num < 20) {\n                result += teensMap[num - 10];\n            } else {\n                result += tensMap[num / 10];\n                if ((num % 10) > 0) {\n                    result += \" \" + onesMap[num % 10];\n                }\n            }\n        }\n\treturn result\n}\nfunc main() {\n\tfmt.Print(\"Input : \")\n\tvar input string\n\tfmt.Scanln(&input)\n\tnum, _ := strconv.Atoi(input)\n\twords := numberToWords(num)\n\tfmt.Printf(\"Output : %s\\n\", words)\n}",
  "php": "<?php\nfunction numberToWords($number) {\n    $ones = array(\n        0 => '',\n        1 => 'One',\n        2 => 'Two',\n        3 => 'Three',\n        4 => 'Four',\n        5 => 'Five',\n        6 => 'Six',\n        7 => 'Seven',\n        8 => 'Eight',\n        9 => 'Nine',\n        10 => 'Ten',\n        11 => 'Eleven',\n        12 => 'Twelve',\n        13 => 'Thirteen',\n        14 => 'Fourteen',\n        15 => 'Fifteen',\n        16 => 'Sixteen',\n        17 => 'Seventeen',\n        18 => 'Eighteen',\n        19 => 'Nineteen'\n    );\n    $tens = array(\n        2 => 'Twenty',\n        3 => 'Thirty',\n        4 => 'Forty',\n        5 => 'Fifty',\n        6 => 'Sixty',\n        7 => 'Seventy',\n        8 => 'Eighty',\n        9 => 'Ninety'\n    );\n    \n    if ($number == 0) {\n        return 'Zero';\n    }\n    \n    $words = '';\n    \n    if ($number < 0) {\n        $words .= 'Negative ';\n        $number = abs($number);\n    }\n    \n    if ($number < 20) {\n        $words .= $ones[$number];\n    } elseif ($number < 100) {\n        $words .= $tens[floor($number / 10)];\n        $remainder = $number % 10;\n        if ($remainder > 0) {\n            $words .= ' ' . $ones[$remainder];\n        }\n    } elseif ($number < 1000) {\n        $words .= $ones[floor($number / 100)] . ' Hundred';\n        $remainder = $number % 100;\n        if ($remainder > 0) {\n            $words .= ' ' . numberToWords($remainder);\n        }\n    } elseif ($number < 1000000) {\n        $words .= numberToWords(floor($number / 1000)) . ' Thousand';\n        $remainder = $number % 1000;\n        if ($remainder > 0) {\n            $words .= ' ' . numberToWords($remainder);\n        }\n    } elseif ($number < 1000000000) {\n        $words .= numberToWords(floor($number / 1000000)) . ' Million';\n        $remainder = $number % 1000000;\n        if ($remainder > 0) {\n            $words .= ' ' . numberToWords($remainder);\n        }\n    } else {\n        $words .= numberToWords(floor($number / 1000000000)) . ' Billion';\n        $remainder = $number % 1000000000;\n        if ($remainder > 0) {\n            $words .= ' ' . numberToWords($remainder);\n        }\n    }\n    \n    return $words;\n}\n\n//test\n$number = 123456789;\n$result = numberToWords($number);\necho \"Input : $number\\n\";\necho \"Output: $result\\n\";\n?>\n",
  "python": "import inflect\n\nprint(inflect.engine().number_to_words(int(input())).title())\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "typescript",
    "go",
    "php",
    "python"
  ]
}