{
  "slug": "print-fibonacci-series-without-recursion",
  "title": "Print Fibonacci Series Without Recursion",
  "c": "#include <stdio.h>\nint main() {\n  int i, n;\n  int t1 = 0, t2 = 1;\n  scanf(\"%d\", &n);\n  printf(\"%d %d \", t1, t2);\n    int nextTerm = t1 + t2;\n  // print 3rd to nth terms\n  for (i = 3; i <= n; ++i) {\n    printf(\"%d \", nextTerm);\n    t1 = t2;\n    t2 = nextTerm;\n    nextTerm = t1 + t2;\n  }\n  return 0;\n}\n",
  "c-plus-plus": "#include <bits/stdc++.h>\nusing namespace std;\n\nvector<int> fibonacciWithoutRecursion(int n)\n{\n  vector<int> fib(n);\n  int i;\n\n  fib[0] = 0;\n  fib[1] = 1;\n\n  for (i = 2; i < n; i++)\n  {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib;\n}\n\nint main()\n{\n  int n=5;\n\n  for(auto i: fibonacciWithoutRecursion(n))\n  {\n    cout << i << \" \";\n  }\n  \n  return 0;\n}\n\n//Output:\n// 0 1 1 2 3",
  "c-sharp": "using System;  \n  public class FibonacciSeries \n   {  \n     public static void Main(string[] args)  \n      {  \n         int n1=0,n2=1,n3,i,number;    \n         Console.Write(\"Enter the number of elements: \");    \n         number = int.Parse(Console.ReadLine());  \n         Console.Write(n1+\" \"+n2+\" \");    \n         for(i=2;i<number;++i)   \n         {    \n          n3=n1+n2;    \n          Console.Write(n3+\" \");    \n          n1=n2;    \n          n2=n3;    \n         }    \n      }  \n   }  \n",
  "java": "import java.util.Scanner;\n\nclass PrintFibonacciSeriesWithoutRecursion {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter number : \");\n        int n = scanner.nextInt();\n\n        int a = 0, b = 1, c;\n        System.out.print(a + \" \" + b + \" \");\n        \n        for (int i = 2; i < n; i++) {\n            c = a + b;\n            System.out.print(c + \" \");\n            a = b;\n            b = c;\n        }\n    }\n}",
  "javascript": "const number = 5;\n\nfunction fibonacci(num) {\n  let fib = [0, 1];\n  let data = [];\n  for (let i = 2; i <= num; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    data.push(fib[i]);\n  }\n  return [0, 1].concat(data);\n}\n\nconsole.log(\"Number : \", number);\nconsole.log(\"Output : \", fibonacci(number));\n",
  "ruby": "puts \"Please enter a number: \"\ninput_number = gets.to_i\n\ndef printFibonacciSeriesWithoutRecursion number\n    fibonacciSequence = [0,1]\n\n    for index in 2..number-1 do\n        fibonacciSequence[index] = fibonacciSequence[index-1] + fibonacciSequence[index-2]\n    end\n\n    print \"The Fibonacci Series for the Number #{number} is #{fibonacciSequence.join(\" \")}\"\nend\n\nputs printFibonacciSeriesWithoutRecursion(input_number)\n",
  "swift": "import Foundation\nimport Glibc\n\nfunc fibonacciSeries(num: Int) -> Int{\n   // The value of 0th and 1st number of the fibonacci series are 0 and 1\n   var n1 = 0\n   var n2 = 1\n\n   // To store the result\n   var nR = 0\n   // Adding two previous numbers to find ith number of the series\n   for _ in 0..<num{\n      nR = n1 \n      n1 = n2\n      n2 = nR + n2\n   }\n   return n1\n}\n\nvar val = 10\n\n// Iterate for every number stating from 0 to val\nfor j in 0...val{\n   let output = fibonacciSeries(num: j)\n   print(output)\n} \n",
  "typescript": "const number = 5;\n\nfunction fibonacci(num: number) {\n  const fib = [0, 1];\n  const data: number[] = [];\n  for (let i = 2; i <= num; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    data.push(fib[i]);\n  }\n  return [0, 1].concat(data);\n}\n\nconsole.log(\"Number : \", number);\nconsole.log(\"Output : \", fibonacci(number));\n",
  "description": "\n## Write a program to print fibonacci series without recursion\n\n```txt\nInput  : 5\nOutput : 0 1 1 2 3\n```\n\n---\n",
  "trackId": 2109,
  "lastUpdated": "2024-02-19T07:14:59Z",
  "contributors": [
    "anandfresh",
    "harshraj8843",
    "Ariel201711",
    "jfinley6",
    "joao-vitor-souza",
    "rahmat-dev",
    "grraghav120",
    "TrentGlimp",
    "auleki",
    "icanhaskick",
    "hemantsuteri",
    "YaSh8202",
    "djharshit",
    "anastazir",
    "Ipankaj07"
  ],
  "julia": "a = 0\nb = 1\nitr = 0\npos  = parse(UInt8, readline())\n\nwhile itr < pos\n    print(a, \" \")\n    c = a + b\n    global a = b\n    global b = c\n    global itr += 1\nend\n",
  "dart": "void main() {\n  printFibonacciSeries(5);\n}\n\nvoid printFibonacciSeries(int n) {\n  int p1 = 0, p2 = 1, p3;\n  print('$p1');\n  print('$p2');\n  for (int i = 2; i < n; i++) {\n    p3 = p1 + p2;\n    print('$p3');\n    p1 = p2;\n    p2 = p3;\n  }\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc fibonacci(n int) {\n\ta := 0\n\tb := 1\n\ttemp := 0\n\n\tfmt.Printf(\"Input: %d\\nOutput: \", n)\n\tfor i := 0; i < n; i++ {\n\t\tfmt.Printf(\"%d \", a)\n\t\ttemp = b\n\t\tb += a\n\t\ta = temp\n\t}\n\n}\n\nfunc main() {\n\tvar number int\n\tfmt.Scanln(&number)\n\tfibonacci(number)\n}\n",
  "php": "<?php\n\nfunction fibonacci($length) {\n  $data = [];\n\n  for ($i = 0; $i < $length; $i++) { \n    if ($i === 0) {\n      $data[] = 0;\n    } else if ($i === 1) {\n      $data[] = 1;\n    } else {\n      $data[] = $data[$i - 1] + $data[$i - 2];\n    }\n  }\n\n  return implode(\" \", $data);\n}\n\necho fibonacci(5);\n",
  "perl": "print \"Enter an integer: \";\n$n=<STDIN>;\n$f1=0;\n$f2=1;\nprint \"Fibonacci series of given input :\\n\";\nif($n==1)\n{\nprint \"0\\n\";\n}\nelsif($n==2)\n{\nprint \"0\\n1\\n\";\n}\nelsif($n>2)\n{\nprint \"0\\n1\\n\";\n$f3=$f1+$f2;\nprint \"$f3\\n\";\nfor($i=2;$i<$n;$i++)\n{\n$f1=$f2;\n$f2=$f3;\n$f3=$f1+$f2;\nprint \"$f3\\n\";\n}\n}\n",
  "python": "terms = int(input(\"Enter the number of terms:\"))\nf, s = 0, 1\nprint(\"Fibonacci series are:\")\nprint(f, s, end=\" \")\n\nwhile terms - 2:\n    t = f + s\n    f = s\n    s = t\n    print(t, end=\" \")\n    terms = terms - 1\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "dart",
    "go",
    "php",
    "perl",
    "python"
  ]
}