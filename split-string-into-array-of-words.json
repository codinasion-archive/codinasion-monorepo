{
  "slug": "split-string-into-array-of-words",
  "title": "Split String Into Array Of Words",
  "description": "\n## Write a program to split string into array of words\n\n```txt\nInput  : \"hello world\"\nOutput : [\"hello\", \"world\"]\n```\n\n---\n",
  "trackId": 5638,
  "lastUpdated": "2023-08-03T20:39:16Z",
  "contributors": [
    "harshraj8843",
    "abhisek-1221",
    "Preetiraj3697",
    "ANUSHRAV01",
    "ashish07-07",
    "WHJang-0421",
    "james-tharit",
    "patel-aum",
    "hi-Kartik2004",
    "anandfresh",
    "sahilg2931",
    "vedantpople4",
    "loesking",
    "hugosmoreira",
    "grraghav120",
    "dineshlalam15",
    "Varun-Dhruv"
  ],
  "c": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char input[] = \"hello world\";\n    char **words = malloc(sizeof(char*) * strlen(input));\n    int word_count = 0;\n    char *token = strtok(input, \" \");\n    while (token != NULL) {\n        words[word_count] = malloc(sizeof(char) * (strlen(token) + 1));\n        strcpy(words[word_count], token);\n        word_count++;\n        token = strtok(NULL, \" \");\n    }\n    for (int i = 0; i < word_count; i++) {\n        printf(\"%s\\n\", words[i]);\n        free(words[i]);\n    }\n    free(words);\n    return 0;\n}\n",
  "c-plus-plus": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main()\n{\n    string s,res=\"\";\n    getline(cin,s);\n    vector<string> ans;\n    for(int i=0;i<s.size();i++){\n        if(s[i]==' '){\n            ans.push_back(res);\n            res=\"\";\n        }\n        else res+=s[i];\n    }\n    ans.push_back(res);\n    for(auto &it: ans) cout<<it<<'\\n';\n    return 0;\n}",
  "c-sharp": "using System;\nclass SPLIT {\n      \n    static void Main(string[] args)\n    {\n        String str = \"hello world\";\n        char[] spearator = { ' ' };\n        String[] strlist = str.Split(spearator);\n        \n        foreach(String s in strlist)\n        {\n            Console.WriteLine(s);\n        }\n        Console.ReadKey();\n    }\n}\n",
  "f-sharp": "let splitIntoWords (str: string) =\n    str.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n\n// Example usage\nlet words = splitIntoWords \"hello world\"\nprintfn \"%A\" words // Output: [|\"hello\"; \"world\"|]\n",
  "java": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class SplitStringIntoArrayOfWords {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter the String: \");\n        String str = sc.nextLine();\n        System.out.println(Arrays.toString(splitString(str)));\n    }\n    static String [] splitString(String str){\n        String [] result = str.split(\" \");\n        return result;\n    }\n}\n",
  "javascript": "function stringToArray(str) {\n  return str.split(\" \");\n}\n\nconsole.log(stringToArray(\"hello world\"));\n",
  "kotlin": "import java.util.Scanner\n\nfun main() {\n    val input = Scanner(System.`in`)\n    print(\"Enter a string: \")\n    var string: String = input.nextLine()\n    var splitString = string.split(\" \")\n    print(splitString)\n}\n\n",
  "ruby": "def stringToArray(string) \n  string.split(' ')\nend \n \nprint stringToArray(\"hello world\")\n",
  "swift": "if let str = readLine() {\n   print(\"String of array is  \\(str.split(separator: \" \"))\")\n}\n",
  "typescript": "const SplitStringIntoArrayOfWords = (s: string): string[] => {\n  const arrayOfWords: string[] = s.split(\" \");\n  return arrayOfWords;\n};\nexport default SplitStringIntoArrayOfWords;\n",
  "julia": "function split_string(text::String)\n    words = split(text)\n    return words\nend\n\ntext = \"Hello World\"\nwords = split_string(text)\nprintln(words)\n\n",
  "scala": "object Main {\n    def main(args: Array[String]) {\n        print(\"Enter a string: \")\n        val input = Console.in.readLine()\n        val output = input.split(\" \")\n        println(output.mkString(\"[\", \", \", \"]\"))\n    }\n}\n",
  "dart": "import 'dart:io';\n\nvoid main() {\n  print('Enter a string:');\n  String? input = stdin.readLineSync();\n  List<String>? words = input?.split(' ');\n  print(words);\n}\n",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc splitStringIntoArray(str string) {\n\tarr := strings.Split(str, \" \")\n\tsemiformat := fmt.Sprintf(\"%q\\n\", arr)\n\ttokens := strings.Split(semiformat, \" \")\n\tfmt.Printf(strings.Join(tokens, \", \"))\n}\n\nfunc main() {\n\tstr := \"hello world\"\n\tsplitStringIntoArray(str)\n}\n",
  "haskell": "main = do\n  putStrLn \"Insert a string to convert: \"\n  line <- getLine\n  print (words line)",
  "php": "<?php\n\nfunction string2Array($str) {\n print_r(explode(\" \", $str));\n}\n\nstring2Array('hello world');\n\n?>\n",
  "perl": "my $str ='hello world';\nmy @arr=split (/ /, $str);\nprint \"@arr\";\n",
  "python": "print(input().split(\" \"))\n",
  "r": "string <- \"hello world\"\nwords <- strsplit(string, \" \")[[1]]\nresult <- paste(shQuote(words), collapse=\", \")\ncat(sprintf(\"[%s]\", result))\n",
  "rust": "fn split_string(s: &str) -> Vec<&str> {\n  s.split_whitespace().collect()\n}\n\nfn main() {\n  let s = \"hello world\";\n  let words = split_string(s);\n  println!(\"{:?}\", words);\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}