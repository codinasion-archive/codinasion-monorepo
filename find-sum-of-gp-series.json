{
  "slug": "find-sum-of-gp-series",
  "title": "Find Sum Of Gp Series",
  "c": "#include <stdio.h>\n#include <math.h>\n\nint main()\n{\n    int a, r, n;\n    printf(\"Enter first number of the GP series : \");\n    scanf(\"%d\", &a);\n    printf(\"Enter the common ratio of the GP series : \");\n    scanf(\"%d\", &r);\n    printf(\"Enter the length of the series : \");\n    scanf(\"%d\", &n);\n\n    float power = pow(r, n);\n    float ans = (a * (power - 1) / (n - 1));\n\n    printf(\"The sum of the given GP series is: %f \\n\", ans);\n}",
  "c-plus-plus": "//Programme to calculate the sum of Gp series.\n// Formula --> (a(r^n - 1))/ (n -1)\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nll solve(){\n\n    return 0;\n}\nint main(){\n    float a,r,n;  \n    // here a--> first number of the Gp series.\n    // r--> common ratio.\n    // n --> the limit of the series.\n\n    //Taking input;\n    cout<<\"Enter first number of the GP series : \";\n    cin>>a;\n    cout<<\"Enter the common ratio of the GP series : \";\n    cin>>r;\n    cout<<\"Enter the length of the series : \";\n    cin>>n;\n    \n    // Calculations;\n    float power = pow(r,n);\n    float ans = (a*(power - 1)/(n-1)); \n\n    //Return ans;\n    cout<<\"The sum of the given GP series is: \" <<ans<<endl;\n    return 0;\n}\n\n/*\nContributed by : Kartikeya Saini\n*/",
  "c-sharp": "using System;\nclass GP {\n    static float sumOfGP(float a, float r, int n)\n    {\n        float sum = 0; \n        for (int i = 0; i < n; i++)\n        {\n            sum = sum + a;\n            a = a * r;\n        }\n        return sum;\n    }\n\n    static public void Main ()\n    {\n        Console.WriteLine((sumOfGP(2, 3, 3)));\n    }\n}\n",
  "f-sharp": "open System\n\nlet sumOfGP (a: float) (r: float) (n: int) : float =\n    if r = 1.0 then float n * a\n    else a * (pown r n - 1.0) / (r - 1.0)\n\n// Function to safely parse float values\nlet tryParseFloat (str: string) : Option<float> =\n    match Double.TryParse(str) with\n    | (true, value) -> Some value\n    | _ -> None\n\n// Function to safely parse int values\nlet tryParseInt (str: string) : Option<int> =\n    match Int32.TryParse(str) with\n    | (true, value) -> Some value\n    | _ -> None\n\n// Read inputs from user\nprintfn \"Enter the first term (a):\"\nlet a = \n    match Console.ReadLine() |> tryParseFloat with\n    | Some value -> value\n    | None -> failwith \"Invalid input for the first term\"\n\nprintfn \"Enter the common ratio (r):\"\nlet r = \n    match Console.ReadLine() |> tryParseFloat with\n    | Some value -> value\n    | None -> failwith \"Invalid input for the common ratio\"\n\nprintfn \"Enter the number of terms (n):\"\nlet n = \n    match Console.ReadLine() |> tryParseInt with\n    | Some value -> value\n    | None -> failwith \"Invalid input for the number of terms\"\n\n// Calculate and print the sum\nprintfn \"Sum of GP series: %f\" (sumOfGP a r n)",
  "java": "/* Author: Shashank Gurunaga */\nimport java.lang.Math;\nimport java.util.*;\n\npublic class findgpseriessum {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        float a0, r, i, an;\n        int n;\n        float sum = 0;\n\n        System.out.println(\"Enter the first number in the G.P. series: \");\n        a0 = scanner.nextFloat();\n        System.out.println(\"Enter the number of digits  in the G.P. series \");\n        n = scanner.nextInt();\n        System.out.print(\"Enter the  ratio of G.P. series \");\n        r = scanner.nextFloat();\n\n        sum = (float) ((a0 * (1 - Math.pow(r, n + 1))) / (1 - r));\n        an = (float) (a0 * (1 - Math.pow(r, n - 1)));\n\n        System.out.println(\"nth term of G.P:\" + an);\n        System.out.println(\"Sum of the G.P:\" + sum);\n    }\n}\n",
  "javascript": "function sumOfGpSeries(firstTerm, commonRatio, numOfTerms) {\n  if (Number.isFinite(numOfTerms)) {\n    if (commonRatio === 1) return firstTerm * numOfTerms;\n    else {\n      return (\n        (firstTerm * (Math.pow(commonRatio, numOfTerms) - 1)) /\n        (commonRatio - 1)\n      );\n    }\n  } else {\n    if (Math.abs(commonRatio) < 1) return firstTerm / (1 - commonRatio);\n    else {\n      throw \"The Geometric progression is diverging and hence its sum cannot be calculated\";\n    }\n  }\n}\n\n// console.log(sumOfGpSeries(1, 1, 5))\n// console.log(sumOfGpSeries(1, 2, 5))\n// console.log(sumOfGpSeries(0.5, 20, Infinity))\n",
  "kotlin": "fun main() {\n    val a1 = 2 // First term of the GP\n    val r = 3  // Common ratio of the GP\n    val n = 3  // Number of terms in the series\n\n    val sum = findSumOfGP(a1, r, n)\n    println(\"Sum of the GP series: $sum\")\n}\n\nfun findSumOfGP(a1: Int, r: Int, n: Int): Int {\n    // Formula to find the sum of a GP: S = a * (1 - r^n) / (1 - r)\n    val sum = a1 * (1 - Math.pow(r.toDouble(), n.toDouble()).toInt()) / (1 - r)\n    return sum\n}\n",
  "ruby": "def sum_of_gp(a1, r, n)\n  \n  sum = a1 * (r**n - 1) / (r - 1)\n  return sum\nend\n\n\na1 = 2\nr = 3\nn = 3\n\n\nputs \"Sum of the GP series: #{sum_of_gp(a1, r, n)}\"\n",
  "swift": "import Foundation\n\nfunc sumOfGP(a1: Double, r: Double, n: Int) -> Double {\n    if r == 1 {\n        // If the common ratio is 1, use the simple formula for sum of n terms of an AP\n        return a1 * Double(n)\n    } else {\n        // Calculate the sum using the GP sum formula\n        return a1 * (1 - Foundation.pow(r, Double(n))) / (1 - r)\n    }\n}\n\n// Example usage with the given input\nlet a1 = 2.0   // First term\nlet r = 3.0    // Common ratio\nlet n = 3      // Number of terms\n\nlet result = sumOfGP(a1: a1, r: r, n: n)\nprint(\"Sum of the GP series:\", result)\n",
  "typescript": "function sumOfGP(a1: number, r: number, n: number): number {\n  // Calculate the sum of the first n terms of the geometric progression\n  const sum = (a1 * (1 - Math.pow(r, n))) / (1 - r);\n\n  return sum;\n}\n\nconsole.log(sumOfGP(2, 3, 3));\n\n//contributed by peleg mazuz\n",
  "description": "\n## Write a program to find sum of gp series\n\nA geometric progression (GP) is a sequence of numbers where each term after the first is found by multiplying the previous one by a fixed, non-zero number called the common ratio. The nth term of a GP is given by the formula a<sub>n</sub> = a<sub>1</sub>r<sup>n-1</sup> where a<sub>1</sub> is the first term and r is the common ratio.\n\n```txt\nInput  : 2, 3, 3\nOutput : 54\n```\n\n---\n",
  "trackId": 4971,
  "lastUpdated": "2024-03-28T05:01:43Z",
  "contributors": [
    "jcmlumacad1",
    "SaideepKondur",
    "Shreyash3110",
    "shaurya-clemson",
    "vamsipasam2000",
    "Rohan-Kalgutkar",
    "bhushanmarathe",
    "Monika-Tiyyagura",
    "harshraj8843",
    "AshitaSingamsetty",
    "anandfresh",
    "AdityaNarayanPradhan",
    "pritish1906",
    "pelegsch666",
    "shashankgurunaga1",
    "leslieyip02",
    "Medmly20208",
    "hi-Kartik2004"
  ],
  "julia": "function find_sum_of_gp_series(a, r, n)\n    if r == 1\n        return a * n\n    else\n        return a * (1 - r^n) / (1 - r)\n    end\nend\n\n# Example usage\na = 1     # First term\nr = 2     # Common ratio\nn = 5     # Number of terms\n\nsum = find_sum_of_gp_series(a, r, n)\nprintln(\"Sum of geometric series: \", sum)\n",
  "scala": "object GpSumCalculator {\n  def main(args: Array[String]): Unit = {\n    println(\"Enter the first term (a1) of the GP:\")\n    val a1 = scala.io.StdIn.readDouble()\n\n    println(\"Enter the common ratio (r) of the GP:\")\n    val r = scala.io.StdIn.readDouble()\n\n    println(\"Enter the number of terms (n) in the GP:\")\n    val n = scala.io.StdIn.readInt()\n\n    val gpSum = calculateGpSum(a1, r, n)\n    println(s\"Sum of the GP series: $gpSum\")\n  }\n\n  def calculateGpSum(a1: Double, r: Double, n: Int): Double = {\n    if (r == 1) {\n      return a1 * n\n    }\n\n    val gpSum = a1 * (1 - Math.pow(r, n)) / (1 - r)\n    gpSum\n  }\n}\n",
  "dart": "import 'dart:math';\n\nvoid main() {\n  \n  int a1 = 2; // First term of the GP\n  int r = 3; // Common ratio\n  int n = 3; // Number of terms\n\n  // Calculating the sum of the GP series\n  double sum = calculateGPSum(a1, r, n);\n\n  // Printing the output\n  print(\"Sum of GP series: $sum\");\n}\n\ndouble calculateGPSum(int a1, int r, int n) {\n  // Using the formula for the sum of GP series\n  return a1 * (pow(r, n) - 1) / (r - 1);\n}\n",
  "go": "package main\nimport (\n\t\"fmt\"\n)\nfunc pow (base,exponent int) int{\n\tresult := 1\n\tfor i:= 0; i < exponent ; i++ {\n\t\tresult *= base\n\t}\n\treturn result\n}\nfunc main(){\n\tvar a,r,n int\n\tfmt.Printf(\"Enter the first term (a) : \")\n\tfmt.Scanln(&a)\n\tfmt.Printf(\"Enter the common ratio (r) : \")\n\tfmt.Scanln(&r)\n\tfmt.Printf(\"Enter the number of terms (n) : \")\n\tfmt.Scanln(&n)\n\tsum:= a* (1-pow(r,n))/(1-r)\n\tfmt.Printf(\"Output : %d\", sum)\n}\n",
  "haskell": "-- Function to calculate the sum of a GP series\ngpSum :: Double -> Double -> Int -> Double\ngpSum a1 r n = a1 * (1 - r^n') / (1 - r)\n    where n' = fromIntegral n\n\n-- Main function\nmain :: IO ()\nmain = do\n    putStrLn \"Enter the first term, common ratio, and number of terms (separated by commas):\"\n    input <- getLine\n    let [a1, r, n] = map read (wordsWhen (==',') input)\n\n    -- Calculate the sum and print the result\n    let result = gpSum a1 r (round n)\n    putStrLn $ \"Sum of the GP series: \" ++ show result\n\n-- Helper function to split a string into a list of words using a delimiter\nwordsWhen :: (Char -> Bool) -> String -> [String]\nwordsWhen p s = case dropWhile p s of\n    \"\" -> []\n    s' -> w : wordsWhen p s''\n        where (w, s'') = break p s'\n",
  "php": "<?php\n\nfunction sumOfGP($a, $r, $n)\n{\n    $sum = 0; \n    for ($i = 0; $i < $n; $i++)\n    {\n        $sum = $sum + $a;\n        $a = $a * $r;\n    }\n    return $sum;\n}\n  \n\necho(sumOfGP(2, 3, 3));\n  \n\n?>\n",
  "perl": "sub sum_of_gp {\n    my ($a1, $r, $n) = @_;\n\n\n    my $sum = $a1 * (int($r)**$n - 1) / ($r - 1);\n    return $sum;\n}\n\n\nmy $a1 = 2;\nmy $r = 3;\nmy $n = 3;\n\n\nprint \"Sum of the GP series: \", sum_of_gp($a1, $r, $n), \"\\n\";\n",
  "python": "def findSumOfGpSeries(firstNumber, ratio, length):\n    power = pow(ratio, length)\n    ans = firstNumber * (power - 1) / (ratio - 1)\n\n    return ans\n\n\nif __name__ == \"__main__\":\n    firstNumber = float(input(\"give first number:\\n\"))\n    ratio = float(input(\"give ratio:\\n\"))\n    length = float(input(\"give length:\\n\"))\n    print(\"The sum of the given gp series is \")\n    print(findSumOfGpSeries(firstNumber, ratio, length))\n",
  "r": "# Function to calculate the sum of a GP series\nsum_of_gp <- function(a1, r, n) {\n  if (r == 1) {\n    # If the common ratio is 1, use the simple formula for sum of n terms of an AP\n    return(a1 * n)\n  } else {\n    # Calculate the sum using the GP sum formula\n    return(a1 * (1 - r^n) / (1 - r))\n  }\n}\n\n# Example usage with the given input\na1 <- 2   # First term\nr <- 3    # Common ratio\nn <- 3    # Number of terms\n\nresult <- sum_of_gp(a1, r, n)\ncat(\"Sum of the GP series:\", result, \"\\n\")\n\n",
  "rust": "fn sum_of_gp(a: u32, r: u32, n: u32) -> u32 {\n    a * (u32::pow(r, n) - 1) / (r - 1)\n}\n\nfn main() {\n    let a = 2;\n    let r = 3;\n    let n = 3;\n\n    println!(\"{}\", sum_of_gp(a, r, n));\n}",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}