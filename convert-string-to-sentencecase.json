{
  "slug": "convert-string-to-sentencecase",
  "title": "Convert String To Sentencecase",
  "c": "#define _POSIX_C_SOURCE 200809L\n\n#include <stdio.h>    /* printf, getline */\n#include <stdlib.h>  /* free       */\n#include <string.h> /* strlen */\n\nconst char *ConvertStringToSentenceCase(char *);\n\nint main()\n{\n    size_t size = 100;\n    char *str = NULL;\n\n    /* user need to free the ptr given, will be malloced in case it's points to NULL */\n    getline(&str,&size,stdin);\n\n    printf(\"%s \\n\",ConvertStringToSentenceCase(str));\n\n    free(str);\n\n    return 0;\n}\n\nconst char *ConvertStringToSentenceCase(char *str)\n{\n    char IsNewSentence[3] = {'.','?','!'};\n    int is_new_sentence = 1;\n\n    size_t i = 0;\n    size_t j = 0;\n\n    for(i = 0; i < strlen(str); ++i)\n    {\n        if((str[i] >= 'a') && (str[i] <= 'z') && (is_new_sentence))\n        {\n            str[i] -= 32;\n            is_new_sentence = 0;\n        }\n\n        else if((str[i] >= 'A') && (str[i] <= 'Z') && (!is_new_sentence))\n        {\n            str[i] += 32;\n        }\n\n        else if((str[i] >= 'A') && (str[i] <= 'Z') && (is_new_sentence))\n        {\n            is_new_sentence = 1;\n        }\n\n        else\n        {\n            for(j = 0; j < 3; ++j)\n            {\n                if(IsNewSentence[j] == str[i])\n                {\n                    is_new_sentence = 1;\n                }\n            }\n        }\n    }\n\n    return str;\n}\n",
  "c-plus-plus": "#include <iostream>\n\nstd::string& ConvertStringToSentencecase(std::string& str);\n\nint main()\n{\n    std::string str;\n    std::getline(std::cin,str);\n\n    std::cout << ConvertStringToSentencecase(str) << '\\n';\n\n    return 0;\n}\n\nstd::string& ConvertStringToSentencecase(std::string& str)\n{\n    char IsNewSentence[3] = {'.','?','!'};\n    bool is_new_sentence = true;\n\n\n    for(size_t i = 0; i < str.size(); ++i)\n    {\n        // checks if str[i] is the beginning of new sentence && not UpperCase.\n\n        if((str[i] >= 'a') && (str[i] <= 'z') && (is_new_sentence))\n        {\n            str[i] -= 32;\n            is_new_sentence = false;\n        }\n\n        // checks if str[i] is not the beginning of new sentence && UpperCase.\n\n        else if((str[i] >= 'A') && (str[i] <= 'Z') && (!is_new_sentence))\n        {\n            str[i] += 32;\n        }\n\n        // checks if str[i] is the beginning of new sentence && UpperCase.\n        //if so, need to update the is_new_sentence for the next iteration.\n\n        else if((str[i] >= 'A') && (str[i] <= 'Z') && (is_new_sentence))\n        {\n            is_new_sentence = false;\n        }\n\n        //checks if str[i] is a char before new sentence/end of the string.\n\n        else\n        {\n            for(size_t j = 0; j < 3; ++j)\n            {\n                if(IsNewSentence[j] == str[i])\n                {\n                    is_new_sentence = true;\n                }\n            }\n        }\n    }\n\n    return str;\n}",
  "c-sharp": "using System;\n\n\nnamespace ConvertStringToSentencecase\n{\n\tinternal class Program\n\t{\n\t\tstatic void Main(string[] args)\n\t\t{\n\t\t\tConsole.WriteLine(\"Enter a sentence\");\n\t\t\tstring sentence = Console.ReadLine();\n\t\t\tConsole.WriteLine(ToSentenceCase(sentence));\n\t\t\tConsole.ReadLine();\n\t\t}\n\n\t\tstatic string ToSentenceCase(string sentence)\n\t\t{\n\t\t\tif (string.IsNullOrEmpty(sentence))\n\t\t\t{\n\t\t\t\treturn sentence;\n\t\t\t}\n\n\t\t\tsentence = char.ToUpper(sentence[0]) + sentence.Substring(1);\n\n\t\t\treturn sentence;\n\t\t}\n\t}\n}\n",
  "f-sharp": "open System\n\nlet toSentenceCase (input: string) =\n    match input.Split([|' '|], StringSplitOptions.RemoveEmptyEntries) with\n    | [||] -> \"\"  // Handle empty string case\n    | [|head; tail|] ->\n        String.concat \" \" [head.[0].ToString().ToUpper() + head.Substring(1); tail]\n    | _ -> input  // Handle cases with more than one word\n\n// Example usage\nlet inputString = \"hello world\"\nlet result = toSentenceCase inputString\n\nprintfn \"Input: %s\" inputString\nprintfn \"Output: %s\" result\n",
  "java": "import java.util.Scanner;\n\n\npublic class ConvertStringToSentencecase {\n    \n    public static void main(String[] args) {\n\n        Scanner scnr = new Scanner(System.in); \n        System.out.println(\"Enter the String\"); \n        String inputString = scnr.nextLine();\n\n        String s1 = inputString.substring(0, 1).toUpperCase();  \n        String s2 = inputString.substring(1);    \n        String sentence = inputString.substring(0, 1).toUpperCase() + inputString.substring(1); \n        System.out.println(sentence);\n    }\n}\n",
  "javascript": "function sentenceCase(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nconst result = sentenceCase(\"hello world\");\nconsole.log(result);\n",
  "kotlin": "import java.util.Scanner\n\nfun main() {\n    print(\"Enter String : \")\n    println()\n    var min = readLine()\n\n    println(\"Sentence Case: \" + ConvertStringToSentencecase(min!!.split(\" \")))\n\n}\n\nprivate fun ConvertStringToSentencecase(args: List<String>): String {\n    val buffer = StringBuffer()\n    for((index,case) in args.withIndex()){\n        if(index == 0) {\n            buffer.append(case.get(0).uppercase()).append(case.subSequence(1,case.length))\n        } else {\n            buffer.append(\" \").append(case)\n        }\n    }\n\n    return buffer.toString()\n}",
  "ruby": "def convertStringToSentenceCase string\n    string.capitalize\nend\n\nputs convertStringToSentenceCase \"hello world\"",
  "swift": "import Foundation\n\n/**\n This Swift program converts a given string to sentence case, where only the first letter of the first word is capitalized.\n \n - Parameters:\n   - input: The input string to be converted to sentence case.\n - Returns: The string in sentence case.\n \nSample Input:\nEnter a string:\nhello world\n\nSample Output:\nString in Sentence Case: Hello world\n\n */\nfunc stringToSentenceCase(input: String) -> String {\n    guard let firstLetter = input.first else {\n        return input\n    }\n\n    return String(firstLetter.uppercased()) + String(input.dropFirst())\n}\n\n// Main program\nprint(\"Enter a string:\")\nif let userInput = readLine() {\n    let sentenceCaseResult = stringToSentenceCase(input: userInput)\n    print(\"String in Sentence Case: \\(sentenceCaseResult)\")\n} else {\n    print(\"Invalid input. Please enter a valid string.\")\n}\n",
  "typescript": "const sentenceCase = (str: string): string => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nconsole.log(sentenceCase(\"hello world\"));\n",
  "description": "\n## Write a program to convert string to sentencecase\n\nSentence case is a style of writing in which the first letter of the first word is capitalized, while all other letters are in lowercase. However, there are some exceptions to this rule. For example, proper nouns (such as names of people, places, organizations, etc.) and acronyms (such as NASA, FBI, etc.) should always be capitalized, regardless of their position in the sentence. The first word after a colon or a semicolon may also be capitalized.\n\nHere is an example of a sentence in sentence case: \"**`The quick brown fox jumps over the lazy dog.`**\" In this sentence, only the first letter of the first word is capitalized, while all other letters are in lowercase.\n\nHowever, if the sentence contains proper nouns or acronyms, they should also be capitalized. For example: \"**`John and Jane went to New York to visit the Museum of Modern Art (MoMA).`**\" In this sentence, the first letter of the first word, as well as the proper nouns \"John\", \"Jane\", \"New York\", and \"Museum of Modern Art\", and the acronym \"MoMA\" are capitalized.\n\nHere are some examples of converting strings to sentence cases:\n\nExample 1:\n\n```txt\nInput  : \"john and jane went to new york to visit the museum of modern art (moma)\"\nOutput : \"John and Jane went to New York to visit the Museum of Modern Art (MoMA)\"\n```\n\nExample 2:\n\n```txt\nInput  : \"the united nations (un) is an international organization\"\nOutput : \"The United Nations (UN) is an international organization\"\n```\n\nExample 3:\n\n```txt\nInput  : \"the cat is sleeping; however, the dog is awake\"\nOutput : \"The cat is sleeping; however, the dog is awake\"\n```\n\n---\n",
  "trackId": 5055,
  "lastUpdated": "2023-12-02T16:59:23Z",
  "contributors": [
    "shaurya-clemson",
    "akshithagunupati",
    "Shaileshalluri",
    "harshraj8843",
    "bhushanmarathe",
    "ariporat",
    "vedantpople4",
    "apurvagandhi",
    "RiteshK-611",
    "jfinley6",
    "Sri01729",
    "Osher160",
    "anandfresh",
    "rksp25",
    "Pinklemonade33"
  ],
  "julia": "println(\"Enter s string: \")\nsub = split(lowercase(readline()), \" \")\nn = length(sub)\ns = titlecase(sub[1])\n\nfor i in 2:n\n  global s = s * \" \" * sub[i]\nend\n\nprintln(\"Given string in sentencecase: \", s)",
  "scala": "object SentenceCaseConverter {\n  def main(args: Array[String]): Unit = {\n    println(\"Enter a string:\")\n    val input = scala.io.StdIn.readLine()\n\n    val sentenceCase = convertToSentenceCase(input)\n    println(\"Sentence Case: \" + sentenceCase)\n  }\n\n  def convertToSentenceCase(input: String): String = {\n    if (input.isEmpty) {\n      return \"\"\n    }\n\n    val words = input.toLowerCase.split(\" \")\n    if (words.nonEmpty) {\n      words(0) = words(0).capitalize\n    }\n\n    words.mkString(\" \")\n  }\n}\n",
  "dart": "String convertToSentenceCase(String input, List<String> fixedWords) {\n  // Converting the input to lowercase\n  input = input.toLowerCase();\n\n  // Capitalizing the first character\n  if (input.isNotEmpty) {\n    input = input[0].toUpperCase() + input.substring(1);\n  }\n  else {\n    return(\"Empty string\");\n  }\n\n  // Replacing lower case fixed words with upper case\n  for (String fixedWord in fixedWords) {\n    String fixedWordLowerCase = fixedWord.toLowerCase();\n    if (input.contains(fixedWordLowerCase)) {\n      input = input.replaceAll(fixedWordLowerCase, fixedWord);\n    }\n  }\n\n  // Handling special cases for colon, semicolon, and full stop\n  for (int i = 0; i < input.length - 1; i++) {\n    if (input[i] == ':' || input[i] == ';' || input[i] == '.') {\n      int j = i + 1;\n      // Skip any whitespace\n      while (j < input.length && input[j] == ' ') {\n        j++;\n      }\n      if (j < input.length) {\n        input = input.substring(0, j) + input[j].toUpperCase() + input.substring(j + 1);\n      }\n    }\n  }\n\n  return input;\n}\n\nvoid main() {\n  String text1 = \"john and jane went to new york to visit the museum of modern art (moma)\";\n  List<String> fixedWords1 = [\"John\", \"Jane\", \"New York\", \"Museum of Modern Art\", \"MoMA\"];\n  print(convertToSentenceCase(text1, fixedWords1));\n\n  String text2 = \"the united nations (un) is an international organization\";\n  List<String> fixedWords2 = [\"United Nations\", \"UN\"];\n  print(convertToSentenceCase(text2, fixedWords2));\n\n  String text3 = \"the cat is sleeping; however, the dog is awake\";\n  List<String> fixedWords3 = [];\n  print(convertToSentenceCase(text3, fixedWords3));\n}\n",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"unicode\"\n)\n\nfunc sentenceCase(str string) string {\n\tnewString := \"\" // return value\n\tcap := false    // letter capitalized if true\n\tpunc := \"!?.\"   // listed punctuation\n\tfor index, x := range str {\n\t\tif index == 0 {\n\t\t\tif unicode.IsLower(x) {\n\t\t\t\tnewString += string(unicode.ToUpper(x))\n\t\t\t} else if x == ' ' || strings.Contains(string(x), punc) {\n\t\t\t\tnewString += string(x)\n\t\t\t\tcap = true\n\t\t\t} else {\n\t\t\t\tnewString += string(x)\n\t\t\t}\n\t\t} else {\n\t\t\tif strings.Contains(string(x), punc) {\n\t\t\t\tnewString += string(x)\n\t\t\t\tcap = true\n\t\t\t} else {\n\t\t\t\tif cap && unicode.IsLower(x) {\n\t\t\t\t\tnewString += string(unicode.ToUpper(x))\n\t\t\t\t\tcap = false\n\t\t\t\t} else {\n\t\t\t\t\tnewString += string(x)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn newString\n}\n\nfunc main() {\n\tvar str string\n\tstr = \"hello world\"\n\tfmt.Println(sentenceCase(str))\n}\n",
  "php": "<?php\n\nfunction sentenceCase($str) {\n    return ucfirst($str);\n}\n\necho sentenceCase('hello world');\n\n?>\n",
  "perl": "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nsub sentence_case_with_replacement {\n    my ($input, @fixed_words) = @_;\n    my @sentences = split(/(\\.|!|\\?)\\s+/, $input); # Split the input into sentences\n    \n    foreach my $sentence (@sentences) {\n        $sentence =~ s/^\\s+//; # Remove leading whitespace\n        $sentence =~ s/\\s+$//; # Remove trailing whitespace\n        $sentence = ucfirst(lc($sentence)); # Convert to sentence case\n        \n        # Perform word replacements\n        foreach my $word (@fixed_words) {\n            $sentence =~ s/\\b\\Q$word\\E\\b/$word/gi; # Replace case-insensitively\n        }\n    }\n    \n    my $output = join(' ', @sentences); # Recombine the sentences with spaces\n    \n    return $output;\n}\n\n# Example \nmy $input_string1 = \"john and jane went to new york to visit the museum of modern art (moma).\";\nmy @fixed_words1 = (\"John\", \"Jane\",\"New York\", \"Museum of Modern Art\", \"MoMA\");\n\nmy $output_string1 = sentence_case_with_replacement($input_string1, @fixed_words1);\n\nprint $output_string1 . \"\\n\";\n\nmy $input_string2 = \"the united nations (un) is an international organization.\";\nmy @fixed_words2 = (\"The United Nations\", \"UN\");\n\nmy $output_string2 = sentence_case_with_replacement($input_string2, @fixed_words2);\n\nprint $output_string2 . \"\\n\";\n\nmy $input_string3 = \"the cat is sleeping; however, the dog is awake.\";\nmy @fixed_words3 = ();\n\nmy $output_string3 = sentence_case_with_replacement($input_string3, @fixed_words3);\n\nprint $output_string3 . \"\\n\";\n",
  "python": "# Returns a string with the first letter capitalized in a sentence\r\n# The first letter of the string is capitalized if nothing but spaces or the listed punctuation is found\r\n# Every first letter after the listed punctuation is also capitalized\r\n\r\n\r\ndef sentence_case(string: str):\r\n    new_string = str()  # return value\r\n    cap = bool()  # letter capitalized if true\r\n    punc = [\"!\", \"?\", \".\"]  # listed punctuation\r\n    for index, x in enumerate(string):\r\n        if index == 0:\r\n            if x.islower():\r\n                new_string += x.upper()\r\n            elif x in punc or x == \" \":\r\n                new_string += x\r\n                cap = True\r\n            else:\r\n                new_string += x\r\n        else:\r\n            if x in punc:\r\n                new_string += x\r\n                cap = True\r\n            else:\r\n                if cap and x.islower():\r\n                    new_string += x.upper()\r\n                    cap = False\r\n                else:\r\n                    new_string += x\r\n\r\n    return new_string\r\n\r\n\r\nprint(sentence_case(input()))\r\n",
  "rust": "fn main(){\n    let input = \"hello world!\";\n    let mut ans = String::with_capacity(input.len());\n    let mut next = true;\n    for i in input.chars(){\n        if next{\n            ans.push(i.to_ascii_uppercase());\n            next = false;\n        } else {\n            ans.push(i.to_ascii_lowercase());\n        }\n    }\n    println!(\"{}\", ans);\n}",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "php",
    "perl",
    "python",
    "rust"
  ]
}