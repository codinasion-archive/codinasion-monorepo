{
  "slug": "find-digital-root-of-a-number",
  "title": "Find Digital Root Of A Number",
  "c": "// C Program to find the Digital Root of a Number\n#include<stdio.h>\nint digital_root(int);\nvoid main()\n{\n    int num;\n    printf(\"Enter Your Number :\\n\");\n    scanf(\"%d\",&num);\n    if(num!=0){\n    int dr=digital_root(num);\n    printf(\"Digital Root of %d is %d\",num,dr);\n    }\n}\nint digital_root(int n)\n{\n    int sum=0;\n    while(1)\n    {\n      while(n!=0)\n      {\n         sum=sum+(n%10);\n         n=n/10;\n      }\n      if(sum>9)\n      {\n        n=sum;\n        sum=0;\n      }\n      else\n        break;\n    } \n    return sum;\n}\n",
  "c-plus-plus": "#include<iostream> // cout, sin\n\n//num must be non negative.\nint DigitalRoot(int num);\n\nint main()\n{\n    int find_my_digital_root = 0;\n\n    std::cout << \"please enter a number:\" << std::endl;\n    std::cin >> find_my_digital_root;\n\n    std::cout << \"the digital root of the number:\" << \n                DigitalRoot(find_my_digital_root) << std::endl;\n}\n\nint DigitalRoot(int num)\n{\n    while(num > 9)\n    {\n        int tmp = 0;\n\n        while(num)\n        {\n            tmp += num % 10;\n            num /= 10;\n        }\n        num = tmp;\n    }\n\n    return num;\n}",
  "c-sharp": "using System;\nclass DigitalRoot {\n    static int digroot(int n)\n    {\n        int root = 0;\n        while (n > 0 || root > 9)\n        {\n            if (n == 0) {\n                n = root;\n                root = 0;\n            }\n            root += n % 10;\n            n /= 10;\n        }\n        return root;\n    }\n\n    public static void Main()\n    {\n        Console.Write(digroot(1234));\n    }\n}\n",
  "java": "import java.util.Scanner;\n\npublic class FindDigitalRootOfANumber{\n    public static void main(String[] args) {\n        Scanner scanner=new Scanner(System.in);\n        int value=scanner.nextInt();\n        System.out.println(findDigitalRootOfANumber(value));\n        scanner.close();\n    }\n\n    private static int findDigitalRootOfANumber(int value) {\n        if(value<10) return value;\n        value=value%10+findDigitalRootOfANumber(value/10);\n        return findDigitalRootOfANumber(value);\n    }\n}",
  "javascript": "function findDigitalRoot(num) {\n  let digitalRoot = 0;\n\n  if (num != 0) {\n    digitalRoot = (num % 10) + findDigitalRoot(Math.floor(num / 10));\n  }\n\n  if (digitalRoot > 9) {\n    digitalRoot =\n      (digitalRoot % 10) + findDigitalRoot(Math.floor(digitalRoot / 10));\n  }\n  return digitalRoot;\n}\n\nconsole.log(findDigitalRoot(1234));\n",
  "ruby": "print \"Input: \"\n\nnumber = gets.chomp\n\nif number == \"0\"\n    puts \"Output: 0\"\nend\n\nans = 0\nfor i in 0..number.length\n    ans = (ans + number[i].to_i) % 9\nend\n    \nif ans == 0\n    puts \"Output: 9\"\nelse\n    puts \"Output: #{ans % 9}\"\nend",
  "typescript": "const findDigitalRootByRecursion = (val: number) => {\n  // If the value is less than 10, viz the digit already single digit\n  if (val < 10) return val;\n  // using the recursion finding the sum of digit\n  val = (val % 10) + findDigitalRootByRecursion(val / 10);\n  // removing the decimal part\n  val = ~~val;\n  return findDigitalRootByRecursion(val);\n};\n\nconsole.log(findDigitalRootByRecursion(1234));\nconsole.log(findDigitalRootByRecursion(642));\nconsole.log(findDigitalRootByRecursion(0));\nconsole.log(findDigitalRootByRecursion(1));\n",
  "description": "\n## Write a program to find digital root of a number\n\nDigital root of a number is the recursive sum of its digits until we get a single digit number.\n\n```txt\nInput  : 1234\nOutput : 1\n```\n\n---\n",
  "trackId": 3060,
  "lastUpdated": "2024-03-28T04:44:30Z",
  "contributors": [
    "Adelechka",
    "harshraj8843",
    "anandfresh",
    "Osher160",
    "joao-vitor-souza",
    "lukastomcisak",
    "devkansara",
    "omprakashchhetri",
    "Akhilbisht798",
    "greeshma-d",
    "vishva-mahadevan"
  ],
  "scala": "import scala.annotation.tailrec\n\nobject findDigitalRootOfANumber {\n  def main(args: Array[String]): Unit = {\n    val number = 942\n    println(digitalRoot(number))\n  }\n\n  def sumOfDigits(n: Int): Int = {\n    if (n == 0) 0\n    else n % 10 + sumOfDigits(n / 10)\n  }\n\n  @tailrec\n  def digitalRoot(n: Int): Int = {\n    val sum = sumOfDigits(n)\n    if (sum < 10) sum\n    else digitalRoot(sum)\n  }\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc findDigitalRoot(num int) int {\n\ttemp := num\n\tdigit := 0\n\tdroot := 0\n\tfor temp != 0 {\n\t\tdigit = temp % 10\n\t\tdroot += digit\n\t\ttemp /= 10\n\t\tif temp == 0 && droot > 9 {\n\t\t\ttemp = droot\n\t\t\tdroot = 0\n\t\t}\n\t}\n\tfmt.Println(droot)\n\treturn droot\n}\nfunc main() {\n\tfmt.Println(\"Enter the number to find its digital root: \")\n\tvar num int\n\tfmt.Scanln(&num)\n\tfindDigitalRoot(num)\n}\n",
  "php": "<?php\nfunction digroot($n)\n{\n    $root = 0;\n    while ($n > 0 || $root > 9)\n    {\n        if ($n == 0)\n        {\n            $n = $root;\n            $root = 0;\n        }\n         \n        $root += $n % 10;\n        $n /= 10;\n    }\n    return $root;\n}\n\necho digroot(1234);\n\n?>\n",
  "perl": "sub digroot \n{\n    $root = 0;\n    while ($n > 0 || $root > 9)\n        {\n            if ($n == 0) {\n                $n = $root;\n                $root = 0;\n            }\n               \n            $root += $n % 10;\n            $n = $n / 10;\n        }\n        return $root;\n}\n\n$n = 1234;\nprint digroot(n);\n",
  "python": "def digitalRoot(num):\n    if num == \"0\":\n        return 0\n\n    ans = 0\n    for i in range(0, len(num)):\n        ans = (ans + int(num[i])) % 9\n\n    if ans == 0:\n        return 9\n    else:\n        return ans % 9\n\n\nnum = \"65785412\"\nprint(digitalRoot(num))\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "ruby",
    "typescript",
    "scala",
    "go",
    "php",
    "perl",
    "python"
  ]
}