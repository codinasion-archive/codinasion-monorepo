{
  "slug": "find-the-trace-of-a-matrix",
  "title": "Find The Trace Of A Matrix",
  "c": "#include <stdio.h>\n\nint main()\n\n{\n\n\tint i, j, rows, columns, trace = 0;\n\n\tprintf(\"Enter Matrix Rows and Columns =  \");\n\n\tscanf(\"%d %d\", &rows, &columns);\n\n\tint Tra_arr[rows][columns];\n\n\tprintf(\"Please Enter the Matrix Items =  \\n\");\n\n\tfor (i = 0; i < rows; i++)\n\n\t{\n\n\t\tfor (j = 0; j < columns; j++)\n\n\t\t{\n\n\t\t\tscanf(\"%d\", &Tra_arr[i][j]);\n\n\t\t}\n\n\t}\n\n\tfor (i = 0; i < rows; i++)\n\n\t{\n\n\t\tfor (j = 0; j < columns; j++)\n\n\t\t{\n\n\t\t\tif (i == j)\n\n\t\t\t{\n\n\t\t\t\ttrace = trace + Tra_arr[i][j];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tprintf(\"The Trace Of the Matrix = %d\\n\", trace);\n\n}\n",
  "c-plus-plus": "#include <iostream>\n\nusing namespace std;\n\nint main()\n\n{\n\n    int i , j , sum = 0 , a[3][3] ;\n\n    cout << \"Trace matrix in 2D array \" << endl ;\n\n    cout << \"Enter Array Elements : \" << endl ;\n\n    // loop for taking inputs in array\n\n    for (i = 0 ; i < 3 ; i++)\n\n    {\n\n        for (j = 0 ; j < 3 ; j++)\n\n        {\n\n            cin >> a[i][j] ;\n\n        }\n\n    }\n\n    // loop for printing array elements\n\n     for (i = 0 ; i < 3 ; i++)\n\n    {\n\n        for (j = 0 ; j < 3 ; j++)\n\n        {\n\n           cout <<  a[i][j]  << \" \";\n\n        }\n\n        cout << endl ;\n\n    }\n\n    //loop for finding trace of matrix\n\n    for(i = 0 ; i < 3 ; i++)\n\n    {\n\n        for (j = 0 ; j < 3 ; j++)\n\n        {\n\n            if (i==j)\n\n            {\n\n                sum+=a[i][j] ;\n\n            }\n\n        }\n\n    }\n\n    cout << \"Trace of matrix : \" << sum << endl ;\n\n    return 0;\n\n}\n",
  "c-sharp": "using System;\n \nclass Matrix {\n     \n    static int findNormal(int [,]mat, int n)\n    {\n        int sum = 0;\n         \n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < n; j++)\n                sum += mat[i,j] * mat[i,j];\n                 \n        return (int)Math.Sqrt(sum);\n    }\n     \n\n    static int findTrace(int [,]mat, int n)\n    {\n        int sum = 0;\n         \n        for (int i = 0; i < n; i++)\n            sum += mat[i,i];\n             \n        return sum;\n    }\n     \n    public static void Main ()\n    {\n        int [,]mat = { {1, 2, 3},\n                       {4, 5, 6},\n                       {7, 8, 9},\n    };\n \n    Console.Write (\"Trace of Matrix = \"+ findTrace(mat, 3) + \"\\n\");\n\n         \n    }\n}\n",
  "f-sharp": "// Define a function to calculate the trace of a square matrix\nlet trace (matrix: int[,]) =\n    // Get the size of the matrix\n    let size = matrix.GetLength(0)\n    // Initialize the sum to zero\n    let mutable sum = 0\n    // Loop through the diagonal elements\n    for i in 0 .. size - 1 do\n        // Add the element to the sum\n        sum <- sum + matrix.[i, i]\n    // Return the sum\n    sum\n\n// Define a sample matrix\nlet matrix = array2D [[1; 2; 3]; [4; 5; 6]; [7; 8; 9]]\n\n// Print the matrix\nprintfn \"Input:\\n%A\" matrix\n\n// Call the trace function and print the result\nprintfn \"Output:\\n%d\" (trace matrix)\n",
  "java": "import java.util.Scanner;\n\npublic class FindTheTraceOfAMatrix {\n  private static Scanner scanner_input;\n\n  public static void main(String[] args) {\n\n    int i = 0, j, dimension, trace = 0;\n    scanner_input = new Scanner(System.in);\n    System.out.print(\"Enter Matrix Dimension:  \");\n    dimension = scanner_input.nextInt();\n    int[][] matrix_array = new int[dimension][dimension];\n    System.out.println(\"Enter the Matrix Items:  \");\n    while (i < dimension) {\n      j = 0;\n      while (j < dimension) {\n        matrix_array[i][j] = scanner_input.nextInt();\n        j++;\n      }\n      i++;\n    }\n\n    i = 0;\n    while (i < dimension) {\n      j = 0;\n      while (j < dimension) {\n        if (i == j) {\n          trace = trace + matrix_array[i][j];\n        }\n        j++;\n      }\n      i++;\n    }\n    scanner_input.close();\n    System.out.println(\"\\nThe Trace Of the Matrix is :  \" + trace);\n\n  }\n}\n",
  "javascript": "import * as readLine from \"readline\";\n\nlet arr = [];\n\nconst rl = readLine.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nconst takeInput = () => {\n  rl.question(\"\", (line) => {\n    if (line.length == 0) {\n      rl.close();\n      console.log(findTrace(arr));\n      return;\n    }\n    let row = line.split(\" \");\n    arr.push(row);\n    takeInput();\n  });\n};\n\nconst findTrace = (arr) => {\n  let total = 0;\n  for (let i = 0; i < arr.length; i++) {\n    total += parseInt(arr[i][i]);\n  }\n  return total;\n};\n\nconsole.log(\"Input:\");\ntakeInput();\n",
  "ruby": "############################################\n# Program: FindTheTraceOfAMatrix.rb.rb\n# Author: github.com/ErnaneJ\n# Created At: December 7, 2023\n############################################\n\ndef matrix_trace(matrix)\n  size = matrix.length\n  unless matrix.all? { |row| row.is_a?(Array) && row.length == size }\n    raise \"Error: The matrix is ​​not square.\"\n  end\n\n  (0...size).map{|i| matrix[i][i] }.sum # Calculate the trace of the matrix\nend",
  "swift": "import Foundation\n\nfunc traceOfMatrix(_ matrix: [[Int]]) -> Int {\n    var trace = 0\n\n    for i in 0..<matrix.count {\n        trace += matrix[i][i]\n    }\n\n    return trace\n}\n\n// Example matrix\nlet matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\n// Calculate and print the trace\nlet trace = traceOfMatrix(matrix)\nprint(\"Trace of the matrix: \\(trace)\")\n",
  "typescript": "function trace(matrix: number[][]): number {\n  let trace = 0;\n  for (let i = 0; i < matrix.length; i++) {\n    trace += matrix[i][i];\n  }\n  return trace;\n}\n\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\nconsole.log(trace(matrix)); // Output: 15\n",
  "description": "\n## Write a program to find the trace of a matrix\n\nThe trace of a square matrix is the sum of the elements on the main diagonal (from the upper left to the lower right).\n\n```txt\nInput  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n15\n```\n\n---\n",
  "trackId": 4589,
  "lastUpdated": "2024-06-16T13:55:26Z",
  "contributors": [
    "harshraj8843",
    "charan-hash",
    "pramod-karkhani",
    "lookwhoshere99",
    "anandfresh",
    "ErnaneJ",
    "rajatpandey441",
    "pedram-mohajer",
    "moaldeen",
    "vedantpople4",
    "abhisek-1221",
    "askawron",
    "tom-laplace",
    "joao-vitor-souza",
    "codingkush",
    "arkbuilder117",
    "savi001",
    "Dhana-s",
    "BiscuitCandy"
  ],
  "julia": "using LinearAlgebra\nA = [1 2 3; 4 5 6; 7 8 9]\nprintln(tr(A))\n",
  "scala": "object MatrixTrace {\n  def main(args: Array[String]): Unit = {\n    val matrix = Array(\n      Array(1, 2, 3),\n      Array(4, 5, 6),\n      Array(7, 8, 9)\n    )\n\n    val trace = calculateTrace(matrix)\n    println(s\"The trace of the matrix is: $trace\")\n  }\n\n  def calculateTrace(matrix: Array[Array[Int]]): Int = {\n    (0 until matrix.length).map(i => matrix(i)(i)).sum\n  }\n}\n",
  "dart": "import 'dart:io';\n\nvoid main() {\n  int n;\n  print(\"Enter the number of rows and columns of matrix:\");\n  n = int.parse(stdin.readLineSync()!);\n  List<List<int>> matrix = List.generate(n, (_) => List.filled(n, 0));\n  print(\"Enter the elements of matrix:\");\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      matrix[i][j] = int.parse(stdin.readLineSync()!);\n    }\n  }\n  int trace = 0;\n  for (int i = 0; i < n; i++) {\n    trace += matrix[i][i];\n  }\n  print(\"Trace of matrix is $trace\");\n}\n /* Output :\nEnter the number of rows and columns of matrix:\n3\nEnter the elements of matrix:\n1\n2\n3\n4\n5\n6\n7\n8\n9\nTrace of matrix is 15. \n*/",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n)\n\nfunc main() {\n\tvar size int\n\tfmt.Scanf(\"%d\", &size)\n\tm := make([][]int, size)\n\tfor i := 0; i < size; i++ {\n\t\tfor j := 0; j < size; j++ {\n\t\t\tm[i] = append(m[i], rand.Intn(10)-rand.Intn(9))\n\t\t}\n\t}\n\tfmt.Println(m)\n\tans := 0\n\tfor i := 0; i < size; i++ {\n\t\tfor j := 0; j < size; j++ {\n\t\t\tif i == j {\n\t\t\t\tans += m[i][j]\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(ans)\n}\n",
  "haskell": "main :: IO ()\nmain = do\n    putStrLn \"Enter the 3x3 matrix elements separated by spaces:\"\n    matrix <- readMatrix\n    let traceValue = trace matrix\n    putStrLn $ \"Trace of the matrix is: \" ++ show traceValue\n\nreadMatrix :: IO [[Int]]\nreadMatrix = sequence $ replicate 3 readRow\n\nreadRow :: IO [Int]\nreadRow = map read . words <$> getLine\n\ntrace :: [[Int]] -> Int\ntrace matrix = sum $ zipWith (!!) matrix [0..]\n",
  "php": "//To find Trace of the given matrix\n<html>\n<head>\n<title>PHP Program To find Trace of the given matrix</title>\n</head>\n<body>\n<?php\n// Elements of matrix a\n$a = array\n(\narray(1, 2, 3),\narray(4, 5, 6),\narray(7, 8, 9)\n);\n$n = count($a);\n$sum = 0;\n//Initially sum declare with 0;\necho(\"Original matrix is: </br>\");\n// To print Original matrix\nfor($i = 0; $i < $n; $i++)\n{\nfor($j = 0; $j < $n; $j++)\n{\necho ($a[$i][$j] . \" \" );\n}\necho(\"<br>\");\n}\n//Calculates trace of given matrix\nfor($i = 0; $i < $n; $i++)\n{\n$sum = $sum + $a[$i][$i];\n// To add diagonal elements a[0][0],a[1]a[1]\n}\necho \"Trace of the given matrix is: \".$sum;\n?>\n</body>\n</html>\n",
  "perl": "sub find_trace {\n    my ($matrix) = @_;\n    my $trace = 0;\n    my $size = scalar(@$matrix);\n    for (my $i = 0; $i < $size; $i++) {\n        $trace += $matrix->[$i][$i];\n    }\n    return $trace;\n}\n\n# Function to create a matrix from user input\nsub create_matrix {\n    print \"Enter the size of the square matrix: \";\n    my $size = <STDIN>;\n    chomp($size);\n    \n    my @matrix;\n    for (my $i = 0; $i < $size; $i++) {\n        print \"Enter row \", $i + 1, \" elements separated by space: \";\n        my $row_input = <STDIN>;\n        chomp($row_input);\n        my @row = split(/\\s+/, $row_input);\n        push @matrix, \\@row;\n    }\n    return \\@matrix;\n}\n\n# Create matrix\nmy $matrix = create_matrix();\n\n# Calculate trace\nmy $trace = find_trace($matrix);\nprint \"Trace of the matrix is: $trace\\n\";\n",
  "python": "arr = []\n\ntry:\n    while True:\n        arr.append(list(map(int, input().split())))\nexcept:\n    pass\n\nsm = 0\n\nfor i in range(len(arr)):\n    sm += arr[i][i]\n\nprint(sm)\n",
  "r": "trace_matrix <- function(input)\n{\n  dim_input = dim(input)\n  \n  #Check that input is a square matrix\n  if(dim_input[1] != dim_input[2]){\n    stop(\"Input is not a square matrix\")\n    return()\n  }\n  \n  output = 0\n  for (i in c(1:dim_input[1])) {\n    output <- output + input[i,i]\n  }\n  \n  return(output)\n}\n\na = matrix(data = c(1,2,3,4,5,6,7,8,9),nrow = 3, ncol = 3)\nb = trace_matrix(a)\nprint(b)\n\na1 = matrix(data = c(1,2,3,4,5,6),nrow = 3, ncol = 2)\nb1 = trace_matrix(a1)#Should return an error\n",
  "rust": "fn main() {\n    let mat = vec![vec![1,2,3],\n                  vec![4,5,6],\n                  vec![7,8,9],\n                  ];\n    let mut sum = 0;\n    let rows = mat[0].len();\n    for i in 0..rows {\n        sum += mat[i][i];         \n    }\n    println!(\"{sum}\");\n}",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}