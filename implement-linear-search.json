{
  "slug": "implement-linear-search",
  "title": "Implement Linear Search",
  "c": "#include <stdio.h>\n\nint linear_search(int list[], int listSize, int thingToBeFound) \n{\n    for (int i = 0; i < listSize; i++) \n    {\n        if (list[i] == thingToBeFound) \n        {\n            return i;\n        }\n    }\n    return -1;\n}\n\nint main()\n{\n    int ARay[] = { 1, 2, 3, 4, 5 };\n    int sizeOfARay = sizeof(ARay) / sizeof(ARay[0]);\n\n    int FindThis = 4;\n    int foundIT = linear_search(ARay, sizeOfARay, FindThis);\n\n    if (foundIT != -1) \n    {\n        printf(\"Element Found! Element %d was found at index %d.\\n\", FindThis, foundIT);\n    }\n    else \n    {\n        printf(\"ERROR! Element %d was not found in the list.\\n\", FindThis);\n    }\n\n    return 0;\n}\n\n/* Calmly Crafted By Redzwinger */",
  "c-plus-plus": "#include <vector> \n\ntemplate <typename T>\nint linear_search(std::vector<T> list, T val){\n    for(int i = 0; i < list.size(); i++){\n        if(list.at(i) == val){\n            return i;\n        }\n    }\n    return -1;\n};\n\n",
  "c-sharp": "ï»¿using System;\n\nnamespace Test\n{\n    internal class Program\n    {\n        /*\n                Input data:\n                key\n                array size\n                array data\n            */\n        public static void Main(string[] args)\n        {\n            int key = Convert.ToInt32(Console.ReadLine());\n            int size = Convert.ToInt32(Console.ReadLine());\n            int[] arr = new int[size];\n            \n            for(int i = 0; i < size; ++i)\n            {\n                arr[i] = Convert.ToInt32(Console.ReadLine());\n            }\n\n            int res = LinearSearch(arr, key);\n\n            if (res != -1)\n            {\n                Console.WriteLine($\"Element found with index {res}\");\n            }\n            else\n            {\n                Console.WriteLine(\"Element does not exist\");\n            }\n        }\n\n        public static int LinearSearch(int[] arr, int key)\n        {\n            for(int i = 0; i < arr.Length; ++i )\n            {\n                if (arr[i] == key)\n                {\n                    return i;\n                }\n            }\n\n            return -1;\n        }\n    }\n}\n\n",
  "f-sharp": "let rec linearSearch (list : int list) (value : int) (index : int) : int option =\n    match list with\n    | [] -> None\n    | x::xs -> \n        if x = value then Some index\n        else linearSearch xs value (index + 1)\n\nlet searchValue = 4\nlet list = [1; 2; 3; 4; 5]\n\nmatch linearSearch list searchValue 0 with\n| Some index -> printfn \"Output: %d\" index\n| None -> printfn \"Value not found\"\n\n",
  "java": "public class ImplementLinearSearch {\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5};\n        int index = linearSearch(array, 4);\n        System.out.println(index);\n    }\n\n    private static int linearSearch(int[] array, int target) {\n        if (array.length > 0) {\n            for (int i = 0; i < array.length; i++) {\n                if (array[i] == target) return i;\n            }\n        }\n        return -1;\n    }\n}\n",
  "javascript": "const S = [1, 2, 3, 4, 5]\ntarget = 56\n\nconst search = linear_search(S, target)\n\nconsole.log(search)\n\nfunction linear_search(seq, target) {\n      for (let i in seq) {\n            if (seq[i] == target) return i\n      }\n\n      return -1\n}",
  "kotlin": "fun main() {\n    val index = linearSearch(arrayOf(1,2,3,4,5,6,7,8,9,10), 9)\n    println(index)\n}\n\nfun linearSearch(array: Array<Int>, value: Int): Int {\n    for (item in array) {\n        if (item == value) return array.indexOf(item)\n    }\n    return -1\n}\n",
  "ruby": "#Program to Implement Linear Search in Ruby\n\n\ndef linear_search(array, target)\n\n    #Function to implement Linear Search\n    #Arguments:\n    #    array  :- Array of elements to search in. \n    #    target :- Target value to be searched in the array.\n\n    array_length = array.length()\n    for index in 0...array_length do\n        if(array[index]==target)\n            return index\n        end\n    end\n    \n    # -1 indicates that the target value does not exist in the array\n    return -1\nend\n\n\n#Test Case\narray = Array.[](1,2,3,4,5)\ntarget = 4\nsearch_result = linear_search(array, target)\n\nif(search_result == -1)\n    puts \" The target value is not in the array\"\nelse\n    puts \" The target value is at the index : #{search_result}\"\nend\n\n",
  "scala": "object LinearSearch {\n\n  def search(list: List[Int], value: Int): Int = {\n    list.zipWithIndex.find(_._1 == value).map(_._2).getOrElse(-1)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val list = List(1, 2, 3, 4, 5)\n    val value = 4\n\n    val index = search(list, value)\n\n    if (index != -1) {\n      println(s\"Element $value found at index: $index\")\n    } else {\n      println(s\"Element $value not found in the list\")\n    }\n  }\n}\n",
  "swift": "import Foundation\n\nfunc linearSearch(_ list: [Int], _ value: Int) -> Int? {\n    for (index, item) in list.enumerated() {\n        if item == value {\n            return index\n        }\n    }\n    return nil\n}\n\n// Function to read a line of input and convert it to an integer array\nfunc readIntArray() -> [Int] {\n    let input = readLine() ?? \"\"\n    return input.split(separator: \" \").compactMap { Int($0) }\n}\n\n// Read the list of numbers from the user\nprint(\"Enter a list of numbers separated by spaces:\")\nlet numbers = readIntArray()\n\n// Read the value to search for\nprint(\"Enter the number to search for:\")\nguard let valueToSearch = Int(readLine() ?? \"\") else {\n    print(\"Invalid input for the number to search for.\")\n    exit(1)\n}\n\n// Perform linear search\nif let foundIndex = linearSearch(numbers, valueToSearch) {\n    print(\"Value \\(valueToSearch) found at index \\(foundIndex)\")\n} else {\n    print(\"Value \\(valueToSearch) not found in the list\")\n}\n",
  "typescript": "\nconsole.log(LinearSearch([6, 56, 98, 12], 98))\n\nfunction LinearSearch(sequence: number[], target: number): number {\n      for (let j=0; j < sequence.length; j++) {\n            if (sequence[j] == target) {\n                  return j;               // Target found !\n            }\n      }\n      return -1;                          // Target not found                      \n}\n\n",
  "description": "\n## Write a program to implement linear search\n\nLinear search is a very simple search algorithm. In this type of search, a sequential search is made over all items one by one. Every item is checked and if a match is found then that particular item is returned, otherwise the search continues till the end of the data collection.\r\n\r\nLinear search is the simplest search algorithm. For this reason, it is often called sequential search.\r\n\r\n### Pseudocode\r\n\r\n```text\r\nprocedure linear_search (list, value)\r\n\r\n   for each item in the list\r\n      if match item == value\r\n         return the item's location\r\n      end if\r\n   end for\r\n\r\nend procedure\r\n```\r\n\r\n### Example\r\n\r\n```text\r\nlist = [1,2,3,4,5]\r\nvalue = 4\r\n\r\nOutput : 3\r\n```\n\n---\n",
  "trackId": 5289,
  "lastUpdated": "2024-07-03T04:10:17Z",
  "contributors": [
    "Riyazul555",
    "harshraj8843",
    "pramod-karkhani",
    "Parvezkhan0",
    "David-FR",
    "RithikaReddyK",
    "SaifullahBijapur",
    "MohitKambli",
    "srivamsidandu",
    "Murgowt",
    "PunugupatiSaikumar",
    "DaniilKarpushko",
    "Redzwinger",
    "DH4NRAJ",
    "joenjogu",
    "Amedi-Imbira",
    "SnailDragon"
  ],
  "julia": "function linear_search(arr, target)\r\n    for (index, value) in enumerate(arr)\r\n        if value == target\r\n            return index\r\n        end\r\n    end\r\n    return -1  # If target not found\r\nend\r\n\r\n\r\n# Example showing the implementation of linear search\r\ndata = [1, 3, 5, 7, 9, 11, 13, 15]\r\ntarget_value = 7\r\n\r\n\r\nresult = linear_search(data, target_value)\r\n\r\nif result != -1\r\n    println(\"Target value $target_value found at index $result.\")\r\nelse\r\n    println(\"Target value $target_value not found in the given array.\")\r\nend\r\n",
  "dart": "import 'dart:io';\n\nint linearSearch(List<int> list, int value) {\n  for (int i = 0; i < list.length; i++) {\n    if (list[i] == value) {\n      return i; // Return the index of the found item\n    }\n  }\n  return -1; // Return -1 if the value is not found in the list\n}\n\nvoid main() {\n  print(\"Enter integers for the list separated by space:\");\n  String input = stdin.readLineSync() ?? '';\n  List<int> list = input.split(' ').map((e) => int.tryParse(e) ?? 0).toList();\n\n  print(\"Enter the value to search:\");\n  int value = int.tryParse(stdin.readLineSync() ?? '') ?? 0;\n\n  int result = linearSearch(list, value);\n\n  if (result != -1) {\n    print(\"Value $value found at index $result.\");\n  } else {\n    print(\"Value $value not found in the list.\");\n  }\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar index = linearSearch([5]int{1, 2, 3, 4, 5}, 4)\n\tfmt.Println(index)\n}\n\nfunc linearSearch(array [5]int, target int) int {\n\tfor i := 0; i < len(array); i++ {\n\t\tif array[i] == target {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n",
  "haskell": "-- Linear search in Haskell\nlinearSearch :: (Eq a) => [a] -> a -> Maybe Int\nlinearSearch list value = search list value 0\n  where\n    search [] _ _ = Nothing\n    search (x:xs) v index\n      | x == v    = Just index\n      | otherwise = search xs v (index + 1)\n\n-- Example usage\nmain :: IO ()\nmain = do\n    let list = [64, 25, 12, 22, 11]\n    let value = 22\n    let result = linearSearch list value\n    case result of\n        Just index -> putStrLn $ \"Value found at index: \" ++ show index\n        Nothing    -> putStrLn \"Value not found in the list\"\n",
  "php": "<?php\nfunction linear_search($list, $value) {\n    $length = count($list);\n    for ($i = 0; $i < $length; $i++) {\n        if ($list[$i] == $value) {\n            return $i; // Found the value, return its location/index\n        }\n    }\n    return -1; // Value not found in the list\n}\n\n// Prompt the user to enter a list of numbers separated by spaces\necho \"Enter a list of numbers separated by spaces: \";\n$input = trim(fgets(STDIN));\n$list = explode(' ', $input);\n\n// Prompt the user to enter the value to search for\necho \"Enter the value to search for: \";\n$searchValue = trim(fgets(STDIN));\n\n$result = linear_search($list, $searchValue);\n\nif ($result != -1) {\n    echo \"Value $searchValue found at index $result\";\n} else {\n    echo \"Value $searchValue not found in the list\";\n}\n?>\n",
  "perl": "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nsub linear_search {\n    my ($list_ref, $value) = @_;\n    my @list = @$list_ref;\n\n    for my $i (0 .. $#list) {\n        if ($list[$i] == $value) {\n            return $i;\n        }\n    }\n\n    return -1; # Not found\n}\n\n# Input the list from the user\nprint \"Enter numbers separated by spaces: \";\nmy $input = <STDIN>;\nchomp($input);\nmy @list = split(/\\s+/, $input);\n\n# Input the value to search for\nprint \"Enter the value to search for: \";\nmy $value = <STDIN>;\nchomp($value);\n\nmy $index = linear_search(\\@list, $value);\n\nif ($index != -1) {\n    print \"Output: $index\\n\";\n} else {\n    print \"Value not found in the list.\\n\";\n}\n",
  "python": "def main() -> None:\n    \"\"\"Python program to implement linear search\"\"\"\n    S = [1, 2, 3, 4, 5]  # Test cases\n    value = 4\n\n    search = linear_search(S, value)\n\n    if search == -1:\n        print(\"Element not found\")\n    else:\n        print(f\"Element found at index {search}\")\n\n\ndef linear_search(seq: list[int | str], value: int | str) -> int:\n    \"\"\"Linear search function\n\n    Args:\n        seq (_type_): sequence within to perform the search\n        value (_type_): value to be searched\n\n    Returns:\n        int: index (location of value)\n    \"\"\"\n    for j in range(len(seq)):\n        if seq[j] == value:\n            return j\n    return -1\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "r": "# Linear search function\nlinear_search <- function(list, value) {\n  for (i in 1:length(list)) {\n    if (list[i] == value) {\n      return(i)  # Return the index of the value if found\n    }\n  }\n  return(-1) # Return -1 if value is not found in the list\n}\n\n# Example usage\nlist <- c(1, 2, 3, 4, 5)\nvalue <- 4\nresult <- linear_search(list, value)\nif (result != -1) {\n  cat(\"Value found at index:\", result)\n} else {\n  cat(\"Value not found in the list.\")\n}\n",
  "rust": "fn linear_search<T: PartialEq>(list: &[T], target: T) -> Option<usize> {\n    for (index, item) in list.iter().enumerate() {\n        if item == &target {\n            return Some(index);\n        }\n    }\n    None\n}\n\nfn main() {\n    let elements = vec![1, 2, 3, 4, 5];\n    let target = 4;\n\n    match linear_search(&elements, target) {\n        Some(index) => println!(\"Found the element {} at index {}\", target, index),\n        None => println!(\"Element {} not found in the list\", target),\n    }\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "scala",
    "swift",
    "typescript",
    "julia",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}