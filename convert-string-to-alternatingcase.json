{
  "slug": "convert-string-to-alternatingcase",
  "title": "Convert String To Alternatingcase",
  "c": "#include <stdio.h>\n\nint main()\n{\n    char str[10000] = \"hello world\";\n    int cap = 0;\n    for (int i = 0; str[i]; i++)\n    {\n        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')) // if it is alphabet\n        {\n            if (cap == 0) // this need to be lowercase\n            {\n                if (str[i] >= 'A' && str[i] <= 'Z')\n                {\n                    str[i] = (char)((str[i] - 'A') + 'a'); // convert uppercase to lowercase\n                }\n                cap = 1;\n            }\n            else\n            { // this need to be uppercase\n                if (str[i] >= 'a' && str[i] <= 'z')\n                {\n                    str[i] = (char)((str[i] - 'a') + 'A'); // convert lowercase to uppercase\n                }\n                cap = 0;\n            }\n        }\n    }\n    printf(\"%s\\n\", str);\n}",
  "c-plus-plus": "#include <iostream>\r\n#include <string>\r\n#include <cctype>\r\n\r\nusing namespace std;\r\n\r\n// Replaces all characters in string to the opposite case\r\nstring AlternateCase(string str) {\r\n\tint len = str.length();\r\n\tbool cap = false;\r\n\tfor (int i = 0; i < len; i++) {\r\n\t\tif (cap == false) {\r\n\t\t\tstr[i] = toupper(str[i]);\r\n\t\t\tcap = true;\r\n\t\t}\r\n\t\telse if (cap == true) {\r\n\t\t\tstr[i] = tolower(str[i]);\r\n\t\t\tcap = false;\r\n\t\t}\r\n\t}\r\n\treturn str;\r\n}\r\n\r\n\r\nint main()\r\n{\r\n\tstring str = \"Hello World\";\r\n\tstr = AlternateCase(str);\r\n\tcout << str;\r\n}",
  "c-sharp": "using System;\n\nclass MainClass {\n    public static void Main (string[] args) {\n    Console.WriteLine (\"Please enter a String:\");\n    string str = Console.ReadLine();\n    string x = \"\";\n    for (int i = 0; i < str.Length; i++) {\n      char ch = str[i];\n      if (i%2 == 0) {\n        x += Char.ToLower(ch);\n      }\n      else {\n        x += Char.ToUpper(ch);\n      }\n    }\n    Console.WriteLine(\"Alternating Case :\"+x);\n  }\n}\n",
  "f-sharp": "open System\n\nlet alternatingCase (input: string) =\n    let convert (c: char) (isUpper: bool) =\n        match Char.IsLetter c with\n        | true -> if isUpper then Char.ToUpper c else Char.ToLower c\n        | false -> c\n\n    let rec loop (str: string) (index: int) (isUpper: bool) =\n        if index < str.Length then\n            let updatedChar = convert str.[index] isUpper\n            let nextIsUpper = if Char.IsLetter str.[index] then not isUpper else isUpper\n            updatedChar.ToString() + loop str (index + 1) nextIsUpper\n        else\n            \"\"\n\n    loop input 0 false  // Start with lowercase for the first character\n\n// Example usage\nlet result = alternatingCase \"hello world\"\nprintfn \"%s\" result",
  "java": "import java.util.Scanner;\npublic class alternatingCase {\n   public static void main(String[] args) {\n      Scanner sc = new Scanner(System.in);\n      System.out.println(\"Enter a string :\");\n      String str = sc.nextLine();\n      str = str.toLowerCase();\n      char[] ch = str.toCharArray();\n      for(int i=0; i<ch.length; i=i+2){\n         ch[i] = Character.toUpperCase(ch[i]);\n      }\n      System.out.println(new String(ch));\n   }\n}\n",
  "javascript": "function alternatingCase(str) {\n  return str\n    .split(\"\")\n    .map((c, i) => (i % 2 === 0 ? c.toLowerCase() : c.toUpperCase()))\n    .join(\"\");\n}\n\nconsole.log(alternatingCase(\"hello world\"));\n",
  "kotlin": "fun alternatingCase(input: String): String {\n    return input.mapIndexed { index, char ->\n        if (index % 2 == 0) {\n            char.toLowerCase()\n        } else {\n            char.toUpperCase()\n        }\n    }.joinToString(\"\")\n}\n\nfun main() {\n    println(\"Enter a string: \")\n    val inputString = readLine() ?: \"\"\n    val convertedString = alternatingCase(inputString)\n    println(\"Alternating Case String: $convertedString\")\n}\n",
  "ruby": "def stringAlternateCase string\n    newstr = []\n    string.split(\"\").each_with_index do |word, i|\n        i.even? ? newstr << word.downcase : newstr << word.upcase\n    end\n    puts newstr.join(\"\")\nend\n\nstringAlternateCase \"hello world\"",
  "swift": "import Foundation\n\nfunc toAlternatingCase(_ input: String) -> String {\n    var result = \"\"\n    var shouldUppercase = false\n\n    for character in input {\n        if character.isLetter {\n            if shouldUppercase {\n                result += character.uppercased()\n            } else {\n                result += character.lowercased()\n            }\n            shouldUppercase.toggle()\n        } else {\n            result += String(character)\n        }\n    }\n\n    return result\n}\n\nlet inputString = \"hello world\"\nlet outputString = toAlternatingCase(inputString)\nprint(outputString)\n",
  "typescript": "const alternatingCase = (str: string): string => {\n  return str\n    .split(\"\")\n    .map((c, i) => (i % 2 === 0 ? c.toLowerCase() : c.toUpperCase()))\n    .join(\"\");\n};\n\nconsole.log(alternatingCase(\"hello world\"));\n",
  "description": "\n## Write a program to convert string to alternatingcase\n\nAlternatingcase is a style of writing in which each letter is converted to its opposite case.\n\n```txt\nInput  : \"hello world\"\nOutput : \"hElLo WoRlD\"\n```\n\n---\n",
  "trackId": 5316,
  "lastUpdated": "2023-12-01T16:58:56Z",
  "contributors": [
    "vamsipasam2000",
    "patilanuja",
    "kenroulier",
    "bhushanmarathe",
    "moaldeen",
    "pedram-mohajer",
    "pranavsilimkhan",
    "anandfresh",
    "harshraj8843",
    "apurvagandhi",
    "Tushar12222",
    "AdityaNarayanPradhan",
    "Pinklemonade33",
    "jfinley6"
  ],
  "julia": "print(\"Enter a string: \")\nstr = readline(stdin)\nprintln(String([i%2 == 0 ? uppercase(c) : c for (i, c) in enumerate(str)]))\n",
  "scala": "fun alternatingCase(input: String): String {\n    return input.mapIndexed { index, char ->\n        if (index % 2 == 0) {\n            char.toLowerCase()\n        } else {\n            char.toUpperCase()\n        }\n    }.joinToString(\"\")\n}\n\nfun main() {\n    println(\"Enter a string: \")\n    val inputString = readLine() ?: \"\"\n    val convertedString = alternatingCase(inputString)\n    println(\"Alternating Case String: $convertedString\")\n}\n",
  "dart": "void alterCase(String s){\n  s = s.toLowerCase();\n  String answer = \"\";\n  int cap = 0;\n  for(var i = 0 ; i < s.length ; i++){\n    if(s[i] == \" \"){\n      answer += s[i];\n      continue;\n    }\n    if(cap % 2 != 0){\n      answer += s[i].toUpperCase();\n    }\n    else{\n      answer += s[i];\n    }\n    cap += 1;\n  }\n  print(answer);\n}\n\n\nvoid main() {\n  alterCase(\"Hello World\");\n}",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\tinput := \"hello world\"\n\toutput := \"\"\n\tfor i, r := range input {\n\t\tif i%2 == 0 {\n\t\t\toutput += strings.ToUpper(string(r))\n\t\t} else {\n\t\t\toutput += strings.ToLower(string(r))\n\t\t}\n\t}\n\tfmt.Println(output)\n}\n",
  "haskell": "import Data.Char (toLower, toUpper)\n\n-- Function to convert a string to alternating case\ntoAlternatingCase :: String -> String\ntoAlternatingCase = go True\n  where\n    go _ [] = []\n    go toLowerCase (x:xs)\n      | toLowerCase && x /= ' ' = toLower x : go (not toLowerCase) xs\n      | x /= ' ' = toUpper x : go (not toLowerCase) xs\n      | otherwise = x : go toLowerCase xs\n\n-- Main function to demonstrate the conversion\nmain :: IO ()\nmain = do\n  let input = \"hello world\"\n  putStrLn $ toAlternatingCase input\n",
  "php": "<?php\n\nfunction alternatingCase($str) {\n \n    $do_caps = false;\n    $result = '';\n    for ($i = 0; $i < strlen($str); $i++)\n    {\n      $char = substr($str, $i, 1);\n      if (stripos('abcdefghijklmnopqrstuvwxyz', $char) !== false)\n      {\n            if ($do_caps)\n            {\n                $char = strtoupper($char);\n                $do_caps = false;\n            }\n            else\n            {\n                $do_caps = true;\n            }\n      }\n      $result .= $char;\n    }\n    return $result;\n}\n\necho alternatingCase(\"hello world\")\n\n?>\n",
  "perl": "#!/usr/bin/perl \nuse strict; \nuse warnings; \n  \nmy $str = 'hello world'; \nmy @spl = split('', $str); \nmy $index = 0;\nforeach my $i (@spl)  \n{   \n    if ($index%2==0) {\n    print lc(\"$i\");\n    } else{\n    print uc(\"$i\");\n    }\n    $index++;\n} \n",
  "python": "input = input(\"Enter a String : \")\nres = \"\"\nfor idx in range(len(input)):\n    if not idx % 2:\n        res = res + input[idx].lower()\n    else:\n        res = res + input[idx].upper()\n\nprint(\"The alternate case string : \" + str(res))\n",
  "r": "convert_to_alternating_case <- function(input_string) {\n  result <- \"\"\n  to_upper <- FALSE  # Start with converting the first character to lowercase\n\n  for (char in strsplit(input_string, NULL)[[1]]) {\n    if (char %in% letters) {\n      if (to_upper) {\n        result <- paste0(result, toupper(char))\n      } else {\n        result <- paste0(result, tolower(char))\n      }\n      to_upper <- !to_upper  # Switch the case for the next character\n    } else {\n      result <- paste0(result, char)\n    }\n  }\n  return(result)\n}\n\n# Example usage\ninput_str <- \"hello world\"\noutput_str <- convert_to_alternating_case(input_str)\n\n# Print the result\ncat(\"Input String: \", input_str, \"\\n\")\ncat(\"Output String: \", output_str, \"\\n\")\n",
  "rust": "// This RUST program requires the convert_case (ccase) routines\n//\tfor details see - https://docs.rs/convert_case/latest/convert_case/\n// Convert case must be added to the Cargo.toml file:\n//\tcommand:$ cargo add convert_case\n\nuse convert_case::{Case, Casing};\nuse std::io;\n\nfn convert_string_to_alternatingcase(strin: &str) -> String{\n\n\t// use the string in (strin) varible as the source to change to alternating case\n\tlet s: String = String::from(strin);\n \n \t// use the to_case call to convert and return to the answer to the caller\n\tlet ans = s.to_case(Case::Alternating);\n\treturn ans;\n}\n\nfn main(){\n\n\t// the input string and this main function can be removed. This is simply for testing\n\tlet mut strin = String::new();\n\tlet _rtrn = io::stdin().read_line(&mut strin);\n\t\n\tlet dum = convert_string_to_alternatingcase(&strin);\n\n\t// print out the results of the conversion.\n\tprintln!(\"{}\", dum);\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}