{
  "slug": "convert-decimal-to-hexadecimal",
  "title": "Convert Decimal To Hexadecimal",
  "c": "#include <stdio.h>\n\nint main() {\n    int decimalNum, remainder, quotient;\n    char hexadecimalNum[10];\n    int i = 1, j;\n\n    printf(\"Enter a decimal number: \");\n    scanf(\"%d\", &decimalNum);\n\n    quotient = decimalNum;\n\n    while (quotient != 0) {\n        remainder = quotient % 16;\n        if (remainder < 10)\n            hexadecimalNum[i++] = 48 + remainder;\n        else\n            hexadecimalNum[i++] = 55 + remainder;\n        quotient = quotient / 16;\n    }\n\n    printf(\"Hexadecimal number of %d is: \", decimalNum);\n\n    for (j = i - 1; j > 0; j--)\n        printf(\"%c\", hexadecimalNum[j]);\n\n    return 0;\n}\n",
  "c-plus-plus": "#include <iostream>\n#include <string>\nusing namespace std;\n// This gives value of char in decimal\nint NumberCharToValue(char ch, int base)\n{\n    if (ch >= '0' && ch <= '9')\n    {\n        return (int)(ch - '0');\n    }\n    // next will be A,B,C....\n    return ((int)(ch - 'A') + 10);\n}\n// This gives char of value in decimal\nchar NumberValueToChar(int num, int base)\n{\n    if (num <= 9)\n    {\n        return (char)('0' + num);\n    }\n    // num will be 10,11,12 ...\n    return (char)(num - 10 + 'A');\n}\n// idea is to convert input to decimal then from decimal to output\nvoid convertNumberSystem(char *input, char *output, int fromBase, int toBase)\n{\n    // convert input to decimal\n    int inputLength = strlen(input);\n    long long decimal = 0, digitPower = 1;\n\n    for (int i = inputLength - 1; i >= 0; i--)\n    {\n        decimal += NumberCharToValue(input[i], fromBase) * digitPower;\n        digitPower *= fromBase;\n    }\n\n    // convert decimal to reversed output\n    int outputIndex = 0;\n    while (decimal != 0)\n    {\n        output[outputIndex++] = NumberValueToChar(decimal % toBase, toBase);\n        decimal /= toBase;\n    }\n    // reverse the output to get actual output\n    for (int i = 0; i < outputIndex / 2; i++)\n    {\n        int temp = output[i];\n        output[i] = output[outputIndex - i - 1];\n        output[outputIndex - i - 1] = temp;\n    }\n}\n\nint main()\n{\n\n    char input[10000], output[10000];\n\n    cin >> input;\n\n    convertNumberSystem(input, output, 10, 16); // This function can convert from a number from any base to another base\n\n    cout << output << \"\\n\";\n\n    return 0;\n}",
  "c-sharp": "using System;\nusing System.Collections.Generic;\n\npublic static class ConvertDecimalToHexadecimal\n{\n    private static Dictionary<int, string> hexadecimalMap = new Dictionary<int, string>()\n    {\n        {0, \"0\"},\n        {1, \"1\"},\n        {2, \"2\"},\n        {3, \"3\"},\n        {4, \"4\"},\n        {5, \"5\"},\n        {6, \"6\"},\n        {7, \"7\"},\n        {8, \"8\"},\n        {9, \"9\"},\n        {10, \"A\"},\n        {11, \"B\"},\n        {12, \"C\"},\n        {13, \"D\"},\n        {14, \"E\"},\n        {15, \"F\"}\n    };\n\n    public static void ConvertToHexadecimal(int number = 10)\n    {\n        List<int> resultToConvert = new List<int>();\n\n        while (number > 0)\n        {\n            resultToConvert.Add(number % 16);\n            number /= 16;\n        }\n\n        Console.WriteLine(CreateResult(resultToConvert));\n    }\n\n    private static string CreateResult(List<int> toConvert)\n    {\n        string result = string.Empty;\n\n        for (int i = toConvert.Count - 1; i >= 0; i--)\n        {\n            result += hexadecimalMap[toConvert[i]];\n        }\n\n        return result;\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        ConvertDecimalToHexadecimal.ConvertToHexadecimal(10);\n    }\n}\n",
  "java": "\nimport java.util.AbstractMap.SimpleEntry;\n\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class ConversationDecTohex {\n\npublic static String dectoHex(int m) {\n\tString s = \"\";\n\twhile (m > 0) {\n\t\tint rest = m % 16;\n\t\tif (rest < 10) {\n\t\t\ts = String.valueOf(rest) + s;\n\t\t} else {\n\t\t\ts = map.get(rest) + s;\n\t\t}\n\t\tm = m / 16;\n\t}\n\treturn s;\n}\n\nstatic Map<Integer, String> map = Stream\n\t\t.of(new SimpleEntry<>(10, \"A\"), new SimpleEntry<>(11, \"B\"), new SimpleEntry<>(12, \"C\"),\n\t\t\t\tnew SimpleEntry<>(13, \"D\"), new SimpleEntry<>(14, \"E\"), new SimpleEntry<>(15, \"F\"))\n\t\t.collect(Collectors.toMap(SimpleEntry::getKey, SimpleEntry::getValue));\n}\n",
  "javascript": "function convertToHex(decimalNumber) {\n  let remaindersSequence = [];\n  let remainder = decimalNumber % 16;\n  let quotient = Math.floor(decimalNumber / 16);\n  remaindersSequence.push(remainder);\n\n  do {\n    remainder = quotient % 16;\n    quotient = Math.floor(quotient / 16);\n\n    if (remainder > 0) remaindersSequence.push(remainder);\n  } while (remainder !== 0);\n\n  return remaindersSequence.reverse().join(\" \");\n}\n\nconsole.log(convertToHex(1500));\n",
  "kotlin": "import java.util.*\n\nfun main(args: Array<String>) {\n    val input = Scanner(System.`in`)\n    var dec = input.nextInt()\n\n    // For storing remainder\n    var rem: Int\n\n    // For storing result\n    var hexdec = \"\"\n\n    // Digits in hexadecimal number system\n    val hex = charArrayOf('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')\n    while (dec>0) {\n        rem = dec % 16\n        hexdec = hex[rem].toString() + hexdec\n        dec = dec / 16\n    }\n    println(hexdec)\n}\n",
  "ruby": "def decimal_to_hexadecimal(decimal)\n\n  hex_digits = \"0123456789ABCDEF\"\n\n\n  hexadecimal = \"\"\n\n\n  while decimal > 0\n    # Get the remainder when divided by 16\n    remainder = decimal % 16\n\n\n    hexadecimal = hex_digits[remainder] + hexadecimal\n\n\n    decimal /= 16\n  end\n\n  return hexadecimal\nend\n\ndecimal_number = 255\n\n# Convert and print the result\nhexadecimal_number = decimal_to_hexadecimal(decimal_number)\nputs \"Decimal: #{decimal_number} => Hexadecimal: #{hexadecimal_number}\"\n",
  "swift": "func decimalToHexadecimal(_ decimal: Int) -> String {\n    let hexDigits = \"0123456789ABCDEF\"\n    var hexString = \"\"\n    var number = decimal\n    \n    while number > 0 {\n        let remainder = number % 16\n        if let hexDigit = hexDigits.character(at: remainder) {\n            hexString = String(hexDigit) + hexString\n        }\n        number /= 16\n    }\n    \n    return hexString.isEmpty ? \"0\" : hexString\n}\n\nextension String {\n    func character(at n: Int) -> Character? {\n        return Array(self)[safe: n]\n    }\n}\n\nextension Array {\n    subscript(safe index: Int) -> Element? {\n        return indices.contains(index) ? self[index] : nil\n    }\n}\n\n// Example usage\nlet decimalNumber = 255\nlet hexadecimalNumber = decimalToHexadecimal(decimalNumber)\nprint(\"Decimal: \\(decimalNumber), Hexadecimal: \\(hexadecimalNumber)\"\n",
  "typescript": "const letters = new Map([\n  [\"10\", \"A\"],\n  [\"11\", \"B\"],\n  [\"12\", \"C\"],\n  [\"13\", \"D\"],\n  [\"14\", \"E\"],\n  [\"15\", \"F\"],\n]);\n\nconst decimalToHexadecimal = (number: number): string => {\n  let hexFormat = \"\";\n  let quotient, remainder;\n  while (number) {\n    quotient = Math.trunc(number / 16);\n    remainder = String(number % 16);\n    hexFormat = (letters.get(remainder) ?? remainder) + hexFormat;\n    number = quotient;\n  }\n  return hexFormat;\n};\n\nconsole.log(decimalToHexadecimal(11)); // B\nconsole.log(decimalToHexadecimal(32)); // 20\n",
  "description": "\n## Write a program to convert decimal to hexadecimal\n\nHexadecimal is a base-16 number system. It uses sixteen digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, and F. The digits are called hexits. A hexit is the smallest unit of information in a computer. A hexit can be used to represent a single value, such as 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, or F, or it can be used to represent a single state, such as on or off.\n\nTo convert a decimal number to hexadecimal, we can use the following algorithm:\n\n1. Divide the decimal number by 16.\n2. Write down the remainder.\n3. Divide the quotient by 16.\n4. Write down the remainder.\n5. Repeat steps 3 and 4 until the quotient is 0.\n6. The hexadecimal number is the sequence of remainders written in reverse order.\n\n```txt\nInput  : 10\nOutput : A\n```\n\n---\n",
  "trackId": 3894,
  "lastUpdated": "2024-04-13T17:59:23Z",
  "contributors": [
    "David-FR",
    "MadhuS-1605",
    "anandfresh",
    "harshraj8843",
    "LinoyYarkoni",
    "RiteshK-611",
    "AdityaNarayanPradhan",
    "pokharel-nishan",
    "vedantpople4",
    "joao-vitor-souza",
    "deveshpandee",
    "castanedadev-edu",
    "aghiles-medane",
    "dmosc",
    "ArthurGossel1"
  ],
  "julia": "println(\"Enter a decimal number: \") \nx = readline()\ny = parse(Int, x)\ny = string(y, base=16)\nprintln(\"Hexadecimal of \", x, \": \", uppercase(y))",
  "scala": "object Main extends App {\n  var num = 10\n  printf(\"%d in hexadecimal is %X\", num, num)\n}\n",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc main() {\n\tvar num int64\n\tfmt.Scanf(\"%d\", &num)\n\tanswer := strconv.FormatInt(num, 16)\n\tfmt.Println(answer)\n}\n",
  "php": "<?php\n\n$decimal = readline();\n$possibleChars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n$hexaCharsMapping = [\"10\" => \"A\", \"11\" => \"B\", \"12\" => \"C\", \"13\" => \"D\", \"14\" => \"E\", \"15\" => \"F\"];\n$hexadecimal = \"\";\n\nfunction map($num)\n{\n    global $hexaCharsMapping;\n    if (in_array($num, [10, 11, 12, 13, 14, 15])) {\n        return $hexaCharsMapping[$num];\n    } else {\n        return $num;\n    }\n}\n\nforeach (str_split($decimal) as $key => $value) {\n    if (!in_array($value, $possibleChars)) {\n        exit(\"Input contains an invalid value: \" . $value . \"\\n\");\n    }\n}\n\nwhile (true) {\n    $quocient = floor($decimal / 16);\n    if ($quocient < 1) {\n        $hexadecimal .= map($decimal);\n        break;\n    }\n    $remainder = $decimal % 16;\n    $decimal = $quocient;\n    $hexadecimal .= map($remainder);\n}\n\necho strrev($hexadecimal) . \"\\n\";\n\n?>",
  "perl": "print \"Please enter a decimal value : \";\n$decimal = <STDIN>;\nprintf(\"Equivalent Hexadecimal value : %X\\n\",$decimal);\n",
  "python": "print(hex(int(input())).split(\"x\")[-1])\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "go",
    "php",
    "perl",
    "python"
  ]
}