{
  "slug": "implement-selection-sort",
  "title": "Implement Selection Sort",
  "c": "#include <stdio.h>\n\n// Function declarations\nvoid swap(int *x, int *y);\nvoid selectionSort(int arr[], size_t n);\nvoid printArray(const int arr[], size_t size);\n\nint main() {\n    // Sample array to be sorted\n    int arr[] = {8, 5, 2, 6, 9, 3, 1, 4, 0, 7};\n    size_t n = sizeof(arr) / sizeof(arr[0]);\n\n    // Sorting the array using the selection sort algorithm\n    selectionSort(arr, n);\n\n    // Displaying the sorted array\n    printf(\"Sorted array: \\n\");\n    printArray(arr, n);\n\n    return 0;\n}\n\n// Function to swap two integers\nvoid swap(int *x, int *y) {\n    int temp = *x;\n    *x = *y;\n    *y = temp;\n}\n\n// Function to perform selection sort on an array\nvoid selectionSort(int arr[], size_t n) {\n    // Traverse through all array elements\n    for (size_t i = 0; i < n; i++) {\n        // set current element as minimum\n        size_t min_index = i;\n\n        // Compare with the rest of the elements\n        for (size_t j = i + 1; j < n; j++) {\n            if (arr[j] < arr[min_index]) {\n                min_index = j;\n            }\n        }\n\n        // Swap the found minimum element with the current element\n        if (min_index != i) {\n            swap(&arr[min_index], &arr[i]);\n        }\n    }\n}\n\n// Function to print elements of an array\nvoid printArray(const int arr[], size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n",
  "c-plus-plus": "#include <iostream>\n#include <vector>\n\nvoid selectionSort(std::vector<int>& list) {\n    int n = list.size();\n    \n    for (int i = 0; i < n - 1; ++i) {\n        // Set current element as minimum\n        int minIndex = i;\n        \n        // Check the element to be minimum\n        for (int j = i + 1; j < n; ++j) {\n            if (list[j] < list[minIndex]) {\n                minIndex = j;\n            }\n        }\n        \n        // Swap the minimum element with the current element\n        if (minIndex != i) {\n            std::swap(list[i], list[minIndex]);\n        }\n    }\n}\n\nint main() {\n    std::vector<int> unsortedList = {64, 25, 12, 22, 11};\n    \n    selectionSort(unsortedList);\n    \n    std::cout << \"Sorted list: \";\n    for (int num : unsortedList) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}\n",
  "c-sharp": "using System;\n\nclass SelectionSort {\n    static void Main(string[] args) {\n        int[] arr = {8, 5, 2, 6, 9, 3, 1, 4, 0, 7};\n        Console.WriteLine(\"Input array:\");\n        PrintArray(arr);\n\n        SelectionSortAlgorithm(arr);\n\n        Console.WriteLine(\"\\nSorted array:\");\n        PrintArray(arr);\n    }\n\n    static void SelectionSortAlgorithm(int[] arr) {\n        int n = arr.Length;\n        for (int i = 0; i < n - 1; i++) {\n            int minIndex = i;\n            for (int j = i + 1; j < n; j++) {\n                if (arr[j] < arr[minIndex]) {\n                    minIndex = j;\n                }\n            }\n            if (minIndex != i) {\n                // Swap arr[minIndex] and arr[i]\n                int temp = arr[minIndex];\n                arr[minIndex] = arr[i];\n                arr[i] = temp;\n            }\n        }\n    }\n\n    static void PrintArray(int[] arr) {\n        foreach (int num in arr) {\n            Console.Write(num + \" \");\n        }\n        Console.WriteLine();\n    }\n}\n",
  "f-sharp": "let selectionSort (arr: int[]) =\n    let swap (arr: int[]) (i: int) (j: int) =\n        let temp = arr.[i]\n        arr.[i] <- arr.[j]\n        arr.[j] <- temp\n\n    let findMinIndex (arr: int[]) (start: int) =\n        let mutable minIndex = start\n        for i = start + 1 to arr.Length - 1 do\n            if arr.[i] < arr.[minIndex] then\n                minIndex <- i\n        minIndex\n\n    for i = 0 to arr.Length - 2 do\n        let minIndex = findMinIndex arr i\n        if minIndex <> i then\n            swap arr minIndex i\n\n// Test the selectionSort function\nlet arr = [| 64; 25; 12; 22; 11 |]\nselectionSort arr\nprintfn \"Sorted array: %A\" arr\n",
  "java": "public class SelectionSort {\r\n    \r\n    public static void main(String[] args) {\r\n        int[] sortedArray = selectionSort([8, 5, 2, 6, 9, 3, 1, 4, 0, 7]);\r\n        printArray(sortedArray);\r\n    }\r\n\r\n    public static int[] selectionSort(int[] list) {\r\n        for (int i = 0; i < list.length - 1; i++) {\r\n            int minInd = i;\r\n\r\n            for (int j = i + 1; j < list.length; j++) {\r\n                if (arr[j] < arr[minInd]) {\r\n                    minInd = j;\r\n                }\r\n            }\r\n\r\n            if (minInd != i) {\r\n                int temp = arr[i];\r\n                arr[i] = arr[minInd];\r\n                arr[minInd] = temp;\r\n            }\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    public static void printArray(int[] arr) {\r\n        for (int value : arr) {\r\n            System.out.print(value + \" \");\r\n        }\r\n        System.out.println();\r\n    }\r\n}",
  "javascript": "function selectionSort(arr) {\n    const n = arr.length;\n\n    for (let i = 0; i < n - 1; i++) {\n        // Assume the current index is the minimum\n        let minIndex = i;\n\n        // Find the index of the minimum element in the remaining unsorted array\n        for (let j = i + 1; j < n; j++) {\n            if (arr[j] < arr[minIndex]) {\n                minIndex = j;\n            }\n        }\n\n        // Swap the found minimum element with the element at the current index\n        if (minIndex !== i) {\n            [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n        }\n    }\n}\n\n// Example usage:\nlet arrayToSort = [64, 25, 12, 22, 11];\nselectionSort(arrayToSort);\nconsole.log(\"Sorted array:\", arrayToSort);\n",
  "kotlin": "fun selectionSort(arr: IntArray) {\n    val n = arr.size\n\n    for (i in 0 until n - 1) {\n        // Assume the current element is the minimum\n        var minIndex = i\n\n        // Check the rest of the array for a smaller element\n        for (j in i + 1 until n) {\n            if (arr[j] < arr[minIndex]) {\n                minIndex = j\n            }\n        }\n\n        // Swap the minimum element with the current element\n        if (minIndex != i) {\n            val temp = arr[i]\n            arr[i] = arr[minIndex]\n            arr[minIndex] = temp\n        }\n    }\n}\n\nfun main() {\n    // Example usage\n    val arrayToSort = intArrayOf(64, 25, 12, 22, 11)\n    \n    println(\"Original Array: ${arrayToSort.joinToString()}\")\n    \n    selectionSort(arrayToSort)\n    \n    println(\"Sorted Array: ${arrayToSort.joinToString()}\")\n}\n",
  "ruby": "def selection_sort(list)\n  n = list.length\n  \n  for i in 0...(n - 1)\n    # Set current element as minimum\n    min_index = i\n    \n    # Check the element to be minimum\n    for j in (i + 1)...n\n      if list[j] < list[min_index]\n        min_index = j\n      end\n    end\n    \n    # Swap the minimum element with the current element\n    if min_index != i\n      list[i], list[min_index] = list[min_index], list[i]\n    end\n  end\n  \n  list\nend\n\n# Example usage:\nunsorted_list = [64, 25, 12, 22, 11]\nsorted_list = selection_sort(unsorted_list)\nputs \"Sorted list: #{sorted_list}\"\n",
  "scala": "object SelectionSort {\n\n  def selectionSort(data: Array[Int]): Unit = {\n    for (i <- 0 until data.length - 1) {\n      var minIndex = i\n      for (j <- i + 1 until data.length) {\n        if (data(j) < data(minIndex)) {\n          minIndex = j\n        }\n      }\n      if (i != minIndex) {\n        val temp = data(i)\n        data(i) = data(minIndex)\n        data(minIndex) = temp\n      }\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = Array(8, 5, 2, 6, 9, 3, 1, 4, 0, 7)\n    println(\"Input: \" + numbers.mkString(\", \"))\n    selectionSort(numbers)\n    println(\"Output: \" + numbers.mkString(\", \"))\n  }\n}\n",
  "swift": "func selectionSort<T: Comparable>(_ array: inout [T]) {\n    guard array.count > 1 else {\n        return\n    }\n\n    for i in 0..<array.count - 1 {\n        var minIndex = i\n\n        for j in i + 1..<array.count {\n            if array[j] < array[minIndex] {\n                minIndex = j\n            }\n        }\n\n        if i != minIndex {\n            array.swapAt(i, minIndex)\n        }\n    }\n}\n\n// Example usage:\nvar numbers = [64, 34, 25, 12, 22, 11, 90]\nselectionSort(&numbers)\nprint(\"Sorted array: \\(numbers)\")\n",
  "typescript": "function selectionSort(arr: number[]): number[] {\n    const n = arr.length;\n    for (let i = 0; i < n - 1; i++) {\n        let minIndex = i;\n        for (let j = i + 1; j < n; j++) {\n            if (arr[j] < arr[minIndex]) {\n                minIndex = j;\n            }\n        }\n        if (minIndex !== i) {\n            // Swap elements\n            const temp = arr[i];\n            arr[i] = arr[minIndex];\n            arr[minIndex] = temp;\n        }\n    }\n    return arr;\n}\n\n// Example usage:\nconst array = [64, 25, 12, 22, 11];\nconsole.log(\"Original array:\", array);\nconsole.log(\"Sorted array:\", selectionSort(array));\n",
  "description": "\n## Write a program to implement selection sort\n\nSelection sort is a sorting algorithm that selects the smallest element from an unsorted list in each iteration and places that element at the beginning of the unsorted list.\r\n\r\n### Pseudocode\r\n\r\n```\r\nprocedure selection sort \r\n   list  : array of items\r\n   n     : size of list\r\n\r\n   for i = 1 to n - 1\r\n   /* set current element as minimum*/\r\n      min = i    \r\n   \r\n      /* check the element to be minimum */\r\n\r\n      for j = i+1 to n \r\n         if list[j] < list[min] then\r\n            min = j;\r\n         end if\r\n      end for\r\n\r\n      /* swap the minimum element with the current element*/\r\n      if indexMin != i  then\r\n         swap list[min] and list[i]\r\n      end if\r\n   end for\r\n    \r\nend procedure\r\n```\r\n\r\n### Example\r\n\r\n```text\r\nInput  : [8, 5, 2, 6, 9, 3, 1, 4, 0, 7]\r\nOutput : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n```\n\n---\n",
  "trackId": 5327,
  "lastUpdated": "2024-07-02T12:34:34Z",
  "contributors": [
    "Riyazul555",
    "Parvezkhan0",
    "harshraj8843",
    "pramod-karkhani",
    "pranavsilimkhan",
    "pojith",
    "SaifullahBijapur",
    "Shivamk034",
    "MohitKambli",
    "bharathbarma94",
    "SapirKro",
    "ExileAS",
    "Amedi-Imbira"
  ],
  "julia": "function selection_sort(arr)\r\n    n = length(arr)\r\n    \r\n    for i in 1:n-1\r\n        # Find the minimum element in the unsorted section of the array\r\n        min_index = i\r\n        for j in i+1:n\r\n            if arr[j] < arr[min_index]\r\n                min_index = j\r\n            end\r\n        end\r\n\r\n        # Swap the minimum element with the first element\r\n        if min_index != i\r\n            arr[i], arr[min_index] = arr[min_index], arr[i]\r\n        end\r\n    end\r\n    \r\n    return arr\r\nend\r\n\r\n# Example describing the Selection Sort\r\narr = [64, 25, 12, 22, 11]\r\nsorted_arr = selection_sort(arr)\r\nprintln(\"Sorted array: \", sorted_arr)\r\n",
  "dart": "import 'dart:io';\n\nvoid selectionSort(List<int> list) {\n  int n = list.length;\n\n  for (int i = 0; i < n - 1; i++) {\n    int min = i;\n    for (int j = i + 1; j < n; j++) {\n      if (list[j] < list[min]) {\n        min = j;\n      }\n    }\n    if (min != i) {\n      int temp = list[min];\n      list[min] = list[i];\n      list[i] = temp;\n    }\n  }\n}\n\nvoid main() {\n  print(\"Enter the integers separated by space:\");\n  String input = stdin.readLineSync() ?? '';\n  List<int> inputList = input.split(' ').map((e) => int.tryParse(e) ?? 0).toList();\n  print(\"Input List: $inputList\");\n  selectionSort(inputList);\n  print(\"Sorted List: $inputList\");\n}\n\n/*\n\nCommand Prompt Execution:\ndart implement_selection_sort.dart\nEnter the integers separated by space:\n9 4 10 1 5 2\nInput List: [9, 4, 10, 1, 5, 2]\nSorted List: [1, 2, 4, 5, 9, 10]\n\n*/\n",
  "go": "package main\n\nimport \"fmt\"\n\n// Function to perform selection sort\nfunc selectionSort(arr []int) {\n    n := len(arr)\n\n    // Traverse through all array elements\n    for i := 0; i < n-1; i++ {\n        // Find the minimum element in unsorted array\n        minIndex := i\n        for j := i + 1; j < n; j++ {\n            if arr[j] < arr[minIndex] {\n                minIndex = j\n            }\n        }\n\n        // Swap the found minimum element with the first element\n        arr[i], arr[minIndex] = arr[minIndex], arr[i]\n    }\n}\n\nfunc main() {\n    // Test the selection sort function\n    arr := []int{64, 25, 12, 22, 11}\n    fmt.Println(\"Original array:\", arr)\n    selectionSort(arr)\n    fmt.Println(\"Sorted array:\", arr)\n}\n",
  "haskell": "-- Selection sort in Haskell\nselectionSort :: (Ord a) => [a] -> [a]\nselectionSort [] = []\nselectionSort xs = let minElem = minimum xs\n                       rest = removeFirst minElem xs\n                   in minElem : selectionSort rest\n\n-- Function to remove the first occurrence of an element from a list\nremoveFirst :: (Eq a) => a -> [a] -> [a]\nremoveFirst _ [] = []\nremoveFirst y (x:xs)\n    | y == x    = xs\n    | otherwise = x : removeFirst y xs\n\n-- Example usage\nmain :: IO ()\nmain = do\n    let unsortedList = [64, 25, 12, 22, 11]\n    let sortedList = selectionSort unsortedList\n    putStrLn $ \"Sorted list: \" ++ show sortedList\n",
  "php": "<?php\n\nfunction selectionSort(&$arr) {\n    $n = count($arr);\n\n    for ($i = 0; $i < $n - 1; $i++) {\n        $min = $i;\n\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$j] < $arr[$min]) {\n                $min = $j;\n            }\n        }\n\n        // Swap the minimum element with the current element\n        if ($min != $i) {\n            $temp = $arr[$min];\n            $arr[$min] = $arr[$i];\n            $arr[$i] = $temp;\n        }\n    }\n}\n\n// Example usage:\n$inputArray = [8, 5, 2, 6, 9, 3, 1, 4, 0, 7];\n\necho \"Input Array: [\" . implode(\", \", $inputArray) . \"]\\n\";\n\nselectionSort($inputArray);\n\necho \"Sorted Array: [\" . implode(\", \", $inputArray) . \"]\\n\";\n\n?>",
  "perl": "#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nsub selection_sort {\n    my @list = @_;\n    my $n = scalar @list;\n\n    for my $i (0 .. $n - 2) {\n        # Set current element as minimum\n        my $min = $i;\n\n        # Check the element to be minimum\n        for my $j ($i + 1 .. $n - 1) {\n            if ($list[$j] < $list[$min]) {\n                $min = $j;\n            }\n        }\n\n        # Swap the minimum element with the current element\n        if ($min != $i) {\n            my $temp = $list[$i];\n            $list[$i] = $list[$min];\n            $list[$min] = $temp;\n        }\n    }\n\n    return @list;\n}\n\n# Example usage\nmy @unsorted_list = (64, 25, 12, 22, 11);\nmy @sorted_list = selection_sort(@unsorted_list);\nprint \"Sorted list: @sorted_list\\n\";\n",
  "python": "def main() -> None:\n    pass\n\n\ndef selection_sort(collection: list[int]) -> list[int]:\n    \"\"\"\n    Sorts a list in ascending order using the selection sort algorithm.\n\n    :param collection: A list of integers to be sorted.\n    :return: The sorted list.\n\n    Examples:\n    selection_sort([0, 5, 3, 2, 2])\n    [0, 2, 2, 3, 5]\n    \"\"\"\n\n    length = len(collection)\n    for i in range(length - 1):\n        min_index = i\n        for k in range(i + 1, length):\n            if collection[k] < collection[min_index]:\n                min_index = k\n        if min_index != i:\n            collection[i], collection[min_index] = collection[min_index], collection[i]\n    return collection\n\n\nif __name__ == \"__main__\":\n    user_input = input(\"Enter numbers separated by a comma:\\n\").strip()\n    unsorted = [int(item) for item in user_input.split(\",\")]\n    sorted_list = selection_sort(unsorted)\n    print(\"Sorted List:\", sorted_list)\n",
  "r": "selection_sort <- function(arr) {\n  n <- length(arr)\n  \n  for (i in 1:(n - 1)) {\n    # Set current element as minimum\n    min_index <- i\n    \n    # Find the minimum element in the unsorted portion\n    for (j in (i + 1):n) {\n      if (arr[j] < arr[min_index]) {\n        min_index <- j\n      }\n    }\n    \n    # Swap the found minimum element with the current element\n    if (min_index != i) {\n      temp <- arr[i]\n      arr[i] <- arr[min_index]\n      arr[min_index] <- temp\n    }\n  }\n  \n  return(arr)\n}\n\n# Example usage\ninput <- c(8, 5, 2, 6, 9, 3, 1, 4, 0, 7)\noutput <- selection_sort(input)\nprint(output)\n",
  "rust": "use std::io;\n\nfn selection_sort(arr: &mut Vec<i32>) {\n    let n = arr.len();\n\n    for i in 0..n {\n        let mut min_index = i;\n\n        for j in i + 1..n {\n            if arr[j] < arr[min_index] {\n                min_index = j;\n            }\n        }\n\n        if min_index != i {\n            arr.swap(i, min_index);\n        }\n    }\n}\n\nfn main() {\n    // Take user input for the array\n    let mut numbers = Vec::new();\n    println!(\"Enter numbers separated by spaces:\");\n\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n\n    for num in input.trim().split_whitespace() {\n        if let Ok(n) = num.parse::<i32>() {\n            numbers.push(n);\n        }\n    }\n\n    println!(\"Original array: {:?}\", numbers);\n\n    selection_sort(&mut numbers);\n\n    println!(\"Sorted array: {:?}\", numbers);\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "scala",
    "swift",
    "typescript",
    "julia",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}