{
  "slug": "implement-ternary-search",
  "title": "Implement Ternary Search",
  "c": "#include <stdio.h>\n\nint ternary_search(int A[], int n, int value) {\n    int l = 0;\n    int r = n - 1;\n\n    while (l <= r) {\n        int partition_size = (r - l) / 3;\n        int mid1 = l + partition_size;\n        int mid2 = r - partition_size;\n\n        if (A[mid1] == value)\n            return mid1;\n\n        if (A[mid2] == value)\n            return mid2;\n\n        if (value < A[mid1])\n            r = mid1 - 1;\n        else if (value > A[mid2])\n            l = mid2 + 1;\n        else {\n            l = mid1 + 1;\n            r = mid2 - 1;\n        }\n    }\n\n    return -1;\n}\n\nint main() {\n    int n;\n\n    printf(\"Enter the size of the array: \");\n    scanf(\"%d\", &n);\n\n    int A[n];\n\n    printf(\"Enter the sorted array elements:\\n\");\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &A[i]);\n    }\n\n    int value;\n\n    printf(\"Enter the value to be searched: \");\n    scanf(\"%d\", &value);\n\n    int result = ternary_search(A, n, value);\n\n    if (result != -1)\n        printf(\"Element found at index %d\\n\", result);\n    else\n        printf(\"Element not found\\n\");\n\n    return 0;\n}\n",
  "c-plus-plus": "#include <iostream>\nusing namespace std;\n\nint ternarySearch(int ARay[], int size, int value)\n{\n    int l = 0;\n    int r = size - 1;\n\n    while (l <= r) \n    {\n        int halfIsgood = (r - l) / 3;\n        int mid1 = l + halfIsgood;\n        int mid2 = r - halfIsgood;\n\n        if (ARay[mid1] == value) \n        {\n            return mid1;\n        }\n\n        if (ARay[mid2] == value) \n        {\n            return mid2;\n        }\n\n        if (value < ARay[mid1]) \n        {\n            r = mid1 - 1;\n        }\n        else if (value > ARay[mid2]) \n        {\n            l = mid2 + 1;\n        }\n        else \n        {\n            l = mid1 + 1;\n            r = mid2 - 1;\n        }\n    }\n\n    return -1;\n}\n\nint main() \n{\n    int ARay[] = { 1, 2, 3, 4, 5 };\n    int size_ARay = sizeof(ARay) / sizeof(ARay[0]);\n    int findThis = 4;\n\n    int ansThing = ternarySearch(ARay, size_ARay, findThis);\n\n    if (ansThing != -1) \n    {\n        cout << \"Element found! It is located at index \" << ansThing << endl;\n    }\n    else \n    {\n        cout << \"ERROR! The given element does not exist in the current array :(\" << endl;\n    }\n\n    return 0;\n}\n\n/* Cautiously Crafted By Redzwinger */",
  "f-sharp": "let rec ternary_search (arr: int array) (value: int) (left: int) (right: int) =\n    if left <= right then\n        let partition_size = (right - left) / 3\n        let mid1 = left + partition_size\n        let mid2 = right - partition_size\n\n        if arr.[mid1] = value then\n            mid1\n        elif arr.[mid2] = value then\n            mid2\n        elif value < arr.[mid1] then\n            ternary_search arr value left (mid1 - 1)\n        elif value > arr.[mid2] then\n            ternary_search arr value (mid2 + 1) right\n        else\n            ternary_search arr value (mid1 + 1) (mid2 - 1)\n    else\n        -1\n\n// Example usage\nlet list = [|1; 2; 3; 4; 5|]\nlet value = 4\n\nlet result = ternary_search list value 0 (Array.length list - 1)\n\nprintfn \"List: %A\" list\nprintfn \"Value to be searched: %d\" value\nprintfn \"Output: %d\" result\n",
  "java": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class ImplementTernarySearch {\n    public static int ternarySearch(int[] arr, int value) {\n        int l = 0;\n        int r = arr.length - 1;\n\n        while (l <= r) {\n            int partitionSize = (r - l) / 3;\n            int mid1 = l + partitionSize;\n            int mid2 = r - partitionSize;\n\n            if (arr[mid1] == value) {\n                return mid1;\n            }\n\n            if (arr[mid2] == value) {\n                return mid2;\n            }\n\n            if (value < arr[mid1]) {\n                r = mid1 - 1;\n            } else if (value > arr[mid2]) {\n                l = mid2 + 1;\n            } else {\n                l = mid1 + 1;\n                r = mid2 - 1;\n            }\n        }\n\n        return -1; \n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter the size of the array: \");\n        int size = scanner.nextInt();\n\n        int[] inputArray = new int[size];\n\n        System.out.println(\"Enter the elements of the  array:\");\n        for (int i = 0; i < size; i++) {\n            inputArray[i] = scanner.nextInt();\n        }\n\n        // Sort the array using Arrays.sort()\n        Arrays.sort(inputArray);\n\n        System.out.print(\"Enter the value to search: \");\n        int searchValue = scanner.nextInt();\n\n        int result = ternarySearch(inputArray, searchValue);\n\n        if (result != -1) {\n            System.out.println(\"Element found at index: \" + result);\n        } else {\n            System.out.println(\"Element not found in the array.\");\n        }\n\n        scanner.close(); \n    }\n}",
  "javascript": "const ImplementTernarySearch=(array,value)=>{\n    let l=0;\n    let r=array.length-1;\n    while(l<=r){\n        let mid1=Math.floor(l+(r-l)/3);\n        let mid2=Math.floor(r-(r-l)/3);\n        if(array[mid1]==value){\n            return mid1;\n        }\n        if(array[mid2]==value){\n            return mid2;\n        }\n        if(value<array[mid1]){\n            r=mid1-1;\n        }else if(value>array[mid2]){\n            l=mid2+1;\n        }else{\n            l=mid1+1;\n            r=mid2-1;\n        }\n    }\n}\n\n// For Example\nconst array=[1,2,3,4,5,6,7,8,9,10];\nconst value=5;\nconst result=ImplementTernarySearch(array,value);\nif(result){\n    console.log(\"Value Found at index : \"+result);\n}\nelse{\n    console.log(\"Value Not Found\");\n}",
  "kotlin": "import kotlin.math.sqrt\n\nfun ternarySearch(arr: IntArray, value: Int): Int {\n    var left = 0\n    var right = arr.size - 1\n\n    while (left <= right) {\n        val partitionSize = (right - left) / 3\n        val mid1 = left + partitionSize\n        val mid2 = right - partitionSize\n\n        if (arr[mid1] == value) {\n            return mid1\n        }\n\n        if (arr[mid2] == value) {\n            return mid2\n        }\n\n        if (value < arr[mid1]) {\n            right = mid1 - 1\n        } else if (value > arr[mid2]) {\n            left = mid2 + 1\n        } else {\n            left = mid1 + 1\n            right = mid2 - 1\n        }\n    }\n\n    return -1\n}\n\nfun main() {\n    // Take input from the user\n    println(\"Enter the sorted array elements separated by spaces:\")\n    val inputArray = readLine()?.split(\" \")?.map { it.toInt() }\n    if (inputArray != null) {\n        val list = inputArray.toIntArray()\n\n        println(\"Enter the value to search:\")\n        val value = readLine()?.toInt()\n\n        if (value != null) {\n            val index = ternarySearch(list, value)\n            println(\"Output: $index\")\n        } else {\n            println(\"Invalid input for the value.\")\n        }\n    } else {\n        println(\"Invalid input for the array.\")\n    }\n}\n",
  "ruby": "def ternary_search(array, value)\n    left = 0\n    right = array.length - 1\n  \n    while left <= right\n      partition_size = (right - left) / 3\n      mid1 = left + partition_size\n      mid2 = right - partition_size\n  \n      return mid1 if array[mid1] == value\n      return mid2 if array[mid2] == value\n  \n      if value < array[mid1]\n        right = mid1 - 1\n      elsif value > array[mid2]\n        left = mid2 + 1\n      else\n        left = mid1 + 1\n        right = mid2 - 1\n      end\n    end\n  \n    return -1\n  end\n  \n  # Example\n  list = [1, 2, 3, 4, 5]\n  value = 4\n  result = ternary_search(list, value)\n  \n  if result != -1\n    puts \"Element #{value} found at index #{result}\"\n  else\n    puts \"Element #{value} not found in the array\"\n  end\n  ",
  "typescript": "function ternarySearch(arr: number[], value: number): number {\n    let left = 0;\n    let right = arr.length - 1;\n\n    while (left <= right) {\n        const partitionSize = Math.floor((right - left) / 3);\n        const mid1 = left + partitionSize;\n        const mid2 = right - partitionSize;\n\n        if (arr[mid1] === value) {\n            return mid1;\n        }\n\n        if (arr[mid2] === value) {\n            return mid2;\n        }\n\n        if (value < arr[mid1]) {\n            right = mid1 - 1;\n        } else if (value > arr[mid2]) {\n            left = mid2 + 1;\n        } else {\n            // Adjust pointers based on the comparison with the target value\n            left = mid1 + 1;\n            right = mid2 - 1;\n        }\n    }\n\n    return -1;\n}\n\n// Example\nconst list = [1, 2, 3, 4, 5];\nconst valueToSearch = 4;\n\nconst result = ternarySearch(list, valueToSearch);\n\nconsole.log(`Output: ${result}`);\n",
  "description": "\n## Write a program to implement ternary search\n\nTernary search is a divide and conquer algorithm that can be used to find an element in an array. It is similar to binary search where we divide the array into two parts but in this algorithm, we divide the given array into three parts and determine which has the key (searched element).\r\n\r\n### Pseudocode\r\n\r\n```text\r\nprocedure ternary_search\r\n   A ← sorted array\r\n   value ← value to be searched\r\n   l ← leftmost index\r\n   r ← rightmost index\r\n   \r\n   while l ≤ r do\r\n   \r\n      partition size = (r-l)/3\r\n      mid1 = l + partition_size\r\n      mid2 = r - partition_size\r\n      \r\n      if A[mid1] = value\r\n         return mid1\r\n         \r\n      if A[mid2] = value\r\n         return mid2\r\n         \r\n      if value < A[mid1]\r\n         set r = mid1 - 1\r\n         \r\n      else if value > A[mid2]\r\n         set l = mid2 + 1\r\n         \r\n      else\r\n         set l = mid1 + 1\r\n         set r = mid2 - 1\r\n         \r\n   end while\r\n   \r\n   return -1\r\nend procedure\r\n```\r\n\r\n### Example\r\n\r\n```text\r\nlist = [1,2,3,4,5]\r\nvalue = 4\r\n\r\nOutput : 3\r\n```\n\n---\n",
  "trackId": 5108,
  "lastUpdated": "2024-06-30T18:20:10Z",
  "contributors": [
    "Riyazul555",
    "harshraj8843",
    "David-FR",
    "stephanemora",
    "lingalaviran",
    "Parvezkhan0",
    "srivamsidandu",
    "chintanrupareliya",
    "Redzwinger",
    "prathebaAT"
  ],
  "julia": "function ternary_search(arr, value)\n    l = 1  # Julia arrays are 1-indexed\n    r = length(arr)\n    \n    while l <= r\n        partitionSize = div(r - l, 3)\n        mid1 = l + partitionSize\n        mid2 = r - partitionSize\n        \n        if arr[mid1] == value\n            return mid1\n        elseif arr[mid2] == value\n            return mid2\n        end\n        \n        if value < arr[mid1]\n            r = mid1 - 1\n        elseif value > arr[mid2]\n            l = mid2 + 1\n        else\n            l = mid1 + 1\n            r = mid2 - 1\n        end\n    end\n    \n    return -1  # Value not found\nend\n\n# Example usage\nlist = [1, 2, 3, 4, 5]\nvalue = 4\nresult = ternary_search(list, value)\n\nif result != -1\n    println(\"Element found at index: $result\")\nelse\n    println(\"Element not found in the array\")\nend\n",
  "dart": "int ternarySearch(List<int> arr, int value) {\n  int l = 0;\n  int r = arr.length - 1;\n\n  while (l <= r) {\n    int partitionSize = (r - l) ~/ 3;\n    int mid1 = l + partitionSize;\n    int mid2 = r - partitionSize;\n\n    if (arr[mid1] == value) {\n      return mid1;\n    }\n\n    if (arr[mid2] == value) {\n      return mid2;\n    }\n\n    if (value < arr[mid1]) {\n      r = mid1 - 1;\n    } else if (value > arr[mid2]) {\n      l = mid2 + 1;\n    } else {\n      l = mid1 + 1;\n      r = mid2 - 1;\n    }\n  }\n\n  return -1; // Value not found\n}\n\nvoid main() {\n  List<int> list = [1, 2, 3, 4, 5];\n  int value = 4;\n  int result = ternarySearch(list, value);\n\n  if (result != -1) {\n    print(\"Element found at index: $result\");\n  } else {\n    print(\"Element not found in the array\");\n  }\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tlist := []int{1, 2, 4, 5, 9, 10, 12, 13, 15, 16}\n\tvalue := 12\n\tindex := ternary_search(list, value)\n\n\tif index != -1 {\n\t\tfmt.Printf(\"Element %d found at index %d\", value, index)\n\t} else {\n\t\tfmt.Printf(\"Element %d not found !\", value)\n\t}\n}\n\nfunc ternary_search(array []int, value int) int {\n\tvar l = 0\n\tvar r = len(array) - 1\n\n\tfor l <= r {\n\t\tps := (r - l) / 3\n\t\tm1 := l + ps\n\t\tm2 := r - ps\n\n\t\tif array[m1] == value {\n\t\t\treturn m1\n\t\t}\n\n\t\tif array[m2] == value {\n\t\t\treturn m2\n\t\t}\n\n\t\tif value < array[m1] {\n\t\t\tr = m1 - 1\n\t\t} else if value > array[m2] {\n\t\t\tl = m2 + 1\n\t\t} else {\n\t\t\tl = m1 + 1\n\t\t\tr = m2 - 1\n\t\t}\n\t}\n\n\treturn -1\n\n}\n",
  "haskell": "ternarySearch :: Ord a => [a] -> a -> Int -> Int -> Maybe Int\nternarySearch arr value l r\n    | l > r = Nothing\n    | otherwise = \n        let partitionSize = (r - l) `div` 3\n            mid1 = l + partitionSize\n            mid2 = r - partitionSize\n        in if (arr !! mid1) == value then Just mid1\n           else if (arr !! mid2) == value then Just mid2\n           else if value < (arr !! mid1) then ternarySearch arr value l (mid1 - 1)\n           else if value > (arr !! mid2) then ternarySearch arr value (mid2 + 1) r\n           else ternarySearch arr value (mid1 + 1) (mid2 - 1)\n\n-- Helper function to handle 0-based indexing\nternarySearchWrapper :: Ord a => [a] -> a -> Maybe Int\nternarySearchWrapper arr value = ternarySearch arr value 0 (length arr - 1)\n\nmain :: IO ()\nmain = do\n    let list = [1,2,3,4,5]\n        value = 4\n        result = ternarySearchWrapper list value\n    case result of\n        Just index -> putStrLn $ \"Element found at index: \" ++ show index\n        Nothing -> putStrLn \"Element not found in the array\"\n",
  "php": "<?php\n\nfunction ternary_search($arr, $value) {\n    $left = 0;\n    $right = count($arr) - 1;\n\n    while ($left <= $right) {\n        $partition_size = ($right - $left) / 3;\n        $mid1 = $left + $partition_size;\n        $mid2 = $right - $partition_size;\n\n        if ($arr[$mid1] === $value) {\n            return $mid1;\n        }\n\n        if ($arr[$mid2] === $value) {\n            return $mid2;\n        }\n\n        if ($value < $arr[$mid1]) {\n            $right = $mid1 - 1;\n        } elseif ($value > $arr[$mid2]) {\n            $left = $mid2 + 1;\n        } else {\n            $left = $mid1 + 1;\n            $right = $mid2 - 1;\n        }\n    }\n\n    return -1;\n}\n\n// Example usage\n$list = [1, 2, 3, 4, 5];\n$value = 4;\n$result = ternary_search($list, $value);\n\nif ($result !== -1) {\n    echo \"Element found at index: $result\";\n} else {\n    echo \"Element not found in the array\";\n}\n\n?>\n",
  "perl": "use strict;\nuse warnings;\n\nsub ternary_search {\n    my ($array_ref, $value) = @_;\n    my @array = @$array_ref;\n    my $left = 0;\n    my $right = scalar(@array) - 1;\n    \n    while ($left <= $right) {\n        my $partition_size = int(($right - $left) / 3);\n        my $mid1 = $left + $partition_size;\n        my $mid2 = $right - $partition_size;\n        \n        if ($array[$mid1] == $value) {\n            return $mid1;\n        }\n        \n        if ($array[$mid2] == $value) {\n            return $mid2;\n        }\n        \n        if ($value < $array[$mid1]) {\n            $right = $mid1 - 1;\n        } elsif ($value > $array[$mid2]) {\n            $left = $mid2 + 1;\n        } else {\n            $left = $mid1 + 1;\n            $right = $mid2 - 1;\n        }\n    }\n    \n    return -1;\n}\n\n# Example usage\nmy @sorted_array = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nmy $value_to_search = 7;\n\nmy $result = ternary_search(\\@sorted_array, $value_to_search);\n\nif ($result != -1) {\n    print \"Element found at index $result\\n\";\n} else {\n    print \"Element not found in the array\\n\";\n}\n",
  "python": "def ternary_search(arr, value):\n    l, r = 0, len(arr) - 1\n\n    while l <= r:\n        partition_size = (r - l) // 3\n        mid1 = l + partition_size\n        mid2 = r - partition_size\n\n        if arr[mid1] == value:\n            return mid1\n\n        if arr[mid2] == value:\n            return mid2\n\n        if value < arr[mid1]:\n            r = mid1 - 1\n        elif value > arr[mid2]:\n            l = mid2 + 1\n        else:\n            l = mid1 + 1\n            r = mid2 - 1\n\n    return -1\n\n\n# Example usage\narr = [1, 2, 3, 4, 5]\nvalue = 4\nresult = ternary_search(arr, value)\n\nif result != -1:\n    print(f\"Element {value} found at index {result}\")\nelse:\n    print(f\"Element {value} not found in the array\")\n",
  "r": "ternary_search <- function(A, value) \r\n  {\r\n  l <- 1\r\n  r <- length(A)\r\n  \r\n  while (l <= r) {\r\n    partition_size <- (r - l) / 3\r\n    mid1 <- floor(l + partition_size)\r\n    mid2 <- ceiling(r - partition_size)\r\n    \r\n    if (A[mid1] == value) \r\n      {\r\n      return(mid1 - 1)\r\n    }\r\n    \r\n    if (A[mid2] == value) \r\n      {\r\n      return(mid2 - 1)\r\n    }\r\n    \r\n    if (value < A[mid1]) \r\n      {\r\n      r <- mid1 - 1\r\n    } else if (value > A[mid2]) \r\n      {\r\n      l <- mid2 + 1\r\n    } else \r\n      {\r\n      l <- mid1 + 1\r\n      r <- mid2 - 1\r\n    }\r\n  }\r\n  \r\n  return(-1)\r\n}\r\n\r\nsorted_array <- c(1, 2, 3, 4, 5)\r\nsearch_value <- 4\r\nresult <- ternary_search(sorted_array, search_value)\r\n\r\nif (result == -1) \r\n  {\r\n  cat(\"ERROR! The given element does not exist in the current array :(\\n\")\r\n} else \r\n  {\r\n  cat(\"Element found! It is located at index\", result, \"\\n\")\r\n}\r\n\r\n# Cautiously Crafted By Redzwinger #\r\n",
  "rust": "fn ternary_search(arr: &[i32], value: i32) -> Option<usize> {\n    let mut l = 0;\n    let mut r = arr.len() - 1;\n\n    while l <= r {\n        let partition_size = (r - l) / 3;\n        let mid1 = l + partition_size;\n        let mid2 = r - partition_size;\n\n        if arr[mid1] == value {\n            return Some(mid1);\n        }\n\n        if arr[mid2] == value {\n            return Some(mid2);\n        }\n\n        if value < arr[mid1] {\n            r = mid1 - 1;\n        } else if value > arr[mid2] {\n            l = mid2 + 1;\n        } else {\n            l = mid1 + 1;\n            r = mid2 - 1;\n        }\n    }\n\n    None\n}\n\nfn main() {\n    let list = vec![1, 2, 3, 4, 5];\n    let value = 4;\n\n    match ternary_search(&list, value) {\n        Some(index) => println!(\"Output: {}\", index),\n        None => println!(\"Element not found\"),\n    }\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "typescript",
    "julia",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}