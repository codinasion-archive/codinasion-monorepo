{
  "slug": "find-the-smallest-three-elements-in-an-array",
  "title": "Find The Smallest Three Elements In An Array",
  "c": "#include <stdio.h>\n\nvoid findSmallestThree(int ARay[], int thingy)\n{\n    if (thingy < 3)\n    {\n        printf(\"ERROR! Input Array Size < 3\\n\");\n        return;\n    }\n\n    int first, second, third;\n\n    first = second = third = ARay[0];\n\n    for (int i = 1; i < thingy; i++)\n    {\n        if (ARay[i] < first)\n        {\n            third = second;\n            second = first;\n            first = ARay[i];\n        }\n        else if (ARay[i] < second)\n        {\n            third = second;\n            second = ARay[i];\n        }\n        else if (ARay[i] < third)\n        {\n            third = ARay[i];\n        }\n    }\n\n    printf(\"The smallest three elements: %d %d %d\\n\", first, second, third);\n}\n\nint main()\n{\n    int ARay[] = { 10, 4, 3, 50, 23, 90 };\n    int thing = sizeof(ARay) / sizeof(ARay[0]);\n    findSmallestThree(ARay, thing);\n\n    int ARay2[] = { 12, 13, 1, 10, 34, 1 };\n    int thing2 = sizeof(ARay2) / sizeof(ARay2[0]);\n    findSmallestThree(ARay2, thing2);\n\n    return 0;\n}\n\n/* Cautiously Crafted By Redzwinger */",
  "c-plus-plus": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nvoid findSmallestThree(int arr[],int size){\n\n\nsort(arr,arr + size);\n\nfor (int i = 0; i < min(size, 3); ++i) {\n    cout << arr[i] << \" \";\n}\n}\n\nint main(){\n\nint arr[]= { 10, 4, 3, 50, 23, 90};//example used\nint size = sizeof(arr) / sizeof(arr[0]);\nfindSmallestThree(arr, size);\n\nreturn 0;\n\n\n\n}",
  "c-sharp": "using System;\n\nclass SmallestThreeNumbers {\n    public static void Main(string[] args) {\n        // Example array of numbers\n        int[] arr = {10, 4, 3, 50, 23, 90};\n\n        // Find and print the smallest three numbers\n        int[] smallestThree = FindSmallestThreeElementsInAnArray(arr);\n        if (arr.Length >= 3) {\n            Console.WriteLine(\"Smallest three numbers: \" + string.Join(\", \", smallestThree));\n        }\n    }\n\n    public static int[] FindSmallestThreeElementsInAnArray(int[] arr) {\n        if (arr.Length < 3) {\n            Console.WriteLine(\"Array size should be at least 3\");\n            return null;\n        }\n        else if (arr.Length == 3) {\n            return arr;\n        }\n\n        // Create a temporary array so the original stays unaffected\n        int[] tempArray = (int[])arr.Clone();\n\n        // Sort the new array in ascending order\n        Array.Sort(tempArray);\n\n        // Create a new array to store the smallest three numbers\n        int[] smallestThree = new int[3];\n        for (int i = 0; i < 3; i++) {\n            smallestThree[i] = tempArray[i];\n        }\n\n        return smallestThree;\n    }\n}\n",
  "f-sharp": "let input = [ 10; 4; 3; 50; 23; 90]\n\nlet sort = List.sort input\n\nfor i = 0 to 2 do\n    printfn \"%d\" sort.[i]\n",
  "java": "import java.util.Arrays;\n\nclass SmallestThreeNumbers {\n    public static void main(String[] args) {\n        // Example array of numbers\n        int[] arr = {10, 4, 3, 50, 23, 90};\n\n        // Find and print the smallest three numbers\n        int[] smallestThree = findSmallestThreeElementsInAnArray(arr);\n        if(arr.length >= 3 ) {\n            System.out.println(\"Smallest three numbers: \" + Arrays.toString(smallestThree));\n        }\n    }\n\n    public static int[] findSmallestThreeElementsInAnArray(int[] arr) {\n        if (arr.length < 3) {\n            System.out.println(\"Array size should be at least 3\");\n            return null;\n        }\n        else if (arr.length == 3){\n            return arr;\n        }\n        // Create a temporary array so the original stays unaffected\n        int[] tempArray = Arrays.copyOf(arr, arr.length);\n\n        // Sort the new array in ascending order\n        Arrays.sort(tempArray);\n\n        // Create a new array to store the smallest three numbers\n        int[] smallestThree = new int[3];\n        for (int i = 0; i < 3; i++) {\n            smallestThree[i] = tempArray[i];\n        }\n\n        return smallestThree;\n    }\n}\n",
  "javascript": "//Write a JavaScript program to find the smallest three elements in an array\n// Input  : arr[] = {10, 4, 3, 50, 23, 90}\n// Output : 3 4 10\n\n// Input  : arr[] = {12, 13, 1, 10, 34, 1}\n// Output : 1 1 10\n\n\nlet array = [10, 4, 3, 50, 23, 90]\n\nfunction threeSmallElements(num) {\n    num.sort((a,b) => Math.min(a - b))\n    return num.slice(0, 3)\n}\n\nconsole.log('the answer is', threeSmallElements(array));",
  "kotlin": "fun main() {\n    val threeSmallestElements = threeSmallestElements(arrayOf(12, 13, 1, 10, 34, 1))\n    println(threeSmallestElements)\n}\n\nfun threeSmallestElements(array: Array<Int>): Array<Int> {\n    return if (array.size < 3) {\n        emptyArray()\n    } else {\n        val sortedArray = array.sortedArray()\n        sortedArray.sliceArray(0..2)\n    }\n}\n",
  "ruby": "input = [10, 4, 3, 50, 23, 90];\nif input.length() < 2\n  print \"Array should contain atleast 3 elements\"\nelse\n  sort = input.sort\n  result = \"#{sort[0].to_i},#{sort[1].to_i},#{sort[2].to_i}\"\n  print result\nend\n",
  "swift": "import Foundation\n\nfunc findSmallestThreeElements(arr: [Int]) -> [Int] {\n    guard arr.count >= 3 else {\n        print(\"Array should have at least 3 elements\")\n        return []\n    }\n\n    var first = Int.max\n    var second = Int.max\n    var third = Int.max\n\n    for num in arr {\n        if num < first {\n            third = second\n            second = first\n            first = num\n        } else if num < second {\n            third = second\n            second = num\n        } else if num < third {\n            third = num\n        }\n    }\n\n    return [first, second, third]\n}\n\n// Example usage\nlet arr = [12, 13, 1, 10, 34, 1]\nlet smallestThree = findSmallestThreeElements(arr: arr)\nprint(\"The smallest three elements are: \\(smallestThree)\")\n",
  "typescript": "function findSmallestThreeElements(arr: number[]): number[] {\n    if (arr.length < 3) {\n        throw new Error(\"Array should have at least three elements\");\n    }\n\n    const sortedArray = arr.slice().sort((a, b) => a - b);\n\n    return sortedArray.slice(0, 3);\n}\n\n// Example usage\nconst example_input_array = [10, 5, 8, 2, 7, 1, 3];\nconst output_array = findSmallestThreeElements(example_input_array);\nconsole.log(\"Smallest three elements:\", output_array);",
  "description": "\n## Write a program to find the smallest three elements in an array\n\n```txt\r\nInput  : arr[] = {10, 4, 3, 50, 23, 90}\r\nOutput : 3 4 10\r\n\r\nInput  : arr[] = {12, 13, 1, 10, 34, 1}\r\nOutput : 1 1 10\r\n```\n\n---\n",
  "trackId": 5222,
  "lastUpdated": "2024-06-19T17:50:59Z",
  "contributors": [
    "Riyazul555",
    "harshraj8843",
    "pramod-karkhani",
    "anandfresh",
    "grinish21",
    "MohitKambli",
    "srivamsidandu",
    "PunugupatiSaikumar",
    "joenjogu",
    "Redzwinger",
    "dimitris1208",
    "mktana",
    "CoffeeFrog101",
    "Amedi-Imbira",
    "zackbmz",
    "Shivamk034"
  ],
  "julia": "array = [10, 4, 3, 50, 23, 90]\nsmallest_element = sort(array)\nprintln(string(smallest_element[1],\",\", smallest_element[2],\",\",smallest_element[3]))\n",
  "scala": "import scala.io.StdIn.readLine\n\nobject SmallestThreeElements {\n  def main(args: Array[String]): Unit = {\n    println(\"Enter array elements separated by space:\")\n    val input = readLine()\n    val arr = input.split(\" \").map(_.toInt)\n    \n    // Initialize variables to store the smallest elements\n    var firstMin = Int.MaxValue\n    var secondMin = Int.MaxValue\n    var thirdMin = Int.MaxValue\n\n    // Loop to find the smallest elements\n    for (num <- arr) {\n      if (num < firstMin) {\n        thirdMin = secondMin\n        secondMin = firstMin\n        firstMin = num\n      } else if (num < secondMin) {\n        thirdMin = secondMin\n        secondMin = num\n      } else if (num < thirdMin) {\n        thirdMin = num\n      }\n    }\n\n    // Print the result\n    println(\"Smallest three elements are:\")\n    println(s\"$firstMin $secondMin $thirdMin\")\n  }\n}\n\nSmallestThreeElements.main(Array())\n",
  "dart": "import 'dart:io';\n\nvoid findSmallestThree(List<int> arr) {\n  if (arr.length < 3) {\n    print(\"Array should have at least three elements.\");\n    return;\n  }\n\n  int firstSmallest = double.maxFinite.toInt();\n  int secondSmallest = double.maxFinite.toInt();\n  int thirdSmallest = double.maxFinite.toInt();\n\n  for (int i = 0; i < arr.length; i++) {\n    if (arr[i] < firstSmallest) {\n      thirdSmallest = secondSmallest;\n      secondSmallest = firstSmallest;\n      firstSmallest = arr[i];\n    } else if (arr[i] < secondSmallest) {\n      thirdSmallest = secondSmallest;\n      secondSmallest = arr[i];\n    } else if (arr[i] < thirdSmallest) {\n      thirdSmallest = arr[i];\n    }\n  }\n\n  print(\"Smallest three elements in the array: $firstSmallest $secondSmallest $thirdSmallest\");\n}\n\nvoid main() {\n  print(\"Enter integers for the array separated by space:\");\n  String input = stdin.readLineSync() ?? '';\n  List<int> array = input.split(' ').map((e) => int.tryParse(e) ?? 0).toList();\n\n  findSmallestThree(array);\n}\n\n\n/*\n\nCommand Prompt Execution:\ndart find_the_smallest_three_elements_in_an_array.dart\nEnter integers for the array separated by space:\n10 9 8 7 6 55 44 33 22 11 101\nSmallest three elements in the array: 6 7 8\n\n*/",
  "go": "package main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc main() {\n    fmt.Println(smallestThreeElements([]int{10, 4, 3, 50, 23, 90}))\n    fmt.Println(smallestThreeElements([]int{12, 13, 1, 10, 34, 1}))\n}\n\nfunc smallestThreeElements(arr []int) []int {\n    // sort the input array in ascending order\n    sort.Sort(sort.IntSlice(arr))\n\n    // return the first 3 elements\n    return arr[:3]\n}\n",
  "haskell": "import Data.List (foldl')\n\n-- Function to find the smallest three elements\nfindSmallestThree :: [Int] -> [Int]\nfindSmallestThree arr\n    | length arr < 3 = error \"Array should have at least 3 elements\"\n    | otherwise = let (a, b, c) = foldl' update (maxBound, maxBound, maxBound) arr\n                  in [a, b, c]\n  where\n    update :: (Int, Int, Int) -> Int -> (Int, Int, Int)\n    update (first, second, third) x\n        | x < first  = (x, first, second)\n        | x < second = (first, x, second)\n        | x < third  = (first, second, x)\n        | otherwise  = (first, second, third)\n\n-- Example usage\nmain :: IO ()\nmain = do\n    let arr = [12, 13, 1, 10, 34, 1]\n    let smallestThree = findSmallestThree arr\n    putStrLn $ \"The smallest three elements are: \" ++ show smallestThree\n",
  "php": "<?php\n// ready to execute\nfunction findSmallestThree($arr) {\n// Sort the array in ascending order\nsort($arr);\n\n$smallestThree = array_slice($arr, 0, 3);\n\n// Print the result\necho \"Smallest three elements: \" . implode(' ', $smallestThree);\n}\n\n// Test cases\n$arr1 = array(10, 4, 3, 50, 23, 90);\n$arr2 = array(12, 13, 1, 10, 34, 1);\n\necho \"Input 1: \" . implode(' ', $arr1) . \"\\n\";\nfindSmallestThree($arr1);\n\necho \"\\n\\n\";\n\necho \"Input 2: \" . implode(' ', $arr2) . \"\\n\";\nfindSmallestThree($arr2);\n?>",
  "perl": "@input = (10, 4, 3, 50, 23, 90);\n@input = sort { $a <=> $b } @input;\nif(scalar @input < 3){\n    print \"Array should have atleast 3 elements\";\n}else{\n    print \"@input[0],@input[1],@input[2]\\n\";\n}\n",
  "python": "def main():\n    seq = [12, 13, 1, 10, 34, 1]\n    print(smallest_three_elements(seq))\n\n\ndef smallest_three_elements(S):\n    \"\"\"Return the three smallest elements of sequence S\"\"\"\n    min1 = S[0]\n    min2 = S[0]\n    min3 = S[0]\n\n    for val in S:\n        if val < min1:\n            min3 = min2\n            min2 = min1\n            min1 = val\n        elif val < min2:\n            min3 = min2\n            min2 = val\n        elif val < min3:\n            min3 = val\n    return (min1, min2, min3)\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "r": "findSmallestThree <- function(arr) {\n  count <- length(arr)\n  \n  if (count < 3) {\n    print(\"Array should have at least three elements.\")\n    return(NULL)\n  }\n  arr <- sort(arr)\n  cat(\"Smallest three elements:\", arr[1], arr[2], arr[3],\"\\n\")\n}\n\narr <- c(10, 4, 3, 50, 23, 90)\nfindSmallestThree(arr)\n",
  "rust": "use std::io;\n\nfn main() {\n    println!(\"Enter the size of the array:\");\n    let mut size = String::new();\n    io::stdin().read_line(&mut size).expect(\"Failed to read line\");\n    let size: usize = size.trim().parse().expect(\"Invalid input\");\n\n    let mut numbers = Vec::new();\n    println!(\"Enter {} elements:\", size);\n    for _ in 0..size {\n        let mut input = String::new();\n        io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n        let number: i32 = input.trim().parse().expect(\"Invalid input\");\n        numbers.push(number);\n    }\n    numbers.sort();\n\n    println!(\"The smallest three elements are:\");\n    for i in 0..3 {\n        println!(\"{}\", numbers[i]);\n    }\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}