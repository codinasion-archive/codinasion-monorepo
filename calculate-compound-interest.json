{
  "slug": "calculate-compound-interest",
  "title": "Calculate Compound Interest",
  "c": "\n\n#include <stdio.h>\n#include <math.h>\nint main()\n{\n    float CI, rate, PA, time;\n    printf(\"Enter principal amount :\");\n    scanf(\"%f\", &PA);\n    printf(\"Enter the rate :\");\n    scanf(\"%f\", &rate);\n    printf(\"Enter time :\");\n    scanf(\"%f\", &time);\n    // formula to calculate compound interest\n    CI = PA * (pow((1 + rate / 100), time));\n\n    printf(\"Compound interest : %0.2f\\n\", CI);\n    return 0;\n}",
  "c-plus-plus": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    // declaring variables\n    // p=Principal amount\n    // r=Rate of interest\n    // t=time\n    // ci=compound interest\n    long double p,r,t,ci;\n    \n    // take input\n    cout<<\"Enter Principal amount : \";\n    cin>>p;\n    cout<<\"\\n\";  \n    cout<<\"Enter Rate of interest : \";\n    cin>>r;\n    cout<<\"\\n\";\n    cout<<\"Enter time : \";\n    cin>>t;\n    cout<<\"\\n\";\n    \n    // Compound interest = principal amount * (1 + rate of interest) ^ time\n    ci= p * pow((1+(r/100)),t);\n    \n    cout<<\"Compound Interest = \";\n    cout<<ci;\n  \n}",
  "c-sharp": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n \npublic class compoundInterest\n{\n    static void Main(string[] args)\n    {\n        float amount, rate, intrest, time, ci, a;\n        Console.Write(\"Enter the principal amount : \");\n        amount = Convert.ToInt32(Console.ReadLine());       \n \n        Console.Write(\"Enter the interest rate : \");\n        rate = Convert.ToInt32(Console.ReadLine());\n \n        Console.Write(\"Enter the period in years: \");\n        time = Convert.ToInt32(Console.ReadLine());        \n \n         intrest = 1+(rate/100);\n         ci = 1;\n         for(a = 1; a <= time; a++)\n            ci = ci * intrest;\n \n         ci = amount * ci - amount;\n \n         Console.WriteLine(\"Your compound interest is : \"+ ci);\n \n    }\n}\n",
  "f-sharp": "let interest = 10.0  \nlet time = 5.0       \nlet principal = 1000.0     \n\nlet compound principal interest time = \n      principal * ((1.0 + interest/100.0) ** (time))\n       \nlet res = compound principal interest time\n\nprintfn \"Compound interest : %.2f\" res\n",
  "java": "import java.util.*;\nclass compoundInterest\n{\n   public static void main (String args[])\n   {\n      double principal, rate, time, compound_interest;\n      Scanner sc = new Scanner(System.in);\n      System.out.print(\"Enter Principle amount : \");\n      principal = sc.nextInt();\n      System.out.print(\"Enter Interest rate : \");\n      rate = sc.nextInt();\n      System.out.print(\"Enter Time period in years : \");\n      time = sc.nextInt();\n      compound_interest = principal * (Math.pow((1 + rate / 100), time));\n      System.out.println(\"The Compound Interest is : \" + compound_interest);\n   }\n}\n",
  "javascript": "function calculateCompoundInterest(principal, rate, time) {\n  const compoundFactor = 1 + rate / 100;\n\n  const compoundInterest = principal * Math.pow(compoundFactor, time);\n  return compoundInterest;\n}\nconsole.log(calculateCompoundInterest(1000, 10, 5));\n",
  "ruby": "puts \"Please enter principal: \"\nprincipal_input = gets.to_f\nputs \"Please enter rate: \"\nrate_input = gets.to_f\nputs \"Please enter time: \"\ntime_input = gets.to_f\n\ndef calculateCompoundInterest principal, rate, time\n    (principal * (1+(rate/100))**time).round(2)\nend\n\nputs calculateCompoundInterest(principal_input, rate_input, time_input)\n",
  "swift": "import Swift\nimport Foundation\n\nvar principal = 1000.0\nvar rate = 10.0\nvar time = 5.0\n\nvar interest = principal * pow(1 + rate/100.0, time)\nprint(interest)\n",
  "typescript": "function calculateCompoundInterest(\n  principal: number,\n  rate: number,\n  time: number,\n): number {\n  const compoundFactor: number = 1 + rate / 100;\n\n  const compoundInterest: number = principal * Math.pow(compoundFactor, time);\n  return compoundInterest;\n}\nconsole.log(calculateCompoundInterest(1000, 10, 5));\n",
  "description": "\n## Write a program to calculate compound interest\n\nCompound interest = principal amount \\* (1 + rate of interest) ^ time\n\n```txt\nPrincipal : 1000\nRate      : 10\nTime      : 5\n\nCompound interest : 1610.51\n```\n\n---\n",
  "trackId": 1354,
  "lastUpdated": "2023-11-27T09:24:09Z",
  "contributors": [
    "harshraj8843",
    "Preetraj2002",
    "AshitaSingamsetty",
    "anandfresh",
    "esivakumar26",
    "ShivamK2002",
    "jfinley6",
    "hi-Kartik2004",
    "sharvil1205",
    "joao-vitor-souza",
    "grraghav120",
    "shivampipalwa",
    "KaptainCS3"
  ],
  "julia": "print(\"Enter the principal: \")\nprincipal = parse(Float64, readline(stdin))\nprint(\"Enter the interest: \")\ninterest = parse(Float64, readline(stdin))\nprint(\"Enter the time: \")\ntime = parse(Float64, readline(stdin))\nci =  principal * ((1 + interest/100) ^ time)\nprintln(\"Compund Interest: \", ci)\n",
  "scala": "import scala.io.StdIn._;\n\nobject compoundInterest {\n  def main(args:Array[String]):Unit={\n    val principal = readLine().toInt;\n    println(\"Enter the principal amount : \"+principal);\n    val interest = readLine().toInt;\n    println(\"Enter the rate of interest : \"+interest);\n    val time = readLine().toInt;\n    println(\"Enter the time : \"+time);\n    val compoundInterest = principal * Math.pow((1 + interest), time) ;\n    println(\"Compound Interest :\"+compoundInterest);\n  }\n}\n",
  "dart": "import 'dart:io';\nimport 'dart:math';\nvoid main(){\n  print(\"Enter the principal :\");\n  double principal = double.parse(stdin.readLineSync()!);\n  print(\"Enter the interest :\");\n  double interest = double.parse(stdin.readLineSync()!);\n  print(\"Enter the time :\");\n  double time = double.parse(stdin.readLineSync()!);\n  double ci = principal *  pow(1 + interest/100, time);\n  print('Area of circle : $ci');\n}\n",
  "go": "package main\n\nimport(\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc calculateCompoundInterest(principal, rate, time float64) float64{\n\tinterest := principal*math.Pow(1+(rate/100),time)\n\treturn interest\n}\n\nfunc main(){\n\tvar principal,rate,time float64\n\n\tfmt.Print(\"Principal : \")\n\tfmt.Scanln(&principal)\n\n\tfmt.Print(\"Rate : \")\n\tfmt.Scanln(&rate)\n\n\tfmt.Print(\"Time : \")\n\tfmt.Scanln(&time)\n\n\tinterest := calculateCompoundInterest(principal,rate,time)\n\n\tfmt.Printf(\"Compound interest : %.2f\\n\",interest)\n}",
  "php": "<?php\nfunction compoundInterest($principal, $interest, $time) {\n   $compoundInterest =  $principal * pow((1+$interest), $time);\n   return $compoundInterest;\n}\necho compoundInterest(1000, 10, 5);\n?>\n",
  "perl": "#!/usr/bin/perl\nuse warnings;\nuse strict;\nprint \"Enter the principal amount : \";\nmy $principal = <STDIN>;\nprint \"Enter the rate of interest : \";\nmy $interest = <STDIN>;\nprint \"Enter the time : \";\nmy $time = <STDIN>;\nmy $compoundInterest = $principal  * ((1 + $interest) ** $time);\nprint \"Compound Interest :\".$compoundInterest, \"\\n\";\n",
  "python": "principal = int(input())\nrate = int(input())\ntime = int(input())\nprint(round(principal * ((1 + rate / 100) ** time), 2))\n\n# Contributed by Raghav Garg\n",
  "r": "# Function to calculate compound interest\ncalculate_compound_interest <- function(principal, rate, time) {\n    compound_interest <- principal * (1 + rate*0.01)^time\n    return(compound_interest)\n}\n\n# Take user input for principal amount, rate of interest, and time\nprincipal <- as.numeric(readline(\"Principal: \"))\nrate <- as.numeric(readline(\"Rate : \"))\ntime <- as.numeric(readline(\"Time : \"))\n\n# Validate input\nif (!is.numeric(principal) || !is.numeric(rate) || !is.numeric(time)) {\n    cat(\"Invalid input. Please enter valid numeric values.\")\n} else {\n    # Calculate compound interest using the function\n    compound_interest <- calculate_compound_interest(principal, rate, time)\n    \n    # Print the result\n    cat(\"Compound Interest:\", compound_interest, \"\\n\")\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "php",
    "perl",
    "python",
    "r"
  ]
}