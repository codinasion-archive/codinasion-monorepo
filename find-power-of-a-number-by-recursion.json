{
  "slug": "find-power-of-a-number-by-recursion",
  "title": "Find Power Of A Number By Recursion",
  "c": "#include <stdio.h> /* printf, scanf */\n\n/*assuming that num and exponent are positive and natural*/\nint PowerOf(int num,int expo);\n\nint main()\n{\n    int num =0;\n    int expo =0;\n\n    if(scanf(\"%d %d\",&num, &expo) != 2)\n    {\n        return -1;\n    }\n\n    printf(\"%d\",PowerOf(num,expo));\n\n    return 0;\n\n}\n\nint PowerOf(int num,int expo)\n{\n    if(expo == 1)\n    {\n        return num;\n    }\n\n    return PowerOf(num,expo -1) * num;\n}",
  "c-plus-plus": "#include<iostream> //cout, cin\n\n//finding the power of a number, assuming that the base and exponent are positive and natural\nint PowerOfNumRec(int base,int expo);\n\nint main()\n{\n    int base = 0;\n    int expo = 0;\n\n    std::cout << \"please enter base number and than exponent number:\" << std::endl;\n\n    std::cin >> base >> expo;\n\n    std::cout << PowerOfNumRec(base,expo) << std::endl;\n}\n\n\nint PowerOfNumRec(int base,int expo)\n{\n    if(expo == 1)\n    {\n        return base;\n    }\n\n    return base * PowerOfNumRec(base,expo - 1);\n}",
  "c-sharp": "using System;\npublic class Power\n{\n \n public static void Main()\n\t{\n    int bNum,pwr;\n    int result;\n     \n    Console.Write(\" Input the base  value : \");\n    bNum = Convert.ToInt32(Console.ReadLine());\n     \n    Console.Write(\" Input the exponent : \");\n    pwr = Convert.ToInt32(Console.ReadLine());\n     \n    result=CalcuOfPower(bNum,pwr);\n     \n    Console.Write(\" The value of {0} to the power of {1} is : {2} \\n\\n\",bNum,pwr,result);\n\t}\n\npublic static int CalcuOfPower( int x,int y)\n {\n  if (y == 0)\n   return 1;\n  else\n   return x * CalcuOfPower( x, y - 1 );\n }\n}\n",
  "java": "import java.util.Scanner;\n\nclass FindPowerOfANumberByRecursion {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the number: \");\n        int number = scanner.nextInt();\n        System.out.print(\"Enter the power: \");\n        int power = scanner.nextInt();\n\n        if (power < 0 || number < 0) {\n            System.out.println(\"Invalid input/Power can't be negative\");\n        } else {\n            System.out.println(number + \"^\" + power + \" = \" + findPower(number, power));\n        }\n    }\n\n    private static long findPower(int number, int power) {\n        if (power == 0) {\n            return 1;\n        } else {\n            return number * findPower(number, power - 1);\n        }\n    }\n}",
  "javascript": "export function findPowerOfANumberByRecursion(\n  number,\n  power,\n  poweredNumber = number,\n  counter = 1,\n) {\n  if (power === 0) return 1;\n\n  if (power === counter) return poweredNumber;\n\n  return findPowerOfANumberByRecursion(\n    number,\n    power,\n    poweredNumber * number,\n    ++counter,\n  );\n}\n",
  "ruby": "# frozen_string_literal: true\n\nputs 'This program calculates the power of a number.'\nprint 'Enter the base number: '\nnum1 = gets.chomp.to_i\nprint 'Enter the power or exponent: '\nnum2 = gets.chomp.to_i\n\ndef power(num1, num2)\n  return 'Power/exponent cannot be negative' if num2.negative?\n  return 1 if num2.zero?\n\n  num1 * power(num1, num2 - 1)\nend\n\nputs \"#{num1}^#{num2} = #{power(num1, num2)}\"\n",
  "swift": "import Foundation\n\nfunc power(base: Int, exponent: Int) -> Int {\n    // Base case\n    if exponent == 0 {\n        return 1\n    }\n    // Recursive case\n    return base * power(base: base, exponent: exponent - 1)\n}\n\n// Example usage\nlet base = 2\nlet exponent = 3\nlet result = power(base: base, exponent: exponent)\nprint(\"The power of \\(base) raised to \\(exponent) is \\(result)\")\n",
  "typescript": "const number = 2;\nconst pow = 3;\n\nfunction power(num: number, exponent: number): number {\n  return exponent == 0 ? 1 : num * power(num, exponent - 1);\n}\n\nconsole.log(\"Number :\", number);\nconsole.log(\"Power :\", pow);\n\nconsole.log(\"Output :\", power(number, pow));\n",
  "description": "\n## Write a program to find power of a number by recursion\n\nPower of a number is calculated by multiplying the number by itself for the given number of times. For example, 2^3 = 2 _ 2 _ 2 = 8.\n\nPower of a number can be calculated by recursion. The formula is:\n\n```math\nx^n = x * x^{n-1}\n```\n\n```txt\nInput  : 2 3\nOutput : 8\n```\n\n---\n",
  "trackId": 531,
  "lastUpdated": "2024-06-16T13:55:26Z",
  "contributors": [
    "harshraj8843",
    "maheshmeleti",
    "bulutg",
    "MaryamMansour",
    "anandfresh",
    "sancoLgates",
    "Osher160",
    "Ipankaj07",
    "anastazir",
    "RShalman",
    "AthiraKadampatta"
  ],
  "dart": "import 'dart:io';\n\nint calculatePowerRec(int base, int exponent) {\n  if (exponent == 0) {\n    return 1;\n  } else {\n    return base * calculatePowerRec(base, exponent - 1);\n  }\n}\n\nvoid main() {\n  stdout.write(\"Enter the base: \");\n  int base = int.parse(stdin.readLineSync()!);\n\n  stdout.write(\"Enter the exponent: \");\n  int exponent = int.parse(stdin.readLineSync()!);\n\n  int result = calculatePowerRec(base, exponent);\n  print(result);\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc power(num float64, pow float64) float64 {\n\tif pow == 0 {\n\t\treturn 1\n\t}\n\treturn num * power(num, pow - 1)\n}\n\nfunc main() {\n\tvar base float64\n\tvar exponent float64\n\t\n\tfmt.Print(\"Enter base number: \")\n\tfmt.Scan(&base)\n\n\tfmt.Print(\"Enter power of exponent: \")\n\tfmt.Scan(&exponent)\n\n\tfmt.Println(power(base, exponent))\n}\n",
  "php": "<?php\n\nfunction power($num, $pow){\n    if($pow === 0) return 1;\n    return $num * power($num, $pow-1);\n}\n\nprint power(2,3)\n\n?>\n",
  "python": "def power(base, exp):\n    if exp == 1:\n        return base\n    if exp != 1:\n        return base * power(base, exp - 1)\n\n\nbase = int(input(\"Enter base  : \"))\npow = int(input(\"Enter power : \"))\n\nprint(\"\\nResult :\", power(base, pow))\n",
  "r": "power <- function(base, exponent) {\r\n  # Base case: if exponent is 0, return 1\r\n  if (exponent == 0) {\r\n    return(1)\r\n  }\r\n  # Recursive case: compute power recursively\r\n  else {\r\n    return(base * power(base, exponent - 1))\r\n  }\r\n}\r\n\r\n# Example usage:\r\nbase <- 2\r\nexponent <- 3\r\nresult <- power(base, exponent)\r\ncat(\"Result:\", result)",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "ruby",
    "swift",
    "typescript",
    "dart",
    "go",
    "php",
    "python",
    "r"
  ]
}