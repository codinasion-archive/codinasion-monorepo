{
  "slug": "find-sum-of-numbers-by-recursion",
  "title": "Find Sum Of Numbers By Recursion",
  "c": "#include <stdio.h> /* scanf, printf */\n#include <stdlib.h> /*malloc, free*/\n\nint FindSum(int *arr,int size);\nvoid InitArr(int *arr,int size);\nint main()\n{\n    int *arr = NULL;\n    int size = 0;\n    printf(\"how many  elements you want to insert?\\n\");\n    if(1 != scanf(\"%d\",&size))\n    {\n        return -1;\n    }\n\n    arr = (int *)malloc(size * sizeof(int));\n\n    if (arr == NULL)\n    {\n        return -1;\n    }\n\n    InitArr(arr,size);\n\n    printf(\"%d\\n\",FindSum(arr,size));\n\n    free(arr);\n\n    return 0;\n}\n\nvoid InitArr(int *arr,int size)\n{\n    int i = 0;\n    printf(\"please enter all of the elements:\\n\");\n\n    for(i = 0; i < size; ++i)\n    {\n        if(scanf(\"%d\",arr + i)!= 1)\n        {\n            free(arr);\n            exit(1);\n        }\n    }\n}\n\n\nint FindSum(int *arr,int size)\n{\n    if (size == 1)\n    {\n        return arr[0];\n    }\n\n    return arr[size -1] + FindSum(arr,size -1);\n}",
  "c-plus-plus": "#include <iostream>\nusing namespace std;\n\nint sumOfNumbersByRecursion(int a[], int n, int x)\n{\n    if (n == x)\n    {\n        return 0;\n    }\n    return a[x] + sumOfNumbersByRecursion(a, n, x + 1);\n}\nint main()\n{\n    int n;\n    cin >> n;\n    int a[n];\n    for (int i = 0; i < n; i++)\n    {\n        cin >> a[i];\n    }\n    cout << sumOfNumbersByRecursion(a, n, 0) << \"\\n\";\n    return 0;\n}",
  "c-sharp": "using System;\r\n\r\npublic class FindSumOfNumbersByRecursion {\r\n\r\n    public int sumOfNumbersByRecursion(int n) {\r\n        int sum;\r\n        if (n == 1){\r\n            return 1;\r\n        }\r\n        else{\r\n            sum = sumOfNumbersByRecursion(n - 1) + n;\r\n            return sum;\r\n        }\r\n    }\r\n    public static void Main(String[] args){\r\n        FindSumOfNumbersByRecursion n = new FindSumOfNumbersByRecursion();\r\n        Console.Write(\"Input  : \");\r\n        for(int i = 1; i <= 5; i++){\r\n            Console.Write(i + \" \");\r\n        }\r\n        Console.WriteLine(\" \");\r\n        Console.WriteLine(\"Output : {0}\", n.sumOfNumbersByRecursion(5));\r\n\r\n    }\r\n}\r\n        \r\n",
  "java": "import java.util.Scanner;\n\npublic class FindSumOfNumbersByRecursion {\n\n    static int sum_of_digit(int n) {\n        if (n == 0)\n            return 0;\n        return (n % 10 + sum_of_digit(n / 10));\n    }\n\n    public static void main(String args[]) {\n        Scanner my_scanner = new Scanner(System.in);\n        System.out.print(\"Input : \");\n        int num = my_scanner.nextInt();;\n        int result = sum_of_digit(num);\n        System.out.println(\"Sum of digits in \" + num + \" is \" + result);\n    }\n}\n",
  "javascript": "function sumOfNumbersByRecursion(num) {\n  let sum = 0;\n  if (num > 0) {\n    sum = (num % 10) + sumOfNumbersByRecursion(Math.floor(num / 10));\n  }\n  return sum;\n}\n\nconsole.log(sumOfNumbersByRecursion(12345));\n",
  "ruby": "puts \"Add the numbers you want to sum using recursion\"\ninput = gets.chomp\nnumbers = input.split(\" \").map(&:to_i)\n\ndef sum_of_numbers(numbers)\n  if numbers == []\n    0\n  else\n    numbers[0] + sum_of_numbers(numbers[1..-1])\n  end\nend\n\nputs \"Sum: #{sum_of_numbers(numbers)}\"\n",
  "typescript": "function RecursiveSumOfNums(num: number): number {\n  if (num === 0) {\n    return 0;\n  }\n  return (num % 10) + RecursiveSumOfNums(Math.floor(num / 10));\n}\n\nconsole.log(RecursiveSumOfNums(12345));\n",
  "description": "\n## Write a program to find sum of numbers by recursion\n\n```txt\nInput  : 1 2 3 4 5\nOutput : 15\n```\n\n---\n",
  "trackId": 3322,
  "lastUpdated": "2024-01-21T13:09:15Z",
  "contributors": [
    "bharathbarma94",
    "harshraj8843",
    "anandfresh",
    "AshitaSingamsetty",
    "roberanegussie",
    "AdityaNarayanPradhan",
    "YAbargil",
    "rafaover",
    "esivakumar26",
    "Osher160",
    "joao-vitor-souza",
    "rksp25",
    "greeshma-d"
  ],
  "scala": "object HelloWorld {\n\tdef main(args: Array[String]): Unit = {\n\t  val number = scala.io.StdIn.readInt();\n\t  println(sum(number));\n\t}\n\n\tdef sum(n: Int): Int = {\n   if (n == 0)\n    return 0;\n   else\n    return n + sum(n-1)\n }\n}\n",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc sumRecursive(num int) int {\n\tif num == 0 {\n\t\treturn 0\n\t}\n\treturn num%10 + sumRecursive(num/10)\n}\n\nfunc main() {\n\tvar input string\n\n\tfmt.Println(\"Input :\")\n\tfmt.Scanln(&input)\n\n\tnumberStrings := strings.Fields(input)\n\tnumbers := make([]int, len(numberStrings))\n\n\tfor i, numStr := range numberStrings {\n\t\tnum, _ := strconv.Atoi(numStr)\n\t\tnumbers[i] = num\n\t}\n\n\tsum := 0\n\tfor _, num := range numbers {\n\t\tsum += sumRecursive(num)\n\t}\n\tfmt.Println(\"Output :\", sum)\n}",
  "php": "<?php\n\nfunction calculateSum($numbers, $index, $currentSum) {\n\n     if ($index == count($numbers)) {\n        return $currentSum;\n    } else {\n        \n        return calculateSum($numbers, $index + 1, $currentSum + $numbers[$index]);\n    }\n}\n// Taking input from the user\necho \"Enter space-separated numbers: \";\n$input = readline();\n$numbers = explode(' ', $input);\n$numbers = array_map('intval', $numbers);\n$result = calculateSum($numbers, 0, 0);\necho \"Sum of the numbers is: $result\\n\";\n?>\n",
  "perl": "sub sumOfNumbersByRecursion {\n  my ($num) = @_;\n  $sum = 0;\n  if ($num > 0) {\n    $sum = ($num % 10) + sumOfNumbersByRecursion(($num / 10));\n  }\n  return $sum;\n}\n\nprint sumOfNumbersByRecursion(12345);\n",
  "python": "from typing import List\n\n\ndef recursive_sum(numbers: List[int]) -> int:\n    if len(numbers) != 0:\n        return numbers[-1] + recursive_sum(numbers[:-1])\n    return 0\n\n\nprint(recursive_sum([1, 2, 3, 4, 5]))  # Output: 15\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "ruby",
    "typescript",
    "scala",
    "go",
    "php",
    "perl",
    "python"
  ]
}