{
  "slug": "convert-octal-to-binary",
  "title": "Convert Octal To Binary",
  "c": "#include <stdio.h>\n#include <math.h>\n\nint main()\n{\n    int i, octal, decimal = 0;\n    long binary = 0;\n    i = 0;\n    \n    printf(\"Enter the Octal Number = \");\n    scanf(\"%d\",&octal);\n\n    while(octal != 0)\n    {\n        decimal = decimal + (octal % 10) * pow(8, i);\n        i++;\n        octal = octal / 10;\n    }\n    i = 1;\n    while(decimal != 0)\n    {\n        binary += ((decimal % 2) * i);\n        decimal = decimal / 2;\n        i = i * 10;\n    }\n\n    printf(\"The Binay Value = %ld\\n\", binary); \n}\n",
  "c-plus-plus": "#include<iostream>\n\nusing namespace std;\n\nint main()\n\n{\n\n    int num,p=1;\n\n    int decmal=0,i=1,j,d;\n\n    int  binary=0;\n\n    cout<<\"Enter a number in octal (using digit 0 - 7) :\";\n\n\tcin>>num;\tj=num;\n\n\tdo\n\n\t{\n\n          d = j % 10;\n\n            if(i==1)\n\n                  p=p*1;\n\n            else\n\n                 p=p*8;\n\n      decmal=decmal+(d*p);\n\n\t   i++;\n\n\t   j=j/10;\n\n\t   }\n\n\t   while(j>0);\n\n\t   i=1;\n\n\t   j=decmal;\n\n\t   do\n\n\t   {\n\n\t   \t binary=binary+(decmal % 2)*i;\n\n        i=i*10;\n\n        decmal=decmal/2;\n\n        j=j/2;\n\n\t   }\n\n\t   while(j>0);\n\n\t   cout<<\"Octal number into Binary number   \"<<binary;\n\n}\n",
  "c-sharp": "using System;\npublic class OctalToBinary\n{\n    public static void Main()\n    {\n        long n1, n2, k = 1;\n        long decimal_number = 0, i = 1, j, d;\n        long binary_number = 0;\n        Console.Write(\"Input an octal number : \");\n        n1 = Convert.ToInt32(Console.ReadLine());\n        n2 = n1;\n        for (j = n1; j > 0; j /= 10)\n        {\n            d = j % 10;\n            if (i == 1)\n                k *= 1;\n            else\n                k *= 8;\n            decimal_number = decimal_number + (d * k);\n            i++;\n        }\n        i = 1;\n        for (j = decimal_number; j > 0; j /= 2)\n        {\n            binary_number = binary_number + (decimal_number % 2) * i;\n            i *= 10;\n            decimal_number /= 2;\n        }\n        Console.Write(\"The equivalent binary number: {1} \\n\\n\", n2, binary_number);\n        Console.ReadKey();\n    }\n}\n",
  "java": "/**\n * CONTRIBUTOR: JASMIN, RAMON EMMIEL P.\n * COUNTRY: PHILIPPINES\n */\n\n import java.lang.*;\n\n public class ConvertOctalToBinary{\n\n    public static String convert(String octal){\n        return Integer.toBinaryString(Integer.parseInt(octal, 8));\n    }\n }",
  "javascript": "function octalToBinary(octnum) {\n  let i = 0;\n  let binary = \"\";\n\n  while (i < octnum.length) {\n    let c = octnum[i];\n    switch (c) {\n      case \"0\":\n        binary += \"000\";\n        break;\n      case \"1\":\n        binary += \"1\";\n        break;\n      case \"2\":\n        binary += \"010\";\n        break;\n      case \"3\":\n        binary += \"011\";\n        break;\n      case \"4\":\n        binary += \"100\";\n        break;\n      case \"5\":\n        binary += \"101\";\n        break;\n      case \"6\":\n        binary += \"110\";\n        break;\n      case \"7\":\n        binary += \"111\";\n        break;\n      default:\n        document.write(\"<br>Invalid Octal Digit \" + octnum[i]);\n        break;\n    }\n    i++;\n  }\n\n  return binary;\n}\n\nconsole.log(octalToBinary(\"12\"));\n",
  "kotlin": "import kotlin.math.pow\n\nfun main() {\n    print(\"Enter Octal No. to Convert in Binary: \")\n    val num = readln().toInt()\n    println()\n    print(\"Hexadecimal of Octal No: $num is: \")\n    print(octalToBinary(num))\n}\n\nprivate fun checkOctalNumber(octalNum: String): Boolean {\n    var isOctal = true\n\n    for(charAtPos in octalNum) {\n        if(!((charAtPos >= '0') && (charAtPos <= '7'))) {\n            isOctal = false\n            break\n        }\n    }\n    return isOctal\n}\n\nprivate fun octalToBinary(nums: Int): String {\n    val octalN = nums.toString()\n    var binaryNum = \"\"\n\n    if(checkOctalNumber(octalN)) {\n        val octalNumString: String = octalN\n        var i = 0\n        while(i < octalNumString.length) {\n            when(octalNumString[i]) {\n                '0'  -> binaryNum += \"000\"\n                '1'  -> binaryNum += \"1\"\n                '2'  -> binaryNum += \"010\"\n                '3'  -> binaryNum += \"011\"\n                '4'  -> binaryNum += \"100\"\n                '5'  -> binaryNum += \"101\"\n                '6'  -> binaryNum += \"110\"\n                '7'  -> binaryNum += \"111\"\n            }\n            i++\n        }\n    } else {\n        println(\"$octalN is not an octal number\")\n    }\n\n    return binaryNum\n}",
  "ruby": "module Octal_to_binary\n\n  def self.convert(num)\n    result = base10_to_base2(base8_to_base10(num))\n    num.negative? ? -result : result\n  end\n  \n  private\n\n  def self.base8_to_base10(num)\n    decimal = 0\n    num.to_s.chars.reverse.each_with_index do |d, i|\n      decimal += d.to_i * 8**i\n    end\n    decimal\n  end\n\n  def self.base10_to_base2(num)\n    divide(num: num)\n  end\n\n  def self.divide(num: 0, reminder: 0, result: \"\")\n    result.prepend((num % 2).to_s)\n    return result.to_i if num == 0\n    divide(num: num / 2, reminder: num % 2, result: result)\n  end\nend\n\nputs Octal_to_binary.convert(12) # => 1010\n",
  "typescript": "const octalToBinary = (octal: string): string => {\n  return parseInt(octal, 2).toString(8);\n};\n\nconsole.log(octalToBinary(\"1010\"));\n",
  "description": "\n## Write a program to convert octal to binary\n\nOctal is a base-8 number system. It uses only eight digits: 0, 1, 2, 3, 4, 5, 6, and 7. The digits are called octits. An octit is the smallest unit of information in a computer. An octit can be used to represent a single value, such as 0, 1, 2, 3, 4, 5, 6, or 7, or it can be used to represent a single state, such as on or off.\n\nBinary is a base-2 number system. It uses only two digits: 0 and 1. The digits are called bits. A bit is the smallest unit of information in a computer. A bit can be either 0 or 1. A bit can be used to represent a single value, such as 0 or 1, or it can be used to represent a single state, such as on or off.\n\nTo convert an octal number to binary, we can use the following algorithm:\n\n1. Convert the octal number to decimal.\n2. Convert the decimal number to binary.\n\n```txt\nInput  : 12\nOutput : 1010\n```\n\n---\n",
  "trackId": 4499,
  "lastUpdated": "2024-04-22T18:20:57Z",
  "contributors": [
    "charan-hash",
    "PunugupatiSaikumar",
    "harshraj8843",
    "kenroulier",
    "anandfresh",
    "RiteshK-611",
    "saintramon",
    "Fukurokudzu",
    "rksp25",
    "joao-vitor-souza",
    "saikumarjetti",
    "codingkush"
  ],
  "julia": "println(\"Enter a octal number: \") \nx = readline()\ny = parse(Int, x, base=8)\ny = string(y, base=2)\nprintln(\"Binary of \", x, \": \", y)",
  "scala": "object NumberConv {\ndef binaryCon(n : Int) =\n{\nvar i=0\nvar num=n\nvar A=new Array[Int](10)\nwhile(num>0)\n{\nA(i)=num%2\ni=i+1\nnum=num/2\n}\nprintln(\"Binary equivalent :\" )\nfor(j<-i-1 to 0 by -1)\nprint(A(j))\n}\n\ndef main(args: Array[String]) = \n{\nprintln(\"Enter a Octal number :\")\nvar n=scala.io.StdIn.readInt()\nprintln(\"%d\".format(n))\nbinaryCon(n)\n}\n}\n",
  "dart": "import 'dart:io';\n\nvoid main() {\n  // Prompt the user to enter an octal number\n  stdout.write(\"Enter an octal number: \");\n  String octalInput = stdin.readLineSync() ?? \"\";\n  \n  try {\n    // Parse the octal input as an integer\n    int decimalNumber = int.parse(octalInput, radix: 8);\n    \n    // Convert the decimal number to binary\n    String binaryResult = decimalToBinary(decimalNumber);\n    \n    // Display the binary result\n    print(\"Binary equivalent: $binaryResult\");\n  } catch (e) {\n    print(\"Invalid input. Please enter a valid octal number.\");\n  }\n}\n\nString decimalToBinary(int decimalNumber) {\n  // Convert decimal to binary using bitwise shift\n  String binaryResult = \"\";\n  \n  while (decimalNumber > 0) {\n    binaryResult = (decimalNumber % 2).toString() + binaryResult;\n    decimalNumber ~/= 2;\n  }\n  \n  return binaryResult;\n}\n",
  "go": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar value string = \"\"\n\tvar binary string = \"\"\n\n\tfmt.Print(\"Type a number: \")\n\tfmt.Scan(&value)\n\n\tvar length int = len(value)\n\n\tfor i := 0; i < length; i++ {\n\n\t\tswitch value[i] {\n\t\tcase '0':\n\t\t\tbinary += \"000\"\n\t\tcase '1':\n\t\t\tbinary += \"001\"\n\t\tcase '2':\n\t\t\tbinary += \"010\"\n\t\tcase '3':\n\t\t\tbinary += \"011\"\n\t\tcase '4':\n\t\t\tbinary += \"100\"\n\t\tcase '5':\n\t\t\tbinary += \"101\"\n\t\tcase '6':\n\t\t\tbinary += \"110\"\n\t\tcase '7':\n\t\t\tbinary += \"111\"\n\t\t}\n\n\t}\n\n\tfmt.Println(\"Binary is:\", binary)\n\n}\n",
  "haskell": "import Data.Char (digitToInt)\n\n-- Convert an octal digit to its binary representation\noctalToBinaryDigit :: Char -> String\noctalToBinaryDigit '0' = \"000\"\noctalToBinaryDigit '1' = \"001\"\noctalToBinaryDigit '2' = \"010\"\noctalToBinaryDigit '3' = \"011\"\noctalToBinaryDigit '4' = \"100\"\noctalToBinaryDigit '5' = \"101\"\noctalToBinaryDigit '6' = \"110\"\noctalToBinaryDigit '7' = \"111\"\noctalToBinaryDigit _   = error \"Invalid octal digit\"\n\n-- Convert an octal number string to binary\noctalToBinary :: String -> String\noctalToBinary = concatMap octalToBinaryDigit\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter an octal number:\"\n    octal <- getLine\n    let binary = octalToBinary octal\n    putStrLn $ \"Binary equivalent: \" ++ binary\n",
  "php": "<?php\n\n$octal = readline();\n$possibleChars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"];\n\n$decimal = 0;\n\nforeach (str_split($octal) as $key => $value) {\n    if (!in_array($value, $possibleChars)) {\n        exit(\"Input contains an invalid value: \" . $value . \"\\n\");\n    } else {\n        $decimal += $value * pow(8, (int) (strlen($octal) - $key - 1));\n    }\n}\n\n$binary = \"\";\n\nwhile (true) {\n    $quocient = floor($decimal / 2);\n    if ($quocient < 1) {\n        $binary .= $decimal;\n        break;\n    }\n    $remainder = $decimal % 2;\n    $decimal = $quocient;\n    $binary .= $remainder;\n}\n\necho strrev($binary) . \"\\n\";\n\n?>",
  "perl": "print \"Enter the octal value : \";\nmy $oct_value = oct(<STDIN>);\nprintf(\"Equivalent binary value : %b\\n\",$oct_value);\n",
  "python": "print(bin(int(input(), 8))[2:])\n",
  "rust": "// To convert an octal number to binary\n// Example:\n// \tInput  : 12\n// \tOutput : 1010\n\nuse std::io;\n\n// ========== Function to convert Octal to Binary ====================\n\nfn octaltobinary(octalin: &str) -> String {\n\n\tlet mut usable  =  true;\n\tlet mut binout = String::new(); \n\n\tfor character in octalin.chars() {\n\t        \n\t\tmatch character {\n        \t\t'0' => binout.push_str(\"000\"),\n        \t\t'1' => binout.push_str(\"001\"),\n        \t\t'2' => binout.push_str(\"010\"),\n        \t\t'3' => binout.push_str(\"011\"),\n        \t\t'4' => binout.push_str(\"100\"),\n       \t\t\t'5' => binout.push_str(\"101\"),\n        \t\t'6' => binout.push_str(\"110\"),\n        \t\t'7' => binout.push_str(\"111\"),\n        \t\t_ => {\n        \t\t\tprint!(\"{} \",character);\n        \t\t\tprintln!(\" - Number is not an Octal number\");\n\t\t\t\tusable = false;\n    \t\t\t}\n    \t\t}\n\t}\n\n\tif usable {\n\t\treturn binout;\n\t\t}\n\telse {\n\t\tlet mut retmess = String::new();\n\t\tretmess.push_str(\"Octal not entered and cannot be converted\");\n\t\treturn retmess;\n\t\t}\n}\n\n//=============  Main function to drive testing and show how to call ===============\nfn main() {\n\n\t// the input string and this main function can be removed. This is simply for testing\n\tprintln!(\"Input an Octal number\");\n\tlet mut input_num = String::new();\t\n\tlet _rtn = io::stdin().read_line(&mut input_num);\n\n\t// get rid of the newline at the end\n\tlet len = input_num.len();\n\tinput_num.truncate(len - 1);  \n\n\t// example of calling with an octal to convert to binary\n\tlet bin_num = octaltobinary(&input_num);\n\n\tprintln!();\n\tprintln!(\"Octal number entered -> {}, converted to binary -> {} \", input_num, bin_num);\n\tprintln!();\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "rust"
  ]
}