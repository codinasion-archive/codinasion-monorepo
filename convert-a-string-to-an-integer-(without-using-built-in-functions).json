{
  "slug": "convert-a-string-to-an-integer-(without-using-built-in-functions)",
  "title": "Convert A String To An Integer (without Using Built In Functions)",
  "c": "#include <stdio.h> /* printf, scanf */\n\n/* assuming str includes only valid ascii numbers '0' - '9' */\nint Atoi(char *str);\n\nint main()\n{\n    /* test -- hardcoded and on stack */\n    char str[100] = {0};\n\n    scanf(\"%s\",str);\n\n    printf(\"%d\\n\",Atoi(str));\n\n    return 0;\n}\n\nint Atoi(char *str)\n{\n    int ret = 0;\n\n    while(*str != '\\0')\n    {\n        ret *= 10;\n        ret += *str - '0';\n\n        ++str;\n    }\n\n    return ret;\n}",
  "c-plus-plus": "#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint ConvertAStringToAnInteger(string str) {\n\tint sign;\n\tif (str[0] == '-') {\n\t\tsign = -1;\n\t\tstr = str.substr(1);\n\t}\n\telse {\n\t\tsign = 1;\n\t}\n\n\tint n = 0;\n\tfor (int i = 0; i < str.size(); i++) {\n\t\tn += (str[i] - '0') * pow(10,str.size() - i -1); // char - '0' == (int) char\n\t}\n\n\treturn n;\n}",
  "c-sharp": "using System;\nclass StringToInteger{\npublic static void convert(string s) \n{ \n    int num = 0; \n    int n = s.Length; \n\n    for(int i = 0; i < n; i++) \n        num = num * 10 + ((int)s[i] - 48); \n    Console.Write(num); \n} \n  \npublic static void Main(string[] args)\n{\n    string s = \"123\"; \n    convert(s); \n}\n}\n",
  "java": "public class ConvertAStringToAnInteger {\n\n//Driven Code\n        public static void main(String args[]) {\n\n            // Given string of number\n\n            String convertingString = \"123456\";\n            System.out.println(\"String Before Conversion :  \" + convertingString);\n            int output = stringToint(convertingString);    // Function Call\n            System.out.println(\"int value as output \" + output); // Print the answer\n\n        }\n\n\n        public static int stringToint(String str) {\n            int i = 0, number = 0;              // Initialize a variable\n            boolean isNegative = false;\n            int len = str.length();\n            if (str.charAt(0) == '-') {         //checking string\n                isNegative = true;\n                i = 1;\n            }\n            while (i < len) {                 // Iterate till length of the string\n                number *= 10;\n                number += (str.charAt(i++) - '0');\n            }\n            if (isNegative)\n                number = -number;\n            return number;\n        }\n    }\n\n",
  "javascript": "function convertStringToInteger(str) {\n  let [isNegative, result, num] = [false, str, 0];\n\n  if (result[0] === \"-\") {\n    isNegative = true;\n    result = result.slice(1);\n  }\n\n  for (let i = 0; i < result.length; i += 1) {\n    const charCode = result.charCodeAt(i) - 48;\n    const pow = 10 ** (result.length - i - 1);\n    num += charCode * pow;\n  }\n\n  return isNegative ? num * -1 : num;\n}\n\nconst str = \"123\";\nconsole.log(`Input: ${str}, type: ${typeof str}`);\nconsole.log(\n  `Output: ${convertStringToInteger(\n    str,\n  )}, type: ${typeof convertStringToInteger(str)}`,\n);\n\nconst strWithNegative = \"-123\";\nconsole.log(`Input: ${strWithNegative}, type: ${typeof strWithNegative}`);\nconsole.log(\n  `Output: ${convertStringToInteger(\n    strWithNegative,\n  )}, type: ${typeof convertStringToInteger(strWithNegative)}`,\n);\n",
  "kotlin": "fun main() {\n    print(\"Input : \")\n    println()\n    var input = readLine()\n\n    println(\"Convert string to Integer without using in built function : \" + ConvertAStringToAnInteger(input!!))\n\n}\n\nprivate fun ConvertAStringToAnInteger(num: String):Int {\n    val number = Integer.valueOf(num)\n\n    return number\n}\n\n",
  "ruby": "def string_to_integer(str)\n\n  result = 0\n  sign = 1\n\n  if str[0] == '-'\n    sign = -1\n    str = str[1..-1] # Remove the negative sign from the string\n  end\n\n  str.each_char do |char|\n    if char >= '0' && char <= '9'\n      digit = char.ord - '0'.ord # Convert the character to an integer\n      result = result * 10 + digit # Add the digit to the result\n    else\n      raise ArgumentError, \"Invalid character: #{char}\"\n    end\n  end\n\n  return result * sign\nend\n\n# Input string\nprint \"Enter a string: \"\ninput_str = gets.chomp\n\nbegin\n  integer_result = string_to_integer(input_str)\n  puts \"Output: #{integer_result}\"\nrescue ArgumentError => e\n  puts \"Error: #{e.message}\"\nend\n",
  "typescript": "/**\n * This function converts a string to an integer without using built-in functions with respect to the negative sign and the decimal point\n * @param {string} str - The string to be converted\n * @returns {number} - The converted integer\n * @example\n * convertStringToInteger(\"123\") // returns 123\n * convertStringToInteger(\"123.45\") // returns 123\n *\n *\n * @author [Ahmed Eltaher](https://github.com/ahmedheltaher)\n *\n */\nfunction convertStringToInteger(str: string): number {\n  let isNegative = false;\n  if (str[0] === \"-\") {\n    isNegative = true;\n    str = str.slice(1);\n  }\n  if (str.indexOf(\".\") !== -1) {\n    str = str.slice(0, str.indexOf(\".\"));\n  }\n\n  // Convert the string to an integer\n  let num = 0;\n  for (let i = 0; i < str.length; i++) {\n    num += (str.charCodeAt(i) - 48) * Math.pow(10, str.length - i - 1);\n  }\n\n  // Handle negative numbers\n  return num * (isNegative ? -1 : 1);\n}\n",
  "description": "\n## Write a program to convert a string to an integer (without using built-in functions)\n\n```txt\nInput  : \"123\"\nOutput : 123\n```\n\n---\n",
  "trackId": 2481,
  "lastUpdated": "2024-02-17T16:29:22Z",
  "contributors": [
    "harshraj8843",
    "larsjarred9",
    "madhusgowda",
    "anandfresh",
    "Osher160",
    "ritika4554244",
    "Yarnacle",
    "hi-Kartik2004",
    "rksp25",
    "joao-vitor-souza",
    "smitioswal",
    "ntoniocp",
    "victoriacheng15",
    "ahmedheltaher"
  ],
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"reflect\"\n)\n\n// Returns the passed number string as int. If the provided string isn't right it returns -1\nfunc stringToInt(str string) int {\n\tvar finalInt int = 0\n\n\tfor i := len(str) - 1; i >= 0; i-- {\n\t\tif str[i] >= 48 && str[i] <= 57 {\n\t\t\tpower := float64(len(str) - i - 1)\n\t\t\tfinalInt += int(str[i]-48) * int(math.Pow(10, power))\n\t\t} else {\n\t\t\treturn -1\n\t\t}\n\t}\n\n\treturn finalInt\n}\n\nfunc main() {\n\tresult := stringToInt(\"230500\")\n\tfmt.Println(result)\n\tfmt.Println(reflect.TypeOf(result))\n}\n",
  "php": "<?php\n\n/**\n * Convert a string to an integer (without using built-in functions)\n *\n * @param string $str\n * @return int\n */\n\nfunction stringToInt($str) {\n    $result = 0;\n    $isNegative = false;\n    $i = 0;\n\n    // If the first character is a minus sign, set the negative value\n    if ($str[0] == '-') {\n        $isNegative = true;\n        $i = 1;\n    }\n\n    // Loop through the string and convert it to integer\n    for (; $i < strlen($str); $i++) {\n        $char = $str[$i];\n\n        // If the character is a digit, convert it to integer\n        if ($char >= '0' && $char <= '9') {\n            // Multiply the result by 10 and add the digit\n            $result = $result * 10 + (ord($char) - ord('0'));\n        } else {\n            // If the character is not a digit, break out of the loop\n            break;\n        }\n    }\n\n    // If the number is negative, convert the result to negative\n    if ($isNegative) {\n        $result = -$result;\n    }\n\n    return $result;\n}\n\n// Test cases\n$string = \"2356234\";\n$integer = stringToInt($string);\n\necho \"String: $string\\n\";\necho \"Integer: $integer\\n\";\n?>\n",
  "python": "# -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Sun Oct  9 16:08:39 2022\r\n\r\n@author: smiti\r\n\"\"\"\r\n\r\n# Python3 program to convert a string to an integer (without using built-in functions)\r\n\r\n\r\ndef convert(s: str) -> int:  # function that will do the needful\r\n    num = 0  # Initialize an integer variable\r\n\r\n    # Iterate through all the characters of the string\r\n    for i in s:\r\n        # Subtract ascii value of 0 from the current digit\r\n        num = num * 10 + (ord(i) - ord(\"0\"))\r\n\r\n    return num  # return the ans\r\n\r\n\r\n# Take input:\r\nprint(convert(\"123\"))\r\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "typescript",
    "go",
    "php",
    "python"
  ]
}