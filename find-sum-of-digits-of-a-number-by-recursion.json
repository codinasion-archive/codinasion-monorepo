{
  "slug": "find-sum-of-digits-of-a-number-by-recursion",
  "title": "Find Sum Of Digits Of A Number By Recursion",
  "c": "#include <stdio.h>\n\nint FindSumOfDigitsOfANumberByRecursion(int n){\n    if(n>0){\n        return n%10+FindSumOfDigitsOfANumberByRecursion(n/10);\n    }\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    int res=FindSumOfDigitsOfANumberByRecursion(n);\n    printf(\"%d\",res);\n    return 0;\n}\n\n//Contributed by Raghav Garg",
  "c-plus-plus": "#include <iostream>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint sum_of_digits(int n)\n{\n    if(n==0)\n    {\n        return 0;\n    }\n    int x=n%10;\n    int s=n/10;\n    return x+sum_of_digits(s);\n}\n\n\nint main() {\n\tint number;\n\tcin>>number;\n\tcout<<sum_of_digits(number)<<endl;\n\t\n\t\n\treturn 0;\n}",
  "c-sharp": "using System;\nclass Digits{\nstatic int SumOfDigit(int n)\n{\n    if (n == 0)\n        return 0;\n\n    return(n % 10 + SumOfDigit(n / 10));\n}\n \npublic static void Main()\n{\n    int n = 1234;\n    int ans = SumOfDigit(n);\n    Console.Write(\"Sum of digits : \" + ans);\n}\n}\n",
  "java": "public class FindSumOfDigitsOfANumberByRecursion {\n    public static void main(String[] args) {\n\n        int num = 12345;\n        System.out.print(sum(num));\n    }\n\n    static int sum(int num) {\n        if (num == 0) {\n            return 0;\n        }\n\n        return (num % 10 + sum(num / 10));\n    }\n}\n",
  "javascript": "function sumOfDigits(num) {\n  if (num < 10) {\n    return num;\n  } else {\n    return (num % 10) + sumOfDigits(Math.floor(num / 10));\n  }\n}\n\nsumOfDigits(12345);\n\nconsole.log(\"Sum of Digits of sumOfDigits(12345) is\", sumOfDigits(12345));\n",
  "kotlin": "class FindSumOfDigitsOfANumberByRecursion {\n    fun findSum(num: Int): Int {\n        return recursiveSum(num)\n    }\n\n    private fun recursiveSum(num: Int): Int {\n        if (num == 0) return 0\n        val digit = num / 10\n        return num % 10 + recursiveSum(digit)\n    }\n}",
  "ruby": "def SumOfDigits(num,sum)\n\tif num > 0 \n\t\tsum += (num % 10);\n\t\tSumOfDigits(num / 10,sum);\n\telse\n\t    return sum;    \n\tend\nend\n\nprint \"Enter a number: \";\nnumber = gets.chomp.to_i;  \n\nresult = SumOfDigits(number, 0);\nprint \"Sum of digits: \",result; \n",
  "typescript": "function sumOfDigits(num: number): number {\n  if (num < 10) {\n    return num;\n  } else {\n    return (num % 10) + sumOfDigits(Math.floor(num / 10));\n  }\n}\n\nconsole.log(\"Sum of Digits -> 12345 is\", sumOfDigits(12345));\n",
  "description": "\n## Write a program to find sum of digits of a number by recursion\n\nSuppose we have a number `n` and we want to find the sum of its digits. For example, if `n = 123`, then the sum of its digits is `1 + 2 + 3 = 6`.\n\nRecursion is a method of solving a problem where the solution depends on solutions to smaller instances of the same problem. In this case, we can use recursion to find the sum of digits of a number.\n\n```txt\nInput  : 123\nOutput : 6\n```\n\n---\n",
  "trackId": 733,
  "lastUpdated": "2023-08-03T20:39:16Z",
  "contributors": [
    "harshraj8843",
    "telatin",
    "anandfresh",
    "sancoLgates",
    "esivakumar26",
    "joao-vitor-souza",
    "grraghav120",
    "greeshma-d",
    "Harsh3341",
    "SRR-CODER",
    "demperor-music",
    "UsmanFani",
    "rakibul-islam-raju"
  ],
  "scala": "object sumOfDigits{\ndef calc (num:Int): Int = if(num == 0) 0 else (num % 10) + calc(num/10)\ndef main(args:Array[String]) {\nprintln(calc(123))\n}\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc sumRecursive(nums int) int {\n\tif (nums == 0) {\n\t\treturn 0\n\t}\n\treturn nums % 10 + sumRecursive(nums / 10)\n}\n\nfunc main() {\n\tvar i int\n\tfmt.Print(\"Input Numbers: \")\n\tfmt.Scan(&i)\n\tfmt.Println(sumRecursive(i))\n}\n",
  "php": "<?php\n  function recursiveAdd($arg) {\n    if ($arg>9) {\n        return $arg%10 + recursiveAdd(floor($arg/10));\n    } else {\n        return $arg;\n    }\n  }\n  \n  echo recursiveAdd(123456789);\n?>\n",
  "perl": "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nsub sum_of_digits {\n    my $n = shift;\n    if ($n == 0) {\n        return 0;\n    }\n    else {\n        my $last_digit = $n % 10;\n        my $rest_of_number = int($n / 10);\n        return $last_digit + sum_of_digits($rest_of_number);\n    }\n}\n\nif (scalar @ARGV > 0) {\n   my $n = shift @ARGV;\n   my $sum = sum_of_digits($n);\n   print \"Input:   $n\\nOutput:  $sum\\n\";\n} else {\n   die \"ERROR: Missing input number\\n\";\n}\n",
  "python": "def sum_of_digit(n):\n    if n == 0:\n        return 0\n    return n % 10 + sum_of_digit(int(n / 10))\n\n\nnum = int(input())\nresult = sum_of_digit(num)\nprint(result)\n",
  "rust": "use std::io;\r\nuse std::io::Write;\r\n\r\nfn main() {    \r\n    let mut num = String::new();\r\n    let mut sum: i64 = 0;\r\n    \r\n    print!(\"Insert number: \");\r\n    io::stdout().flush().unwrap();\r\n    \r\n    io::stdin()\r\n        .read_line(&mut num)\r\n        .expect(\"Failed to read line\");\r\n    \r\n    let mut num: i64 = num\r\n        .trim()\r\n        .parse()\r\n        .expect(\"Please enter a valid number!\");\r\n    \r\n    while num > 0 {\r\n        sum += num%10;\r\n        num /= 10\r\n    }\r\n    println!(\"{sum}\");\r\n}\r\n\r\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "typescript",
    "scala",
    "go",
    "php",
    "perl",
    "python",
    "rust"
  ]
}