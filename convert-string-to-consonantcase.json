{
  "slug": "convert-string-to-consonantcase",
  "title": "Convert String To Consonantcase",
  "c": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid conVowUpp(char str[]) {\n    int N = strlen(str);\n    for (int i = 0; i < N; i++) {\n        if (str[i] == 'a' || str[i] == 'e' ||\n            str[i] == 'i' || str[i] == 'o' ||\n            str[i] == 'u') {\n            char c = tolower(str[i]);\n            str[i] = c;\n        } else {\n            char c = toupper(str[i]);\n            str[i] = c;\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        printf(\"%c\", str[i]);\n    }\n}\n\nint main() {\n    printf(\"Enter a string: \");\n    char str[100];\n    fgets(str, sizeof(str), stdin);\n\n    // Remove newline character if present\n    if (str[strlen(str) - 1] == '\\n') {\n        str[strlen(str) - 1] = '\\0';\n    }\n\n    conVowUpp(str);\n\n    return 0;\n}\n",
  "c-plus-plus": "#include<bits/stdc++.h>\n#define for(i,o,n,s) for(auto i{o}; i < n; i+=s)\n#define input_array(arr,n) for(int index=0; index < n ; index++) cin>>arr[index];\n#define int long long\n#define FAST ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);\nusing namespace std;\n    signed main(){\n     FAST\n        string s;\n        getline(cin,s);\n        for(i,0,s.length(),1){\n            switch((int)s[i]){\n                case 65:\n                case 69:\n                case 73:\n                case 79:\n                case 85: s[i]+=32;\n                break;\n            }\n            switch ((int)s[i])\n            {\n                case 98:\n                case 99:\n                case 100:\n                case 102:\n                case 103:\n                case 104:\n                case 106:\n                case 107:\n                case 108:\n                case 109:\n                case 110:\n                case 112:\n                case 113:\n                case 114:\n                case 115:\n                case 116:\n                case 118:\n                case 119:\n                case 120:\n                case 121:\n                case 122: s[i]-=32;\n                break;\n            }\n        }\n        cout<<s;\n        return 0;\n    }\n",
  "c-sharp": "using System;\nclass ConsonantCase{\n \nstatic void conVowUpp(char[] str)\n{\n\n  int N = str.Length;\n  for (int i = 0; i < N; i++)\n  {\n    if (str[i] == 'a' || str[i] == 'e' ||\n        str[i] == 'i' || str[i] == 'o' ||\n        str[i] == 'u')\n    {\n      char c = char.ToLowerInvariant(str[i]);\n      str[i] = c;\n    } else {\n      char c = char.ToUpperInvariant(str[i]);\n      str[i] = c;\n    }\n  }\n  foreach(char c in str)\n    Console.Write(c);\n}\n \npublic static void Main(String[] args)\n{\n  Console.Write(\"Enter a string : \");\n  String str = Console.ReadLine();\n  conVowUpp(str.ToCharArray());\n}\n}\n \n",
  "f-sharp": "let toConsonantCase (input: string) =\n    let isVowel (c: char) =\n        \"aeiouAEIOU\" |> Seq.contains c\n\n    let convertChar (c: char) =\n        if isVowel c then System.Char.ToLower c\n        else System.Char.ToUpper c\n\n    let convertString (s: string) =\n        s |> Seq.map convertChar |> System.String.Concat\n\n    convertString input\n\n// Example Usage\nlet inputString = \"hello world\"\nlet result = toConsonantCase inputString\nprintfn \"Input: %s\\nOutput: %s\" inputString result",
  "java": "public class ConvertStringToConsonantcase {\n    public static void main(String[] args) {\n        String str = \"Convert me to Consonant Case\";\n        String result = convertToConsonantCase(str);\n        System.out.println(result); // Output: cOnvErt mE tO cOnsOnAnt cAsE\n    }\n\n    public static boolean isVowel(char c) {\n        return \"AEIOUaeiou\".indexOf(c) != -1;\n    }\n\n    public static String convertToConsonantCase(String str) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            if (isVowel(c)) {\n                result.append(Character.toUpperCase(c));\n            } else {\n                result.append(Character.toLowerCase(c));\n            }\n        }\n        return result.toString();\n    }\n}\n",
  "javascript": "const consonantCase = (str) => {\n  return str\n    .toLowerCase()\n    .split(\"\")\n    .reduce(\n      (a, c) => a + (/[aeiou]/i.test(c) ? c.toLowerCase() : c.toUpperCase()),\n      \"\",\n    );\n};\n\nconsole.log(consonantCase(\"hello world\"));\n",
  "kotlin": "fun consonantCase() {\n    val sentence = \"Hello, world!\"\n    var upperCaseConsonants = \"\"\n\n    for(i in 0..sentence.length-1){\n        if(sentence[i] == 'a' || sentence[i] == 'e' || sentence[i] == 'i' || sentence[i] == 'o' || sentence[i] == 'u'){\n            upperCaseConsonants += sentence[i]\n            continue\n        }else{\n            upperCaseConsonants += sentence[i].toUpperCase()\n        }\n    }\n    println( \"Normal: \"+ \"$sentence\" + \"\\n\" + \"Converted:\" +\"$upperCaseConsonants\")\n}\n\nconsonantCase()",
  "ruby": "def convertStringToConsonantCase string\n    vowels = ['a','e','i','o','u']\n\n    newstr = []\n    string.split(\"\").each do |letter|\n        vowels.include?(letter) ? newstr << letter.downcase : newstr << letter.upcase\n    end\n\n    puts newstr.join(\"\")\nend\n\nconvertStringToConsonantCase \"hello world\"",
  "swift": "import Swift\nimport Foundation\n\nlet initialString = \"helloworld\"\nlet vowelString = \"aeiouAEIOU\"\nvar result = \"\"\n\nfor char in initialString {\n  if vowelString.contains(char) {\n    result += char.lowercased()\n  } else {\n    result += char.uppercased()\n  }\n}\n\nprint(result)\n",
  "typescript": "const convertToConsonantcase = (input: string) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  return input\n    .toLowerCase()\n    .split(\"\")\n    .map((letter: string) =>\n      vowels.includes(letter) ? letter : letter.toUpperCase(),\n    )\n    .join(\"\");\n};\n\nconsole.log(convertToConsonantcase(\"hello world\"));\n",
  "description": "\n## Write a program to convert string to consonantcase\n\nConsonantcase is a style of writing in which all consonants are converted to uppercase and all vowels are converted to lowercase.\n\n```txt\nInput  : \"hello world\"\nOutput : \"HeLlo WoRLD\"\n```\n\n---\n",
  "trackId": 5142,
  "lastUpdated": "2024-04-19T14:06:04Z",
  "contributors": [
    "charan-hash",
    "harshraj8843",
    "suvashish26",
    "swapnilmukherjee",
    "adesh1998",
    "anejman",
    "bhushanmarathe",
    "brianlu2610",
    "vedantpople4",
    "RiteshK-611",
    "Noriomusha",
    "Joel-Maldonado",
    "pokharel-nishan",
    "NoyHanan",
    "lukaszmielczarekdev",
    "anandfresh",
    "james-tharit",
    "sahdev77",
    "mrsaxman29",
    "jfinley6",
    "shekaushik"
  ],
  "julia": "println(\"Enter a string: \")\nsub = split(lowercase(readline()), \"\")\nvowels = SubString{String}[\"a\",\"e\",\"i\",\"o\",\"u\"]\ns = \"\"\n\nfor i in sub\n  if !(i in vowels)\n    global s = s * uppercase(i)\n  else\n    global s = s * i\n  end\nend\n\nprintln(\"Given string in consonantcase: \", s)",
  "scala": "object ConsonantCaseConverter {\n  def isVowel(c: Char): Boolean = {\n    \"AEIOUaeiou\".contains(c)\n  }\n\n  def consonantCase(input: String): String = {\n    input.map {\n      case c if !c.isLetter => c\n      case c if isVowel(c) => c.toLower\n      case c => c.toUpper\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(\"Enter a string: \")\n    val inputString = scala.io.StdIn.readLine()\n    val convertedString = consonantCase(inputString)\n    println(\"Consonant Case String: \" + convertedString)\n  }\n}\n",
  "dart": "String _consonantCase(String str) => str.replaceAllMapped(\n    RegExp(r'[^aeiou]'), (match) => match.group(0).toString().toUpperCase());\n\nvoid main() {\n  print(_consonantCase('hello world'));\n}\n",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc consonantCase(str string) string {\n\tvar result string\n\tfor _, char := range str {\n\t\tif strings.ContainsAny(string(char), \"aeiouAEIOU\") {\n\t\t\tresult += strings.ToLower(string(char))\n\t\t} else {\n\t\t\tresult += strings.ToUpper(string(char))\n\t\t}\n\t}\n\treturn result\n}\n\nfunc main() {\n\tinput := \"Hello, World\"\n\toutput := consonantCase(input)\n\tfmt.Println(output)\n}\n",
  "haskell": "import Data.Char (toLower, toUpper)\n\nconsonantCase :: String -> String\nconsonantCase [] = []\nconsonantCase (x:xs)\n    | elem x \"aeiouAEIOU\" = toLower x : consonantCase xs\n    | otherwise = toUpper x : consonantCase xs\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter a string:\"\n    input <- getLine\n    putStrLn $ \"Consonant-case: \" ++ consonantCase input\n",
  "php": "<?php\n\nfunction consonantCase($str) {\n  $split =  str_split(strtolower($str));\n  foreach ($split as $char) {\n   if(preg_match('/^[^aeiou]*$/i', $char) === 0) {\n     echo strtolower($char);\n   } else {\n     echo strtoupper($char);\n   }\n}\n\n}\n\n\nconsonantCase(\"hello world\")\n\n?>\n",
  "perl": "sub consonantcase {\n    my ($input) = @_;\n    my %vowels = ('a' => 1, 'e' => 1, 'i' => 1, 'o' => 1, 'u' => 1);\n    my @chars = split('', $input);\n    for my $char (@chars) {\n        if (exists $vowels{lc($char)}) {\n            print lc($char);\n        } else {\n            print uc($char);\n        }\n    }\n    print \"\\n\";\n}\n\n# Test with input \"hello world\"\nconsonantcase(\"hello world\");\n",
  "python": "# Python program to convert a string to consonantcase\ndef consonantCase(a: str):\n    new_str = \"\"\n    for i in a:\n        new_str += i.lower() if i in [\"a\", \"e\", \"i\", \"o\", \"u\"] else i.upper()\n    return new_str\n\n\nx = input(\"Enter a string : \")\nprint(\"Consonant Case of\", x, \" is \", consonantCase(x))\n",
  "r": "consonantCase <- function(a) {\n  vowels <- c(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n  new_str <- \"\"\n  for (i in seq_len(nchar(a))) {\n    letter <- substr(a, i, i)\n    new_str <- paste0(new_str, ifelse(letter %in% vowels, tolower(letter), toupper(letter)))\n  }\n  return(new_str)\n}\nx <- \"hello world\"\nresult <- consonantCase(x)\ncat(\"Consonant Case of '\", x, \"' is '\", result, \"'\\n\")\n",
  "rust": "use std::io;\n\nfn main() {\n    println!(\"Enter a string:\");\n    let mut input = String::new();\n\n    // Reading input from user and handling possible errors\n    if let Err(e) = io::stdin().read_line(&mut input) {\n        eprintln!(\"Failed to read line: {}\", e);\n        return;\n    }\n\n    // Processing the input string\n    match to_consonantcase(&input.trim()) {\n        Ok(consonantcase_string) => println!(\"Consonantcase: {}\", consonantcase_string),\n        Err(e) => eprintln!(\"Error processing string: {}\", e),\n    }\n}\n\nfn to_consonantcase(s: &str) -> Result<String, &'static str> {\n    // Check for empty string\n    if s.is_empty() {\n        return Err(\"Input string is empty\");\n    }\n\n    let transformed = s.chars().map(|c| {\n        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' |\n            'A' | 'E' | 'I' | 'O' | 'U' => c.to_lowercase().to_string(),\n            _ => c.to_uppercase().to_string(),\n        }\n    }).collect();\n\n    Ok(transformed)\n}",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}