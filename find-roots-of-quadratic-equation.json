{
  "slug": "find-roots-of-quadratic-equation",
  "title": "Find Roots Of Quadratic Equation",
  "c": "#include <math.h>\n#include <stdio.h>\nint main() {\n    double a, b, c, discriminant, root1, root2, realPart, imagPart;\n    printf(\"Enter coefficients a, b and c: \");\n    scanf(\"%lf %lf %lf\", &a, &b, &c);\n\n    discriminant = b * b - 4 * a * c;\n\n    if (discriminant > 0) {\n        root1 = (-b + sqrt(discriminant)) / (2 * a);\n        root2 = (-b - sqrt(discriminant)) / (2 * a);\n        printf(\"root1 = %.2lf and root2 = %.2lf\", root1, root2);\n    }\n\n    else if (discriminant == 0) {\n        root1 = root2 = -b / (2 * a);\n        printf(\"root1 = root2 = %.2lf;\", root1);\n    }\n\n    else {\n        realPart = -b / (2 * a);\n        imagPart = sqrt(-discriminant) / (2 * a);\n        printf(\"root1 = %.2lf+%.2lfi and root2 = %.2f-%.2fi\", realPart, imagPart, realPart, imagPart);\n    }\n\n    return 0;\n} \n",
  "c-plus-plus": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main() {\n\n    float a, b, c, x1, x2, discriminant, realPart, imaginaryPart;\n    cout << \"Enter coefficients a, b and c: \";\n    cin >> a >> b >> c;\n    discriminant = b*b - 4*a*c;\n    \n    if (discriminant > 0) {\n        x1 = (-b + sqrt(discriminant)) / (2*a);\n        x2 = (-b - sqrt(discriminant)) / (2*a);\n        cout << \"Roots are real and different.\" << endl;\n        cout << \"x1 = \" << x1 << endl;\n        cout << \"x2 = \" << x2 << endl;\n    }\n    \n    else if (discriminant == 0) {\n        cout << \"Roots are real and same.\" << endl;\n        x1 = -b/(2*a);\n        cout << \"x1 = x2 =\" << x1 << endl;\n    }\n\n    else {\n        realPart = -b/(2*a);\n        imaginaryPart = sqrt(-discriminant)/(2*a);\n        cout << \"Roots are complex and different.\"  << endl;\n        cout << \"x1 = \" << realPart << \"+\" << imaginaryPart << \"i\" << endl;\n        cout << \"x2 = \" << realPart << \"-\" << imaginaryPart << \"i\" << endl;\n    }\n\n    return 0;\n}\n",
  "c-sharp": "using System;\r\npublic class FindRootsOfQuadraticEquation\r\n{\r\n    static (double, double) quadraticEquation(int a, int b, int c)\r\n    {\r\n        double result1;\r\n        double result2;\r\n        double root = Math.Sqrt((b * b) - (4 * a * c));\r\n        result1 = (-b + root) / 2 * a;\r\n        result2 = (-b - root) / 2 * a;\r\n        return (result1, result2);\r\n    }\r\n    public static void Main(string[] args)\r\n    {\r\n        int a = 1; int b = 2; int c = 1;\r\n        Console.WriteLine(\"Input  :  {0} {1} {2}\", a, b, c);\r\n        Console.WriteLine(\"Output : {0}\", quadraticEquation(a, b, c));\r\n    }\r\n}",
  "f-sharp": "// F# program to find roots of quadratic equation using the quadratic formula.\n\nlet findRoots (a:float, b:float, c:float) =\n    let disc = b * b - 4.0 * a * c // Calculate the discriminant\n    if disc < 0.0 then\n        None // No real roots\n    else\n        let sqrtDisc = sqrt disc // Calculate the square root of the discriminant\n        let root1 = (-b + sqrtDisc) / (2.0 * a) // Calculate the first root\n        let root2 = (-b - sqrtDisc) / (2.0 * a) // Calculate the second root\n        Some (root1, root2) // Return the roots as Some tuple\n\nlet a = 1\nlet b = 2\nlet c = 1\n\n// Call the findRoots function with the coefficients and pattern match the result\nmatch findRoots (a, b, c) with\n| None -> printfn \"No real roots\" // If there are no real roots, print the message\n| Some (root1, root2) -> printfn \"%.0f %.0f\" root1 root2 // Print the roots as integers\n",
  "java": "import java.util.Scanner;\nclass FindRootsOfQuadraticEquation\n{\n    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n\n        double a=in.nextDouble();\n        double b=in.nextDouble();\n        double c=in.nextDouble();\n\n        double param=(b*b)-(4*a*c);\n        double root1=( -b+Math.sqrt(param) )/(2*a);\n        double root2=(  b+Math.sqrt(param) )/(2*a);\n\n        System.out.println(root1 +\" \"+root2);\n        \n    }\n}",
  "javascript": "function findQuadEquationRoots(a, b, c) {\n  if (!a) throw new Error(\"Not a quadratic equation!\");\n\n  const descriminant = b ** 2 - 4 * a * c;\n  const solutionPart1 = (-b / 2) * a;\n\n  if (!descriminant) return solutionPart1;\n  if (descriminant < 0) throw new Error(\"No Solution!\");\n\n  const solutionPart2 = (descriminant ** 0.5 / 2) * a;\n\n  const solutions = [\n    solutionPart1 + solutionPart2,\n    solutionPart1 - solutionPart2,\n  ];\n\n  return solutions;\n}\n\nconst solutions = findQuadEquationRoots(1, -5, 6);\nconsole.log(solutions);\n",
  "kotlin": "fun main(args: Array<String>) {\n\n    val a = 2.3\n    val b = 4\n    val c = 5.6\n    val root1: Double\n    val root2: Double\n    val output: String\n\n    val determinant = b * b - 4.0 * a * c\n\n    // condition for real and different roots\n    if (determinant > 0) {\n        root1 = (-b + Math.sqrt(determinant)) / (2 * a)\n        root2 = (-b - Math.sqrt(determinant)) / (2 * a)\n\n        output = \"root1 = %.2f and root2 = %.2f\".format(root1, root2)\n    }\n    // Condition for real and equal roots\n    else if (determinant == 0.0) {\n        root2 = -b / (2 * a)\n        root1 = root2\n\n        output = \"root1 = root2 = %.2f;\".format(root1)\n    }\n    // If roots are not real\n    else {\n        val realPart = -b / (2 * a)\n        val imaginaryPart = Math.sqrt(-determinant) / (2 * a)\n\n        output = \"root1 = %.2f+%.2fi and root2 = %.2f-%.2fi\".format(realPart, imaginaryPart, realPart, imaginaryPart)\n    }\n\n    println(output)\n}\n",
  "ruby": "puts \"Enter the coefficients of the quadratic equation (ax^2 + bx + c = 0):\"\nputs \"Enter a:\"\na = gets.chomp.to_i\nputs \"Enter b:\"\nb = gets.chomp.to_i\nputs \"Enter c:\"\nc = gets.chomp.to_i\n\ndiscriminant = b**2 - 4*a*c     #calculate the discriminant\n\nif discriminant < 0\n  real_part = -b / (2*a)\n  imag_part = Math.sqrt(-discriminant) / (2*a)\n  puts \"The roots are complex numbers: #{real_part} + #{imag_part}i and #{real_part} - #{imag_part}i\"\nelsif discriminant == 0\n  root = -b / (2*a)\n  puts \"The root is #{root}.\"\nelse\n  root1 = (-b + Math.sqrt(discriminant)) / (2*a)\n  root2 = (-b - Math.sqrt(discriminant)) / (2*a)\n  puts \"The roots are real numbers: #{root1} and #{root2}.\"\nend\n",
  "swift": "import Foundation\r\n\r\nfunc findRoots(a: Double, b: Double, c: Double) -> (Double, Double) {\r\n    let delta = b * b - 4 * a * c\r\n    let sqrtDelta = sqrt(abs(delta))\r\n    let root1 = (-b + sqrtDelta) / (2 * a)\r\n    let root2 = (-b - sqrtDelta) / (2 * a)\r\n    return (root1, root2)\r\n}\r\n\r\nlet input = \"1 2 1\"\r\nlet coefficients = input.components(separatedBy: \" \").compactMap(Double.init)\r\nlet (root1, root2) = findRoots(a: coefficients[0], b: coefficients[1], c: coefficients[2])\r\nprint(\"\\(root1) \\(root2)\")\r\n",
  "typescript": "function findQuadEquationRoots(a: number, b: number, c: number) {\n  if (!a) throw new Error(\"Not a quadratic equation!\");\n\n  const descriminant = b ** 2 - 4 * a * c;\n  const solutionPart1 = (-b / 2) * a;\n\n  if (!descriminant) return solutionPart1;\n  if (descriminant < 0) throw new Error(\"No Solution!\");\n\n  const solutionPart2 = (descriminant ** 0.5 / 2) * a;\n\n  const solutions = [\n    solutionPart1 + solutionPart2,\n    solutionPart1 - solutionPart2,\n  ];\n\n  return solutions;\n}\n\nconst solutions = findQuadEquationRoots(1, -5, 6);\nconsole.log(solutions);\n",
  "description": "\n## Write a program to find roots of quadratic equation\n\nUse the quadratic formula to find the roots of the quadratic equation\n\nx = $\\(-b &plusmn \\sqrt\\(b^2 - 4ac\\)\\)/2a$\n\nThe input will be the coefficients of $x^2$, $x$, and the constant $c$.\n\n```\nInput  : 1 2 1\nOutput : -1 -1\n```\n\n---\n",
  "trackId": 7471,
  "lastUpdated": "2024-06-16T16:59:29Z",
  "contributors": [
    "harshraj8843",
    "0ME9A",
    "akkshayTandon",
    "PavanKumarCB",
    "isyuricunha",
    "Aditya062003",
    "dhavall13",
    "mahinsa2345",
    "abhisek-1221",
    "Roybas2001",
    "champati-v",
    "pranay136",
    "GREEDnim",
    "roberanegussie",
    "Ariel201711"
  ],
  "julia": "function find_roots(a,b,c)              #Define a function to find roots of quadratic equation\n    det = b^2 - 4*a*c                   #Calculate discriminant\n\n    if det >= 0                         #real roots\n        root1 = (-b + sqrt(det))/(2*a)\n        root2 = (-b - sqrt(det))/(2*a)\n        println(\"Real roots: $root1, $root2\")\n    \n    else                                #imaginary roots\n        real_part = -b/(2*a)\n        imag_part = sqrt(-det)/(2*a)\n        println(\"Complex roots: $real_part+$imag_part i, $real_part - $imag_part i\")\n    end\nend\n\n#Take user input:\nprintln(\"Format of quadratic equation: b^2-4*a*c\")\n\nprintln(\"Enter the value of a: \")\na_f = readline()\na = parse(Float64, a_f)\n\nprintln(\"Enter the value of b: \")\nb_f = readline()\nb = parse(Float64, b_f)\n\nprintln(\"Enter the value of c: \")\nc_f = readline()\nc = parse(Float64, c_f)\n\nfind_roots(a,b,c)\n\n",
  "scala": "import scala.math.sqrt\nobject Main {\n  def main(args: Array[String]) {\n    val a = 2\n    val b = 5\n    val c = 3\n    val root1 = (-b + sqrt(b*b - 4*a*c))/(2*a)\n    val root2 = (-b - sqrt(b*b - 4*a*c))/(2*a)\n    println(\"Roots of the quadratic equation are: \" + root1 + \" and \" + root2)\n  }\n}\n",
  "dart": "import 'dart:io';\nimport 'dart:math';\n\nvoid main() {\n  // take input for the coefficients of x^2, x, and constant c\n  print('Enter the coefficients of x^2, x, and constant c separated by spaces:');\n  List<String> input = stdin.readLineSync()!.split(' ');\n\n  // parse the input to doubles\n  double coefficientOfXSquare = double.parse(input[0]);\n  double coefficientOfX = double.parse(input[1]);\n  double constantTerm = double.parse(input[2]);\n\n  // calculate the discriminant\n  double discriminant = pow(coefficientOfX, 2) - 4 * coefficientOfXSquare * constantTerm;\n\n  // check if the discriminant is positive, negative, or zero\n  if (discriminant > 0) {\n    // two real and distinct roots\n    double root1 = (-coefficientOfX + sqrt(discriminant)) / (2 * coefficientOfXSquare);\n    double root2 = (-coefficientOfX - sqrt(discriminant)) / (2 * coefficientOfXSquare);\n    print('The roots are: $root1 and $root2');\n  } else if (discriminant == 0) {\n    // one real and repeated root\n    double root = -coefficientOfX / (2 * coefficientOfXSquare);\n    print('The roots are: $root and $root');\n  } else {\n    // two complex roots\n    double realPart = -coefficientOfX / (2 * coefficientOfXSquare);\n    double imaginaryPart = sqrt(-discriminant) / (2 * coefficientOfXSquare);\n    print('The roots are: $realPart + ${imaginaryPart}i and $realPart - ${imaginaryPart}i');\n  }\n}\n",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc findRoots(a, b, c float64) (float64, float64, error) {\n\tdiscriminant := b*b - 4*a*c\n\tif discriminant < 0 {\n\t\treturn 0, 0, fmt.Errorf(\"Equation has no real roots\")\n\t}\n\troot1 := (-b + math.Sqrt(discriminant)) / (2 * a)\n\troot2 := (-b - math.Sqrt(discriminant)) / (2 * a)\n\treturn root1, root2, nil\n}\n\nfunc main() {\n\ta := 1.0\n\tb := 2.0\n\tc := 1.0\n\troot1, root2, err := findRoots(a, b, c)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Printf(\"The roots are %.2f and %.2f\", root1, root2)\n\t}\n}\n",
  "haskell": "-- Haskell program to find roots of quadratic equation using the quadratic formula.\n\nquadraticRoots :: Integral a => a -> a -> a -> (a, a)\nquadraticRoots a b c\n    | d >= 0    = (div (e + isqrt d) (2 * a), div (e - isqrt d) (2 * a)) -- Real roots\n    | otherwise = (-1, -1)                                             -- Complex roots\n    where\n        d = b * b - 4 * a * c\n        e = -b\n        isqrt = floor . sqrt . fromIntegral\n\nmain :: IO ()\nmain = do\n    let (root1, root2) = quadraticRoots 1 2 1\n    putStrLn $ \"Roots: \" ++ show [root1, root2]\n",
  "php": "<?php\n// Give the input values for the formula\n$inputA = 5;\n$inputB = 10;\n$inputC = 2;\n\n// $sumD is the part of the equation that is inside of the square root\n$sumD = pow($inputB, 2) - 4 * $inputA * $inputC;\n\n// The rest of the equation. Everything is put in () so it is calculated in the right order.\n$outputPositive = (-$inputB + pow($sumD, 0.5)) / (2 * $inputA);\n$outputNegative = (-$inputB - pow($sumD, 0.5)) / (2 * $inputA);\n\necho \"x = $outputPositive &nbsp; or &nbsp; x = $outputNegative\";\n",
  "perl": "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\n# Default coefficients\nmy $a = 1;\nmy $b = 3;\nmy $c = 1;\n\nmy $discriminant = ($b**2) - (4 * $a * $c);\n\nif ($discriminant >= 0) {\n    my $root1 = (-$b + sqrt($discriminant)) / (2 * $a);\n    my $root2 = (-$b - sqrt($discriminant)) / (2 * $a);\n    if ($discriminant > 0) {\n        print \"$root1, $root2\";\n    } else {\n        print \"$root1, $root2\";\n    }\n} else {\n    print \"No real roots exist\\n\";\n}\n",
  "python": "# Importing Complex math module\nimport cmath\n\nprint(\"Enter the quadratic equation in the format: ax^2+bx+c\")\n\na = int(input(\"Enter a\"))\nb = int(input(\"Enter b\"))\nc = int(input(\"Enter c\"))\n\n# Evaluating the discriminant using formula: d= b^2-4ac\nd = (b**2) - (4 * a * c)\n\n# Finding the roots of equation using formula: (-b-(d)^1/2)/4a and (-b+(d)^1/2)/4a\nroot1 = (-b - cmath.sqrt(d)) / (2 * a)\nroot2 = (-b + cmath.sqrt(d)) / (2 * a)\n\nprint(\"The roots of quadratic equations are: \", root1, root2)\n",
  "r": "# Function to find roots of a quadratic equation\nfindRoots <- function(a, b, c) {\n  discriminant <- b^2 - 4 * a * c\n  \n  if (discriminant < 0) {\n    return(NULL)  # No real roots\n  } else {\n    sqrtDiscriminant <- sqrt(discriminant)\n    root1 <- (-b + sqrtDiscriminant) / (2 * a)\n    root2 <- (-b - sqrtDiscriminant) / (2 * a)\n    return(c(root1, root2))  # Return the roots as a vector\n  }\n}\n\n# Example usage\na <- 1\nb <- 2\nc <- 1\n\nroots <- findRoots(a, b, c)\n\nif (is.null(roots)) {\n  cat(\"No real roots\\n\")\n} else {\n  cat(\"Roots:\", roots[1], roots[2], \"\\n\")\n}\n",
  "rust": "// Rust program to get the roots of a quadratic equation\n\nfn roots(a:f32, b:f32, c:f32) {\n    \n    let disc:f32 = b * b - 4.0 * a * c;\n    let root_a:f32 = (-b + disc.sqrt()) / (2.0 * a);\n    let root_b:f32 = (-b - disc.sqrt()) / (2.0 * a);\n\n    println!(\"Root1 = {}  \", root_a);\n    println!(\"Root2 = {}  \", root_b);\n}\n\nfn main() {\n    roots(1.0,-5.0,6.0);\n}",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}