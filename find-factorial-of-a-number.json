{
  "slug": "find-factorial-of-a-number",
  "title": "Find Factorial Of A Number",
  "c": "#include<stdio.h>\n\nint main(){\n    int number;\n    scanf(\"%d\",&number);\n    int factorial=1;\n    for(int i=number;i>=1;i--){\n        factorial=factorial*i;\n    }\n    printf(\"Factorial of the given number is: %d\",factorial);\n    return 0;\n}",
  "c-plus-plus": "// Programme to find the factorial of N\n\n#include <bits/stdc++.h>\n#define ll long long // for typing ease.\nusing namespace std;\n\nint main(){\n    cout<<\"Enter the number N:\";\n    ll n;   cin>>n;\n    ll product=1;\n\n    // Calculating factorial.\n    for(int i=n;i>0;i--){\n        product = product * i;\n    }\n\n    // displaying output;\n    cout<<\"The factorial of \"<<n<<\" is \"<<product<<endl;\n\n    return 0;\n}\n\n/*\nAuthor : Kartikeya Saini\n*/",
  "c-sharp": "using System;  \n  public class Factorial \n   {  \n     public static void Main(string[] args)  \n      {  \n       int i,fact=1,number;      \n       Console.Write(\"Enter any Number: \");      \n       number= int.Parse(Console.ReadLine());     \n       for(i=1;i<=number;i++){      \n        fact=fact*i;      \n       }      \n       Console.Write(\"Factorial of \" +number+\" is: \"+fact);    \n     }  \n  }  \n",
  "f-sharp": "let rec factorial (fac : int) : int  = \n    if  fac = 0 then 1 \n    else fac * factorial (fac-1)\nlet num = factorial 5\nprintfn \"Factorial of given number : %A\" num\n",
  "java": "import java.util.*;\n\npublic class FindFactorialOfANumber {\n    public static int Factorial(int n) {\n        int fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        sc.close();\n        System.out.println(Factorial(n));\n    }\n}\n\n// Contributed by Raghav Garg (@grraghav120)\n",
  "kotlin": "import java.util.Scanner\n\nfun main() {\n    print(\"Enter String : \")\n    println()\n    var min = readLine()\n\n    println(\"Factorial of $min = \" + factorialOfNumber(min!!.toInt()))\n\n}\n\nprivate fun factorialOfNumber(num: Int): Long {\n    var factorial: Long = 1\n    for (i in 1..num) {\n        // factorial = factorial * i;\n        factorial *= i.toLong()\n    }\n\n    return factorial\n}\n",
  "ruby": "puts \"Please enter a number: \"\ninput_number = gets.to_i\n\ndef findFactorialOfANumber number\n    factorial = 1\n\n    (2..number).each do |x|\n        factorial *= x\n    end\n\n    \"The factorial of #{number} is #{factorial}\"\nend\n\nputs findFactorialOfANumber input_number",
  "swift": "import Foundation\nimport Glibc\n\nprint(\"Enter number: \")\nvar number = Int(readLine()!)!\n\nprint(\"Factorial: \", factorial(fNumber: number))\n\nfunc factorial(fNumber: Int) -> Int{\n   var output = 1\n\n   if (fNumber > 1) {\n      for j in 1...fNumber{\n         output *= j\n      }\n   }\n   return output\n}\n",
  "typescript": "const findFactorial = (n: number) => {\n  let result = 1;\n\n  if (n == 0 || n == 1) {\n    return result;\n  } else if (n > 1) {\n    for (let i = n; i >= 1; i--) {\n      result = result * i;\n    }\n    return result;\n  } else {\n    return \"please enter a positive number.\";\n  }\n};\n\nconsole.log(findFactorial(5));\n",
  "description": "\n## Write a program to find factorial of a number\n\nFactorial of N = N _(N-1)_ (N-2) _..._ 1\n\n```txt\nInput  : 5\nOutput : 120\n```\n\n---\n",
  "trackId": 3193,
  "lastUpdated": "2024-06-16T16:59:29Z",
  "contributors": [
    "harshraj8843",
    "Varshitha-vankadaru",
    "anandfresh",
    "esivakumar26",
    "lukaszmielczarekdev",
    "hi-Kartik2004",
    "jfinley6",
    "rksp25",
    "joao-vitor-souza",
    "grraghav120",
    "harsh0c",
    "devkansara"
  ],
  "julia": "print(\"Enter a number : \") \nnum = readline()\nprintln(\"Factorial of the given number : \",factorial(parse(Int64,num)))\n",
  "scala": "object HelloWorld {\n\tdef main(args: Array[String]): Unit = {\n\t  var i = scala.io.StdIn.readInt();\n\n    var factorialN = 1;\n    while(i > 0) {  \n     factorialN = factorialN * i;\n     i = i - 1;\n    }\n    \n    println(factorialN);\n  }\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\n\tvar factorialnum, fact int\n\tfact = 1\n\n\tfmt.Print(\"Enter any Number to find its Factorial = \")\n\tfmt.Scanln(&factorialnum)\n\n\tfor i := 1; i <= factorialnum; i++ {\n\t\tfact = fact * i\n\t}\n\tfmt.Println(factorialnum, \"Factorial is \", fact)\n}\n",
  "haskell": "fact n = product [1..n] \nmain = print (fact 5)\n",
  "php": "<?php\n\nfunction factorial($n) {  \n$factorial = 1;  \nfor ($x=$n; $x>=1; $x--)   \n{  \n  $factorial = $factorial * $x;  \n}  \nreturn \"Factorial of $n is $factorial\";  \n}\n\necho factorial(5);\n\n?>\n",
  "perl": "print \"Enter a number: \";\n$n=<STDIN>;\n$t=$n;\n$f=1;\nfor($i=0;$i<$t;$i++)\n{\n$f=$f*$n;\n$n=$n-1;\n}\nprint \"Factorial of given number :  $f\\n\";\n",
  "python": "def factorial_dp(n):\n    # Initialize a list to store factorial results\n    factorial = [1] * (n + 1)\n\n    # Base case\n    if n >= 0:\n        factorial[0] = 1\n\n    # Bottom-up DP approach\n    for i in range(2, n + 1):\n        factorial[i] = factorial[i - 1] * i\n\n    return factorial[n]\n\n\n# Example usage\nn = int(input(\"Enter a non-negative integer to calculate factorial: \"))\nresult = factorial_dp(n)\nprint(f\"The factorial of {n} is {result}\")\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "go",
    "haskell",
    "php",
    "perl",
    "python"
  ]
}