{
  "slug": "check-palindrome-number",
  "title": "Check Palindrome Number",
  "c": "#include <stdio.h>\n#include <stdbool.h>\n\nbool isPalindrome(int x)\n{\n    static int rev = 0;\n    static int num;\n    num = x;\n    if (x == 0)\n    {\n        return (num == rev);\n    }\n    rev = rev * 10 + x % 10;\n    return isPalindrome(x / 10);\n}\nint main()\n{\n    int n;\n    printf(\"Enter a number :\");\n    scanf(\"%d\", &n);\n    if (isPalindrome(n))\n        printf(\"Palindrome Number\");\n    else\n        printf(\"Not a Palindrome Number\");\n    return 0;\n}",
  "c-plus-plus": "\r\n\r\n#include <iostream>\r\n\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n    int n,rev=0;cin>>n;\r\n    for(int i=n;i>0;i=i/10){\r\n        int mod=i%10;\r\n        rev=rev*10+mod;\r\n    }\r\n    // cout<<rev;\r\n    if(rev==n)cout<<\"Palindrome Number\"<<'\\n';\r\n    else cout<<\"Not Palindrome Number\"<<'\\n';\r\n}\r\n\r\n//Contributed by Raghav Garg",
  "c-sharp": "using System;  \n  public class checkpalindrome\n   {  \n     public static void Main(string[] args)  \n      {  \n          int n,r,sum=0,temp;    \n          Console.Write(\"Enter the Number: \");   \n          n = int.Parse(Console.ReadLine());  \n          temp=n;      \n          while(n>0)      \n          {      \n           r=n%10;      \n           sum=(sum*10)+r;      \n           n=n/10;      \n          }      \n          if(temp==sum)      \n           Console.Write(\"Number is Palindrome.\");      \n          else      \n           Console.Write(\"Number is not Palindrome\");     \n    }  \n  }  ",
  "java": "public class CheckPalindromeNumber {\n\n    public static void main(String[] args) {\n\n        int number = 12221;                               //number to check\n        if (ispalindrome(number)) {                       //function returns true if palindrome else false        \n            System.out.println(\"Palindrome number\");\n        } else {\n            System.out.println(\"Not a palindrome number\");\n        }\n    }\n\n    public static boolean ispalindrome(int num) {           //palindrome function definition\n\n        int temp = num;\n        int r, sum = 0;\n        while (num > 0) {\n            r = num % 10;\n            sum = (sum * 10) + r;\n            num = num / 10;\n        }\n        if (temp == sum) {\n            return true;\n        } \n        return false;        \n    }\n}\n",
  "javascript": "function checkPalindromeNumber(num) {\n  let remainder,\n    temp,\n    reversedNumber = 0;\n  temp = num;\n  while (num > 0) {\n    remainder = num % 10;\n    num = Math.floor(num / 10);\n    reversedNumber = reversedNumber * 10 + remainder;\n  }\n  return reversedNumber === temp;\n}\nconsole.log(checkPalindromeNumber(190));\n",
  "kotlin": "fun main() {\n    print(\"Enter No. to Check Palindrome: \")\n    val num = readln()\n    println()\n    if (checkPalindrome(num)) println(\"$num is Palindrome\")\n    else println(\"$num is not Palindrome\")\n}\n\nprivate fun checkPalindrome(num: String): Boolean {\n    var start = 0\n    var end = num.lastIndex\n    while (start <= end) {\n        if (num[start] != num[end]) return false\n        start++\n        end--\n    }\n    return true\n}",
  "ruby": "puts \"Enter the number\"\nnum=gets.chomp.to_i\n\ntemp=num\nsum = 0\n\nwhile num!=0  #implementation of while loop\n    rem=num%10\n    num=num/10\n    sum=sum*10+rem\nend\n\nif(temp==sum)\n    puts \"The #{temp} is a palindrome\"\nelse\n    puts \"The #{temp} is not a palindrome\"\nend",
  "swift": "var reversen = 0\nvar rem = 0\nvar n = 121\nvar no = n\nno=n\n\nwhile n != 0 {\n    rem = n%10\n    reversen = reversen * 10 + rem\n    n /= 10\n}\nif(no == reversen)\n{\n    print(\"\\(no)\" + \" is palindrome\")\n}\nelse\n{\n    print(\"\\(no)\" + \" is  not palindrome\")\n   \n}",
  "typescript": "function checkPalindromeNumber(num: number) {\n  let remainder: number,\n    temp: number,\n    reversedNumber: number = 0;\n\n  temp = num;\n\n  while (num > 0) {\n    remainder = num % 10;\n    num = Math.floor(num / 10);\n    reversedNumber = reversedNumber * 10 + remainder;\n  }\n\n  return reversedNumber === temp;\n}\n\nconsole.log(checkPalindromeNumber(190));\n",
  "description": "\n## Write a program to check palindrome number\n\nPalindrome numbers are the numbers for which reverse is exactly same as the original number. For example, 121 is palindrome, but 123 is not palindrome.\n\n```txt\nInput  : 121\nOutput : Palindrome Number\n```\n\n---\n",
  "trackId": 1981,
  "lastUpdated": "2023-12-11T04:11:26Z",
  "contributors": [
    "anandfresh",
    "harshraj8843",
    "PavanKumarCB",
    "sancoLgates",
    "esivakumar26",
    "joao-vitor-souza",
    "gupta-soham",
    "ArinCodes",
    "KartikeyDubeyKD",
    "auleki",
    "rahmat-dev",
    "ynbh",
    "vedha-vikash-pixel",
    "gpt-anurag",
    "UsmanFani",
    "KaptainCS3",
    "grraghav120"
  ],
  "julia": "function is_palindrome(x::Int)::Bool\n    if x < 0\n        false\n    else\n        y = x\n        y_reverse = 0\n        while y > 0\n            y, n = divrem(y, 10)\n            y_reverse = y_reverse * 10 + n\n        end\n        x == y_reverse\n    end\nend\nvalue = 121\nif(is_palindrome(value))\n println(\"Palindrome Number\")\nelse\n println(\"Not a Palindrome Number\")\nend\n",
  "scala": "object HelloWorld {\n\tdef main(args: Array[String]): Unit = {\n\t  val word = scala.io.StdIn.readLine();\n\t  val reverseWord = reverse(word);\n\t  if(reverseWord == word) {\n\t    println(\"Palindrome\")\n\t  } else {\n\t    println(\"Not a Palindrome\")\n\t  }\n\t}\n\n\tdef reverse(s: String): String = {\n   if (s.isEmpty) \"\"\n   else reverse(s.tail) + s.head\n }\n}\n",
  "dart": "void main() {\n  print(isNumberPalindrome(223));\n}\n\nbool isNumberPalindrome(int num) {\n  String originalNumber = num.toString();\n  String reversed = originalNumber.split('').reversed.join('');\n  if (originalNumber == reversed)\n    return true;\n  else\n    return false;\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc isPalindrome(nums int) bool {\n\tinput_num := nums\n\tvar remainder int\n\treversedNumber := 0\n\n\tfor nums > 0 {\n\t\tremainder = nums % 10\n\t\treversedNumber = (reversedNumber * 10) + remainder\n\t\tnums = nums / 10\n\t}\n\t\n\treturn input_num == reversedNumber\n}\n\nfunc main() {\n\tvar i int\n\n\tfmt.Print(\"Input Numbers: \")\n\tfmt.Scan(&i)\n\n\tif isPalindrome(i) {\n\t\tfmt.Println(\"Palindrome Number\")\n\t} else {\n\t\tfmt.Println(\"Not Palindrome Number\")\n\t}\n}\n",
  "php": "<?php\n\nfunction check_palindrome_number($num)\n{\n\treturn strrev($num) == $num;\n}\n\necho check_palindrome_number(121) ? 'Palindrome String' : 'Not Palindrome String';\n",
  "perl": "# By Soham Gupta (http://github.com/gupta-soham/) (https://www.linkedin.com/in/soham-gupta-in/)\n\n# A Perl program to check palindrome numbe\n# Input  : 121\n# Output : Palindrome Number\n\n\nprint \"Enter a number: \";\n$n = <STDIN>;\n# $n = 121\n$t = $n;\n$s = 0;\nwhile ($n > 0) {\n    $r = $n % 10;\n    $s = ($s * 10) + $r;\n    $n = int($n / 10);\n}\n\nif ($t == $s) {\n    print \"Number is Palindrome!\\n\";\n} \nelse {\n    print \"Number is not Palindrome!\\n\";\n}",
  "python": "number = input(\"Input:\")\nprint(\"Palindrome Number\" if number == number[::-1] else \"Not Palindrome Number\")\n",
  "rust": "fn check_palindrome(mut num: i32) -> bool {\n    let mut remainder;\n    let temp;\n    let mut reversed = 0;\n\n    temp = num;\n\n    while num>0 {\n        remainder = num%10;\n        num = num/10;\n        reversed  = reversed*10 +remainder;\n    }\n        \n    return reversed == temp;\n}\n\nfn main() {\n    let palindrome = check_palindrome(199);\n\n    println!(\"{}\", palindrome)\n}",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "php",
    "perl",
    "python",
    "rust"
  ]
}