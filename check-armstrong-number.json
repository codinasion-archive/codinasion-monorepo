{
  "slug": "check-armstrong-number",
  "title": "Check Armstrong Number",
  "c": "#include <stdio.h>\n\nint is_armstrong(int);\nint get_num_of_digits(int);\nint raise_power(int, int);\n\nint main() {\n    int num;\n    printf(\"Input  : \");\n    scanf(\"%d\", &num);\n    if (is_armstrong(num)) {\n        printf(\"Output : Armstrong Number\");\n    } else {\n        printf(\"Output : Not Armstrong Number\");\n    }\n    return 0;\n}\n\nint is_armstrong(int n) {\n    int original = n;\n    int power = get_num_of_digits(n);\n    int sum = 0;\n    for (int i = 0; i < power; i++, n /= 10) {\n        sum += raise_power(n % 10, power);\n    }\n    return (sum == original) ? 1 : 0;\n}\n\nint get_num_of_digits(int n) {\n    int result;\n    for (result = 1; n /= 10; result++) {\n        ;\n    }\n    return result;\n}\n\nint raise_power(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < p; i++) {\n        result *= n;\n    }\n    return result;\n}\n",
  "c-plus-plus": "#include <iostream>\n\nbool check_armstrong_number_helper(int number){\n    // Max sum of n-digits number <= 9^3*n\n    if (number >= 10000) return false;\n\n    int sum = 0;\n    int tmp_number = number;\n    while(tmp_number != 0){\n        int curr_digit = tmp_number % 10;\n        sum += curr_digit * curr_digit * curr_digit;\n        tmp_number /= 10;\n    }\n    return (sum == number);\n}\n\nvoid check_armstrong_number(int number){\n    if (check_armstrong_number_helper(number)){\n        std::cout<<\"Armstrong Number\"<<std::endl;\n    }else{\n        std::cout<<\"Not Armstrong Number\"<<std::endl;\n    }\n}\n\nint main(){\n    check_armstrong_number(153);\n    check_armstrong_number(152);\n    return 0;\n}",
  "c-sharp": "using System;  \n  \nnamespace ArmstrongNumbers  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            int number, rem, temp, sum = 0;  \n            Console.Write(\"Enter a Number : \");  \n            number = int.Parse(Console.ReadLine());  \n  \n            temp = number;  \n            while (number > 0)  \n            {  \n                rem = number % 10;  \n                sum =sum+(rem*rem*rem);  \n                number= number/ 10;  \n            }  \n              \n            if (temp == sum)  \n                Console.WriteLine(temp + \" is an Armstrong Number\");  \n            else  \n                Console.WriteLine(temp + \" is not an Armstrong Number\");  \n            Console.ReadKey();  \n        }  \n    }  \n}  \n",
  "java": "import java.util.*;\n\npublic class CheckArmstrongNumber {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int number = sc.nextInt();\n        int n = number;\n        int sum = 0;\n\n        while (n > 0) {\n            int digit = n % 10;\n            sum += digit * digit * digit;\n            n /= 10;\n        }\n\n        System.out.println(sum == number);\n        sc.close();\n    }\n}",
  "javascript": "const getCube = (n) => n * n * n;\n\nconst checkArmstrongNumber = (number) => {\n  if (typeof number !== \"number\") return \"Please enter a valid number.\";\n\n  const digitsOfNUmber = String(number)\n    .split(\"\")\n    .map((digit) => Number(digit));\n\n  let sumOfCubesOfDigits = 0;\n\n  digitsOfNUmber.forEach((digit) => {\n    sumOfCubesOfDigits += getCube(digit);\n  });\n\n  const isArmstrong = sumOfCubesOfDigits === number;\n\n  return isArmstrong ? \"Armstrong Number\" : \"Not Armstrong Number\";\n};\n\nconsole.log(checkArmstrongNumber(153));\n",
  "kotlin": "fun main() {\n    print(\"Input : \")\n    println()\n    var nums = readLine()\n\n    println(\"Output: \" + CheckArmstrongNumber(nums!!.toInt()))\n\n}\n\nprivate fun CheckArmstrongNumber(number: Int): String {\n    var originalNumber: Int\n    var remainder: Int\n    var result = 0\n\n    originalNumber = number\n\n    while (originalNumber != 0) {\n        remainder = originalNumber % 10\n        result += Math.pow(remainder.toDouble(), 3.0).toInt()\n        originalNumber /= 10\n    }\n\n    if (result == number)\n        return \"$number is an Armstrong number.\"\n    else\n        return \"$number is not an Armstrong number.\"\n}",
  "ruby": "#!/usr/bin/ruby\ndef isArmstrong( number )\n    result = false\n    numberOfDigits = number.to_s.length\n    sum = 0\n    n = number\n    while n > 0\n        digit = n % 10\n        sum += digit ** numberOfDigits # ** pow\n        n /= 10\n    end\n    result = sum == number\n    return result\nend\n\nputs \"Enter a number\"\nnumber=STDIN.gets.to_i\n\nputs \"#{number} is an Armstrong number? #{isArmstrong(number)}\"\n",
  "typescript": "const getCube = (n: number) => n * n * n;\n\nconst checkArmstrongNumber = (number: number) => {\n  const digitsOfNUmber: number[] = String(number)\n    .split(\"\")\n    .map((digit) => Number(digit));\n\n  let sumOfCubesOfDigits: number = 0;\n\n  digitsOfNUmber.forEach((digit) => {\n    sumOfCubesOfDigits += getCube(digit);\n  });\n\n  const isArmstrong = sumOfCubesOfDigits === number;\n\n  return isArmstrong ? \"Armstrong Number\" : \"Not Armstrong Number\";\n};\n\nconsole.log(checkArmstrongNumber(153));\n",
  "description": "\n## Write a program to check armstrong number\n\nAn Armstrong number is a number that is equal to the sum of cubes of its digits.\n\n```txt\nInput  : 153\nOutput : Armstrong Number\n```\n\n---\n",
  "trackId": 1236,
  "lastUpdated": "2024-03-28T04:42:27Z",
  "contributors": [
    "Adelechka",
    "anandfresh",
    "VinayReddy-vr",
    "harshraj8843",
    "AshitaSingamsetty",
    "satishkumarsajjan",
    "rksp25",
    "joao-vitor-souza",
    "MufaddalHakim",
    "Badboy-16",
    "CodingWithHardik",
    "chetanchandel31",
    "Rainingcity"
  ],
  "julia": "function isArmstrong(x)\n    # If the number is less than 0, then it is not a armstrong number.\n    if x < 0\n        return false\n    elseif x == 0\n        return \"true\"\n    else\n        # Finding the total number of digits in the number\n        length = Int(floor(log10(x) + 1))\n        result = 0\n        temp = x\n        for i in 1:length\n            val = temp % 10\n            # Finding each digit raised to the power total digit and add it to the total sum\n            result = result + Int(trunc(val))^length\n            temp = temp / 10\n        end\n        return x == result ? true : false\n    end\nend\n\nnum = 153\nif(isArmstrong(num))\n println(\"Armstrong Number\")\nelse\n println(\"Not an Armstrong Number\")\nend\n",
  "scala": "import scala.io.StdIn.readInt\n\nobject checkArmstrongNumber {\n  def isArmstrongNumber(number: Int): Boolean = {\n    val digits = number.toString.map(_.asDigit)\n    val numberOfDigits = digits.length\n    val sumOfPowers = digits.map(math.pow(_, numberOfDigits)).sum\n    sumOfPowers == number\n  }\n\n  def main(args: Array[String]): Unit = {\n    val number = readInt()\n    if (isArmstrongNumber(number)) {\n      println(s\"Armstrong Number\")\n    } else {\n      println(s\"Not Armstrong Number\")\n    }\n  }\n}",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc isArmStrongNumber(num int) bool{\n\tnumStr := fmt.Sprint(num)\n\tnumDigits := len(numStr)\n\tsum := 0\n\toriginalNum := num\n\n\tfor num>0 {\n\t\tdigit:=num%10\n\t\tsum+= int(math.Pow(float64(digit),float64(numDigits)))\n\t\tnum /=10\n\t}\n\n\treturn sum == originalNum\n}\n\nfunc main(){\n\tvar num int\n\tfmt.Print(\"Input  : \")\n\tfmt.Scanln(&num)\n\n\tif isArmStrongNumber(num){\n\t\tfmt.Println(\"Output : Armstrong Number\")\n\t} else {\n\t\tfmt.Println(\"Output : Not Armstrong Number\")\n\t}\n}",
  "php": "<?php  \n$num=153;  \n$total=0;  \n$x=$num;  \nwhile($x!=0)  \n{  \n$rem=$x%10;  \n$total=$total+$rem*$rem*$rem;  \n$x=$x/10;  \n}  \nif($num==$total)  \n{  \necho \"It is an Armstrong number\";  \n}  \nelse  \n{  \necho \"It is not an armstrong number\";  \n}  \n?>  \n",
  "perl": "$number = 153;\n$temp \t= $number;\n$sum \t= 0;\n\nwhile($temp != 0)\n{\n\t$rem  = $temp % 10;\n\t$sum  = $sum + ($rem * $rem * $rem);\n\t$temp = $temp / 10;\n}\n\nif($number == $sum)\n{\n\tprint \"Armstrong Number\";\n}\nelse\n{\n\tprint \"Not an Armstrong Number\";\n}\n",
  "python": "num = int(input(\"Input  : \"))\nsum = 0\ntemp = num\nwhile temp > 0:\n    digit = temp % 10\n    sum += digit**3\n    temp //= 10\nif num == sum:\n    print(\"Output : Armstrong Number\")\nelse:\n    print(\"Output : Non Armstrong Number\")\n",
  "r": "# Function to check if a number is an Armstrong number\nisArmstrong <- function(number) {\n  originalNumber <- number\n  numDigits <- nchar(number)\n  sumOfCubes <- 0\n\n  while (number > 0) {\n    digit <- number %% 10\n    sumOfCubes <- sumOfCubes + digit^numDigits\n    number <- number %/% 10\n  }\n\n  return(originalNumber == sumOfCubes)\n}\n\n# Example usage\ninputNumber <- 407  \nresult <- isArmstrong(inputNumber)\n\nif (result) {\n  cat(inputNumber, \"is an Armstrong number.\\n\")\n} else {\n  cat(inputNumber, \"is not an Armstrong number.\\n\")\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "typescript",
    "julia",
    "scala",
    "go",
    "php",
    "perl",
    "python",
    "r"
  ]
}