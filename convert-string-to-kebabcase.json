{
  "slug": "convert-string-to-kebabcase",
  "title": "Convert String To Kebabcase",
  "c": "#include<stdio.h>\n#include<string.h>\nchar* toKababCase(char *str) {\n\tint flag = 0,index = 0;\n\tchar c[1000];\n\tfor(int i=0;i<strlen(str);i++){\n\t\tif(str[i] ==' '){\n\t\t\tflag = 1;\n\t\t}\n\t\telse{\n\t\t\tif(flag==1 && str[i] != '\\0') {\n\t\t\t\tflag = 0;\n\t\t\t\tstr[index++] = '-';\t\n\t\t\t}\n\t\t\tstr[index++] = tolower(str[i]);\n\t\t}\n\t}\n\tstr[index] = '\\0';\n\treturn str;\n}\nvoid main() {\n\tchar str[1000];\n\tprintf(\"Enter a string: \");\n\tfgets(str,1000,stdin);\n\tprintf(\"String in Kababase: %s\",toKababCase(str));\n}\n",
  "c-plus-plus": "#include <iostream> // cout, cin\n\nvoid ConvertToKebabcase(std::string &);\n\n\nint main()\n{\n    std::string str;\n\n    std::getline(std::cin,str);\n\n    ConvertToKebabcase(str);\n\n    std::cout << str << std::endl;\n\n    return 0;\n}\n\nvoid ConvertToKebabcase(std::string &str)\n{\n    for(std::size_t i = 0; i < str.size(); ++i)\n    {\n        if(str[i] == ' ')\n        {\n            str[i] = '-';\n        }\n\n        else if((str[i] >= 'A') && (str[i] <= 'Z'))\n        {\n            str[i] += 32;\n        }\n    }\n}\n",
  "c-sharp": "using System;\nusing System.Text.RegularExpressions;\n\npublic class KebabCase\n{\n    public static void Main()\n    {\n        //Prompts user to enter a string\n        Console.WriteLine(\"Please enter a string: \");\n\n        //Reads user input\n        string input = Console.ReadLine();\n\n        //Regular expression pattern to match non-alphanumeric characters\n        string pattern = \"[^a-zA-Z0-9]+\";\n\n        //Replacement string for non-alphanumeric characters\n        string replacement = \"-\";\n\n        //Converts input string to kebab case\n        string kebabCase = Regex.Replace(input, pattern, replacement).ToLower();\n\n        //Prints kebab case string\n        Console.WriteLine(kebabCase);\n    }\n}",
  "java": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String[] args) {\n\t    System.out.println(\"Input  : \");\n\t    Scanner sc=new Scanner(System.in);\n\t    String a=sc.nextLine();\n\t    String b=a.replace(' ','-');\n\t    System.out.println(b.toLowerCase());\n\t}\n}\n",
  "javascript": "function kebabCase() {\n  let givenString = str.split(\"\");\n  for (let i = 0; i < givenString.length; i++) {\n    if (givenString[i] == \" \") {\n      givenString[i] = \"-\";\n    }\n  }\n  givenString = givenString.join(\"\");\n  return console.log(givenString);\n}\n\nkebabCase(\"hello world\");\n",
  "kotlin": "fun convertStringToKebabcase(text: String): String = text.toLowerCase().replace(\" \", \"-\")\n\nfun main() {\n\tprintln(convertStringToKebabcase(\"hello world\"))\n}\n",
  "ruby": "puts \"Please enter a string: \"\ninput_string = gets\n\ndef convertStringToKebabCase(string)\n    string.downcase.gsub(\" \", \"-\")\nend\n\nputs convertStringToKebabCase(input_string)",
  "typescript": "function kebabCase(str: any) {\n  let givenString = str.split(\"\");\n  for (let i = 0; i < givenString.length; i++) {\n    if (givenString[i] === \" \") {\n      givenString[i] = \"-\";\n    }\n  }\n  givenString = givenString.join(\"\");\n  return console.log(givenString);\n}\n\nkebabCase(\"hello world\");\n",
  "description": "\n## Write a program to convert string to kebabcase\n\nKebabcase is a style of writing in which all letters are lowercase and spaces are replaced with hyphens.\n\n```txt\nInput  : \"hello world\"\nOutput : \"hello-world\"\n```\n\n---\n",
  "trackId": 2449,
  "lastUpdated": "2023-10-02T16:42:03Z",
  "contributors": [
    "anandfresh",
    "harshraj8843",
    "rsitters",
    "RiteshK-611",
    "roshan798",
    "Osher160",
    "jfinley6",
    "joao-vitor-souza",
    "rahmat-dev",
    "CodingWithHardik",
    "PoweredByCaffein",
    "greeshma-d"
  ],
  "julia": "println(\"Enter a string: \")\ns = readline()\ns = replace(lowercase(s), \" \" => \"-\")\nprintln(\"Given string in kebabcase: \", s)",
  "go": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\t// We are using a bufio reader as the scanf method does not allow taking arbitrary number inputs with spaces\n\treader := bufio.NewReader(os.Stdin)\n\n\tline, err := reader.ReadString('\\n')\n\tif err != nil {\n\t\tfmt.Println(\"Failed to take input:\", err)\n\t}\n\n\tfmt.Printf(\"Input: %s\", line)\n\tline = strings.ReplaceAll(line, \" \", \"-\")\n\tfmt.Printf(\"Output: %s\", line)\n}\n",
  "php": "<?php\n\nfunction convert_string_to_kebabcase($string)\n{\n\treturn str_replace(\" \", \"-\", strtolower($string));\n}\n\necho convert_string_to_kebabcase(\"hello world\");\n",
  "perl": "#!/usr/bin/perl\nuse v5.14;\nuse strict;\nuse warnings;\nprint \"Enter a string : \";\nmy $str = lc(<STDIN>);\n$str=~s/ /-/g;\nsay $str;\n",
  "python": "a = input(\"Input : \")\nb = a.replace(\" \", \"-\")\nprint(\"Output : \", b.lower())\n",
  "rust": "fn convert_string_to_kebabcase(text: String) -> String {\n\treturn text.to_lowercase().replace(\" \", \"-\");\n}\n\nfn main() {\n\tlet text: String = String::from(\"hello world\");\n\tprintln!(\"{}\", convert_string_to_kebabcase(text));\n}",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "typescript",
    "julia",
    "go",
    "php",
    "perl",
    "python",
    "rust"
  ]
}