{
  "slug": "find-sum-of-cubes-of-numbers-by-recursion",
  "title": "Find Sum Of Cubes Of Numbers By Recursion",
  "c": "#include <stdio.h>\n\nint addNumbers(int n);\n\nint main() {\n\n  int num;\n  printf(\"Enter a positive integer: \");\n  scanf(\"%d\", &num);\n  printf(\"Sum = %d\", addNumbers(num));\n  return 0;\n}\n\nint addNumbers(int n) {\n  if (n != 0)\n    return (n*n*n + addNumbers(n - 1));\n  else\n    return n;\n}\n",
  "c-plus-plus": "#include <iostream>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint FindSumOfCubesOfNumbersByRecursion(vector<int> arr, int n){\n    if(n==1) return pow(arr[0],3);\n    return pow(arr[n-1],3)+FindSumOfCubesOfNumbersByRecursion(arr,n-1);\n}\n\nint main()\n{\n    int n;cin>>n;\n    vector<int> v(n);\n    for(int i=0;i<n;i++) cin>>v[i];\n    int res=FindSumOfCubesOfNumbersByRecursion(v,n);\n    cout<<res<<'\\n';\n}\n\n//Contributed by Raghav Garg",
  "c-sharp": "using System;\r\npublic class FindSumOfCubesOfNumbersByRecursion \r\n{\r\n    public int sumOfCubesOfNumbersByRecursion(int[] a, int sum, int i) {\r\n        if (i >= a.Length)\r\n            return sum;\r\n        sum += (a[i] * a[i] * a[i]);\r\n        return sumOfCubesOfNumbersByRecursion(a,sum,++i);\r\n    }\r\n    public static void Main(string[] args)\r\n    {\r\n        FindSumOfCubesOfNumbersByRecursion n = new FindSumOfCubesOfNumbersByRecursion();\r\n        int[] a = { 1, 2, 3, 4, 5 };\r\n        Console.Write(\"Input  : \");\r\n        for (int i = 0; i < a.Length; i++) {\r\n            Console.Write(\"{0} \",a[i]);\r\n        }\r\n        Console.WriteLine(\" \");\r\n        Console.WriteLine(\"Output : {0}\", n.sumOfCubesOfNumbersByRecursion(a,0,0));\r\n    }\r\n}",
  "java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class FindSumOfCubesOfNumbersByRecursion {\n\n    public static void main(String[] args) {\n\n        List<Integer> arr = new ArrayList<>(Arrays.asList(1 , 2, 3, 4, 5));   //array to get sum\n        \n        System.out.println(cubesum(arr,0,0));        \n    }\n\n    public static int cubesum(List<Integer> arr,int i,int sum) {                //recursive function \n        if(i >= arr.size()){\n            return sum;\n        }\n        sum += (arr.get(i) * arr.get(i) * arr.get(i));        \n        return cubesum(arr,++i,sum);        \n    }\n}\n",
  "javascript": "function FindSumOfCubesOfNumbersByRecursion(num) {\n  let sumOfCubesOfNumber = 0;\n  if (num > 0) {\n    sumOfCubesOfNumber =\n      Math.pow(num % 10, 3) +\n      FindSumOfCubesOfNumbersByRecursion(Math.floor(num / 10));\n  }\n  return sumOfCubesOfNumber;\n}\n\nconsole.log(FindSumOfCubesOfNumbersByRecursion(12345));\n",
  "kotlin": "import kotlin.math.pow\n\nfun main() {\n    print(\"Enter the numbers:\")\n    val nums = readln()\n    print(\"Sum of Cubes of Number: ${sumOfCubes(nums)}\")\n}\n\nprivate fun sumOfCubes(nums: String): Int {\n    val list = mutableListOf<Int>()\n    var str = \"\"\n    nums.forEach {\n        if (it == ' ') {\n            list.add(str.toInt())\n            str = \"\"\n        } else str += it\n    }\n    if (str != \"\") list.add(str.toInt())\n    return sumRecursion(0, list)\n}\n\nprivate fun sumRecursion(index: Int, nums: MutableList<Int>): Int {\n    if (index == nums.lastIndex) return nums[index].toDouble().pow(3).toInt()\n\n    return nums[index].toDouble().pow(3).toInt() + sumRecursion(index + 1, nums)\n}",
  "typescript": "function FindSumOfCubesOfNumbersByRecursion(num: number): number {\n  let sumOfCubesOfNumber = 0;\n  if (num > 0) {\n    sumOfCubesOfNumber =\n      Math.pow(num % 10, 3) +\n      FindSumOfCubesOfNumbersByRecursion(Math.floor(num / 10));\n  }\n  return sumOfCubesOfNumber;\n}\n\nconsole.log(FindSumOfCubesOfNumbersByRecursion(12345));\n",
  "description": "\n## Write a program to find sum of cubes of numbers by recursion\n\n```txt\nInput  : 1 2 3 4 5\nOutput : 225\n```\n\n---\n",
  "trackId": 1787,
  "lastUpdated": "2024-06-16T13:55:26Z",
  "contributors": [
    "harshraj8843",
    "pramod-karkhani",
    "apurvagandhi",
    "roberanegussie",
    "esivakumar26",
    "joao-vitor-souza",
    "greeshma-d",
    "vedha-vikash-pixel",
    "UsmanFani",
    "darkbits018",
    "grraghav120",
    "yk-jp"
  ],
  "go": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc sumOfCubes(numbers []int) int {\n\t// Base case\n\tif len(numbers) == 0 {\n\t\treturn 0\n\t}\n\n\t// Recursive case\n\treturn numbers[0]*numbers[0]*numbers[0] + sumOfCubes(numbers[1:])\n}\n\nfunc main() {\n\t// Get the input numbers\n\tnumbers := []int{1, 2, 3, 4, 5}\n\n\t// Find the sum of the cubes\n\tsum := sumOfCubes(numbers)\n\n\t// Print the output\n\tfmt.Println(\"The sum of the cubes is\", sum)\n}\n",
  "php": "<?php\n  $n = readline('Enter Number: ');\n  echo \"Sum of cubes: \".Sum($n);\n  \n  function Sum($n) { \n    if($n == 1)\n      return 1;\n    else\n      return ($n**3 + Sum($n-1));\n  }\n?>\n",
  "perl": "use strict;\nuse warnings;\n\nsub addNumbers {\n    my ($n) = @_;\n    return ($n != 0) ? ($n * $n * $n + addNumbers($n - 1)) : $n;\n}\n\nprint \"Enter a positive integer: \";\nmy $num = <STDIN>;\nchomp($num);\n\nprint \"Sum = \", addNumbers($num), \"\\n\";\n",
  "python": "from decimal import Decimal, DecimalException\n\n\ndef culc_sum_of_cubes_of_numbers(nums, res):\n    if len(nums) <= 0:\n        # when every numbers in the nums are calculated, array is empty and return result\n        return res\n\n    # pop the number from the nums array and add it to the result\n    num = nums.pop()\n    res += num**3\n    return culc_sum_of_cubes_of_numbers(nums, res)\n\n\ndef convert_input_to_numbers_list(user_input):\n    try:\n        # separate the user input by empty space\n        nums = user_input.split()\n\n        nums = [Decimal(num) for num in nums]\n\n    except (ValueError, DecimalException):\n        print(f\"Please enter valid input.\")\n        exit()\n\n    return nums\n\n\ndef main():\n    # receive a user input\n    user_input = input(f\"Enter the numbers (e.g. 1 2 3 4 5): \")\n    nums = convert_input_to_numbers_list(user_input)\n\n    res = culc_sum_of_cubes_of_numbers(nums, 0)\n    print(f'the result of \"{user_input}\" = {res}')\n\n\nmain()\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "typescript",
    "go",
    "php",
    "perl",
    "python"
  ]
}