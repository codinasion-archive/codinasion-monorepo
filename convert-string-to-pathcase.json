{
  "slug": "convert-string-to-pathcase",
  "title": "Convert String To Pathcase",
  "c": "#define _POSIX_C_SOURCE 200809L\n#include <stdio.h> /* printf, scanf */\n#include <stdlib.h> /* fgets, malloc, free */\n\n\nvoid ConvertStringToPathcase(char *str);\n\n\nint main()\n{\n    char *str = NULL;\n    int is_good = 0;\n    size_t size = 0;\n\n    if(scanf(\"%lu\",&size) != 1)\n    {\n        return -1;\n    }\n    \n    str = (char *)malloc(sizeof(char) * size);\n\n    /* discard \\n of scanf so i can give getline new input */\n    scanf(\"%c\", (char *) stdin);\n    \n    is_good = getline(&str,&size,stdin);\n\n    if(is_good == -1)\n    {\n        free(str);\n        return -1;\n    }\n\n    ConvertStringToPathcase(str);\n\n    printf(\"%s\\n\",str);\n\n    free(str);\n\n    return 0;\n}\n\nvoid ConvertStringToPathcase(char *str)\n{\n\n    while(*str != '\\0')\n    {\n        if(*str == ' ')\n        {\n            *str = '/';\n        }\n\n        if(*str >= 'A' && *str <= 'Z')\n        {\n            *str += 32;\n        }\n\n        ++str;\n    }\n}",
  "c-plus-plus": "#include <cstring>\r\n#include <iostream>\r\nusing namespace std;\r\n \r\nint main()\r\n{\r\n    string str;\r\n    getline(cin, str);\r\n    for (int i = 0; i < str.length(); ++i) {\r\n        if (str[i] == ' ') {\r\n            str[i] = '/';\r\n        }\r\n    }\r\n    cout << str << endl;\r\n    return 0;\r\n}",
  "c-sharp": "using System;\nclass Pathcase {\n  \n    public static void Main()\n    {\n        String str = \"hello world\";\n        Console.WriteLine(\"Path case: \" + str.Replace(' ', '/'));\n    }\n}\n",
  "java": "\r\nclass replaceSpace\r\n{\r\n\tpublic static void main(String []args)\r\n\t{\r\n\t    String str = \"Trial string\";\r\n\t    String s=\"\";\r\n\t    for (int i = 0; i < str.length(); ++i) {\r\n\t\t\tif (str.charAt(i) == ' ')\r\n\t\t\t\ts += '/';\r\n\t\t\telse\r\n\t\t\t\ts += str.charAt(i);\r\n\t\t}\r\n\t\tSystem.out.println(s);\r\n\t}\r\n}\r\n",
  "javascript": "function stringToPathCase(str) {\n  let toPathcase = str.split(\"\");\n  console.log(toPathcase);\n  for (let i = 0; i < toPathcase.length; i++) {\n    if (\n      toPathcase[i] === \",\" ||\n      toPathcase[i] === \"?\" ||\n      toPathcase[i] === \"/\"\n    ) {\n      toPathcase[i] = \"\";\n    }\n\n    if (toPathcase[i] === \" \") {\n      console.log(\"true\");\n      toPathcase[i] = \"/\";\n    }\n  }\n  console.log(toPathcase.join(\"\"));\n}\n\nstringToPathCase(\"hello world, good morning\");\n",
  "kotlin": "import java.util.Scanner\n\nfun main() {\n    print(\"Enter String : \")\n    println()\n    var min = readLine()\n\n    println(\"Camel Case: \" + ConvertStringToPathcase(min!!.split(\" \")))\n\n}\n\nprivate fun ConvertStringToPathcase(args: List<String>): String {\n    val buffer = StringBuffer()\n    for((index,day) in args.withIndex()){\n        //println(\"$index :$day\")\n        if(index == 0) {\n            buffer.append(day);\n        } else {\n            buffer.append(\"/\").append(day)\n        }\n    }\n\n    return buffer.toString()\n}",
  "ruby": "puts 'Please, insert your string: '\nuser_input = gets.chomp\nresult = user_input.split(' ').map(&:downcase).join('/')\nputs result\n",
  "typescript": "function stringToPathCase(str: any) {\n  const toPathcase = str.split(\"\");\n  console.log(toPathcase);\n  for (let i = 0; i < toPathcase.length; i++) {\n    // to remove other characters\n    if (\n      toPathcase[i] === \",\" ||\n      toPathcase[i] === \"?\" ||\n      toPathcase[i] === \"/\"\n    ) {\n      toPathcase[i] = \"\";\n    }\n\n    // to remove white space\n    if (toPathcase[i] === \" \") {\n      console.log(\"true\");\n      toPathcase[i] = \"/\";\n    }\n  }\n  console.log(toPathcase.join(\"\"));\n}\n\nstringToPathCase(\"hello world, good morning\");\n",
  "description": "\n## Write a program to convert string to pathcase\n\nPathcase is a style of writing in which all letters are lowercase and spaces are replaced with forward slashes.\n\n```txt\nInput  : \"hello world\"\nOutput : \"hello/world\"\n```\n\n---\n",
  "trackId": 2744,
  "lastUpdated": "2023-08-03T20:39:16Z",
  "contributors": [
    "harshraj8843",
    "RiteshK-611",
    "anandfresh",
    "Osher160",
    "rafaover",
    "rksp25",
    "joao-vitor-souza",
    "Nitya-Pasrija",
    "PoweredByCaffein",
    "greeshma-d"
  ],
  "julia": "println(\"Enter a string: \")\ns = readline()\ns = replace(lowercase(s), \" \" => \"/\")\nprintln(\"Given string in pathcase: \", s)",
  "go": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\t// We are using a bufio reader as the scanf method does not allow taking arbitrary number inputs with spaces\n\treader := bufio.NewReader(os.Stdin)\n\tfmt.Printf(\"Please enter a string: \")\n\tline, err := reader.ReadString('\\n')\n\tif err != nil {\n\t\tfmt.Println(\"Failed to take input:\", err)\n\t}\n\n\tfmt.Printf(\"Input: %s\", line)\n\tline = strings.ReplaceAll(line, \" \", \"/\")\n\tfmt.Printf(\"Output: %s\", line)\n}\n",
  "php": "<?php\r\n\t$str = \"String that we are gonna convert\";\r\n  for ($i = 0; $i < strlen($str); ++$i)\r\n  {\r\n     if ($str[$i] == ' ')\r\n      {\r\n        $str[$i] = '/';\r\n      }\r\n  }\r\n  echo $str . \"\\n\";\r\n?>",
  "python": "str = input(\"Enter string: \")\r\nfor i in range(0, len(str), 1):\r\n    if str[i] == \" \":\r\n        str = str.replace(str[i], \"/\")\r\nprint(str)\r\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "typescript",
    "julia",
    "go",
    "php",
    "python"
  ]
}