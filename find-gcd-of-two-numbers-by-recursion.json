{
  "slug": "find-gcd-of-two-numbers-by-recursion",
  "title": "Find Gcd Of Two Numbers By Recursion",
  "c": "#include <stdio.h>\n \nint gcd(int a, int b)\n{\n\n    if (a == 0)\n       return b;\n    if (b == 0)\n       return a;\n \n    if (a == b)\n        return a;\n \n    if (a > b)\n        return gcd(a-b, b);\n    return gcd(a, b-a);\n}\n \nint main()\n{\n    int a = 12, b = 18;\n    printf(\"GCD of %d and %d is %d \", a, b, gcd(a, b));\n    return 0;\n}\n",
  "c-plus-plus": "#include <iostream>\n\nint gcd(int a, int b) {\n  if (b == 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\n\nint main() {\n  int a, b;\n  std::cout << \"Enter two numbers: \";\n  std::cin >> a >> b;\n  std::cout << \"GCD: \" << gcd(a, b) << std::endl;\n  return 0;\n}",
  "c-sharp": "using System;\n\nclass GCD {\n  static int gcd(int x, int y) {\n    if (y == 0)\n      return x;\n    return gcd(y, x%y);\n  } \n\n  static void Main(string[] args) {\n    int x = 12;\n    int y = 18;\n\n    Console.WriteLine(\"GCD of \"+ x +\" and \"+ y +\" is: \"+ gcd(x,y));\n  }\n}\n",
  "f-sharp": "let rec gcd a b =\n    if b = 0 then a\n    else gcd b (a % b)\n\n// Example usage\nlet num1 = 12\nlet num2 = 18\n\nlet result = gcd num1 num2\nprintfn \"The GCD of %d and %d is: %d\" num1 num2 result\n",
  "java": "import java.io.*;\nimport java.util.Scanner;\n\nclass GCD {\n    static int gcd(int a, int b) {\n        if (b == 0)\n            return a;\n        return gcd(b, a % b);\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        sc.close();\n\n        System.out.println(\"GCD of \" + a + \" and \" + b + \" is \" + gcd(a, b));\n    }\n}\n",
  "javascript": "function greatestCommonDenominator(a, b) {\n  // the bigger number is always divided by the smaller one\n  if (b === 0) return a;\n\n  // recursively call the function\n  return greatestCommonDenominator(b, a % b);\n}\n\n//display greatest common denominator of 12 and 18\nconsole.log(greatestCommonDenominator(12, 18));\n",
  "kotlin": "fun findGCD(a: Int, b: Int): Int {\n    // Base case: If b is 0, the GCD is a\n    if (b == 0) {\n        return a\n    }\n\n    \n    return findGCD(b, a % b)\n}\n\nfun main() {\n    val num1 = 48\n    val num2 = 18\n    val gcd = findGCD(num1, num2)\n    \n    println(\"GCD of $num1 and $num2 is $gcd\")\n}\n",
  "ruby": "def findGCDOfTwoNumbersByRecursion a, b\n    while a != b \n        if a > b\n            return findGCDOfTwoNumbersByRecursion(a - b, b)\n        else\n            return findGCDOfTwoNumbersByRecursion(a, b - a)\n        end\n    end\n    return a\nend\n\nputs findGCDOfTwoNumbersByRecursion 12, 18\n",
  "swift": "import Foundation\n\nfunc gcd(_ a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        return gcd(b, a % b)\n    }\n}\n\n// Example usage\nlet num1 = 12\nlet num2 = 18\nlet result = gcd(num1, num2)\nprint(\"GCD of \\(num1) and \\(num2) is \\(result)\")\n",
  "typescript": "const gcd = (x: number, y: number): number => {\n  if (y === 0) return x;\n  return gcd(y, x % y);\n};\n\nconsole.log(gcd(12, 18));\n",
  "description": "\n## Write a program to find gcd of two numbers by recursion\n\nGCD (Greatest Common Divisor) of two numbers is the largest number that divides both of them. A simple way to find GCD is to factorize both numbers and multiply common factors.\n\n```txt\nInput  : 12 18\nOutput : 6\n```\n\n---\n",
  "trackId": 5186,
  "lastUpdated": "2023-11-28T19:10:09Z",
  "contributors": [
    "Shaileshalluri",
    "SidMalladi",
    "Rohan-Kalgutkar",
    "bhushanmarathe",
    "ReprogramAkash",
    "harshraj8843",
    "AshitaSingamsetty",
    "jfinley6",
    "abhisek-1221",
    "anandfresh",
    "leslieyip02",
    "yashasvini121",
    "sahdev77",
    "yesayajones"
  ],
  "julia": "function gcd_recursive(a, b)\n   \n    if b == 0\n        return a\n    else\n      \n        return gcd_recursive(b, a % b)\n    end\nend\n\n\nnum1 = 12\nnum2 = 18\n\n\nprintln(\"GCD of $num1 and $num2 is: \", gcd_recursive(num1, num2))\n",
  "scala": "object GCDCalculator {\n  def gcd(a: Int, b: Int): Int = {\n    // Base case: if one of the numbers is zero, the other number is the GCD\n    if (b == 0) a\n    else gcd(b, a % b)\n  }\n\n  def main(args: Array[String]): Unit = {\n    // Example usage\n    val num1 = 21\n    val num2 = 18\n\n    val result = gcd(num1, num2)\n    println(s\"The GCD of $num1 and $num2 is: $result\")\n  }\n}\n",
  "dart": "import 'dart:io';\n\nint gcd(int a, int b) {\n  if (b == 0) {\n    return a;\n  } else {\n    return gcd(b, a % b);\n  }\n}\n\nvoid main() {\n  print(\"Enter two numbers to find their GCD:\");\n  int num1 = int.parse(stdin.readLineSync()!);\n  int num2 = int.parse(stdin.readLineSync()!);\n\n  int result = gcd(num1, num2);\n\n  print(\"The GCD of $num1 and $num2 is $result\");\n}",
  "go": "package main\nimport (\n    \"fmt\"\n    \"math/big\"\n)\nfunc main() {\n    var num1, num2 big.Int\n    fmt.Printf(\"Input : \")\n    fmt.Scanln(&num1, &num2)\n    result := new(big.Int).GCD(nil, nil, &num1, &num2)\n    fmt.Printf(\"Output : %d\",result)\n}",
  "haskell": "g :: Integer -> Integer -> Integer\ng x 0 = x\ng x y = g y (x `mod` y)\n\nmain = do\n    let n = 12\n    let m = 18\n\n    print $ g n m",
  "php": "<?php\n\nfunction gcd($x, $y) {\n  if ($y == 0)\n    return $x;\n  return gcd($y, $x%$y);\n}\n\necho gcd(12,18);\n\n?>\n",
  "perl": "sub gcd {\n    my ($a, $b) = @_;\n\n    # Base case: if one of the numbers is zero, the other number is the GCD\n    return $b == 0 ? $a : gcd($b, $a % $b);\n}\n\n# Example usage\nmy $num1 = 12;\nmy $num2 = 18;\n\nmy $result = gcd($num1, $num2);\nprint \"The GCD of $num1 and $num2 is: $result\\n\";\n",
  "python": "# Recursive function to return gcd of a and b\ndef recursiveGcd(a: int, b: int):\n    # Everything divides 0\n    if a == 0 or b == 0:\n        return a if a == 0 else b\n\n    # base case\n    if a == b:\n        return a\n\n    # a is greater\n    if a > b:\n        return recursiveGcd(a - b, b)\n    return recursiveGcd(a, b - a)\n\n\nx = int(input(\"n1: \"))\ny = int(input(\"n2: \"))\nprint(f\"GCD of {x} and {y} : {recursiveGcd(x,y)}\")\n",
  "r": "gcd <- function(a,b){\n    if(b==0){\n        return (a)\n    }\n    \n    return (gcd(b,a%%b))\n}\n\nprint(\"Input: \")\na=as.integer(readline())\nb=as.integer(readline())\nprint(paste(\"Output: \",gcd(a,b)))",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r"
  ]
}