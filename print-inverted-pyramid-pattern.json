{
  "slug": "print-inverted-pyramid-pattern",
  "title": "Print Inverted Pyramid Pattern",
  "c": "#include <stdio.h>\n\nint main()\n{\n\n    int number, i, j, limitNumber;\n    printf(\"enter a number\");\n    scanf(\"%d\", &number);\n\n    limitNumber = number;\n\n    for (i = 1; i <= number; i++)\n    {\n\n        for (j = 1; j <= limitNumber; j++)\n        {\n            printf(\"%d \", j);\n        }\n        printf(\"\\n\");\n\n        limitNumber--;\n    }\n\n    return 0;\n}",
  "c-plus-plus": "\n#include <iostream>\n\nint main()\n{\n    // Write C++ code here\n    int input, i, j, edge;\n\n    std::cout << \"input a number : \" << std::endl;\n    std::cin >> input;\n\n    edge = input;\n\n    for (i = 1; i <= input; i++)\n    {\n        for (j = 1; j <= edge; j++)\n        {\n            std::cout << j << \" \";\n        }\n\n        std::cout << \"\\n\";\n\n        edge = edge - 1;\n    }\n\n    return 0;\n}",
  "c-sharp": "using System;\nnamespace Pattern\n{\n    public class InvertedPyramid\n    {\n        public static void Main()\n        {\n            Console.Write(\"Enter Number of Rows :\");\n            int rows = Convert.ToInt32(Console.ReadLine());\n            for (int i = rows; i >= 1; i--)\n            {\n                for (int j = 1; j <= i; j++)\n                {\n                    Console.Write(j + \" \");\n                }\n                Console.WriteLine();\n            }\n            Console.ReadLine();\n        }\n    }\n}\n",
  "java": "import java.util.*;\npublic class PrintInvertedPyramidPattern {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        sc.close();\n        for (int i = t; i > 0; i--) {\n            for (int j = 1; j < i + 1; j++) {\n                System.out.print(j + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n",
  "javascript": "//inverted pyramid\nfor (let a = 5; a >= 1; a--) {\n  let str = \" \";\n  for (let i = 1; i <= a; i++) {\n    str += i + \" \";\n  }\n  console.log(str);\n}\n",
  "kotlin": "fun main() {\n    printInvertedPyramid(5);\n}\n\nfun printInvertedPyramid(rows: Int){\n    for (i in rows downTo 1) {\n        for (j in 1..i) {\n            print(\"$j \")\n        }\n        println()\n    }\n}\n",
  "ruby": "puts \"Enter the inverted pyramid number to display: \"\nuser_input = gets.to_i\ndef printInvertedPyramidPattern number\n    (1..number).each { |i| print \"#{i} \"}\n    puts\n    printInvertedPyramidPattern(number - 1) if number > 0 \nend\n\nprintInvertedPyramidPattern user_input",
  "swift": "func printInvertedPyramid(_ n: Int) {\n    for i in stride(from: n, to: 0, by: -1) {\n        for j in 1...i {\n            print(j, terminator: \" \")\n        }\n        print()\n    }\n}\n\n// Example usage with input 5\nlet input = 5\nprintInvertedPyramid(input)\n\n",
  "typescript": "const invertedPyramid = (num: number): number => {\n  for (let n = num; n >= 1; n--) {\n    let str = \"\";\n    for (let i = 1; i <= n; i++) {\n      str += i + \" \";\n    }\n    console.log(str);\n  }\n};\n\ninvertedPyramid(5);\n",
  "description": "\n## Write a program to print inverted pyramid pattern\n\n```txt\nInput   : 5\n\nOutput :\n1 2 3 4 5\n1 2 3 4\n1 2 3\n1 2\n1\n```\n\n---\n",
  "trackId": 4979,
  "lastUpdated": "2024-06-16T13:55:26Z",
  "contributors": [
    "harshraj8843",
    "pramod-karkhani",
    "jcmlumacad1",
    "Shreyash3110",
    "kenroulier",
    "shaurya-clemson",
    "sahanasurapureddy",
    "apurvagandhi",
    "Roybas2001",
    "anandfresh",
    "gsquareg2",
    "Medmly20208",
    "txsnxm",
    "SarthakSanjay",
    "jfinley6"
  ],
  "julia": "function print_inverted_pyramid(n)\n  for i in 1:n\n      for j in 1:(n-i+1)\n          print(j, \" \")\n      end\n      println()\n  end\nend\n\n# sending parameters to function\nn = 5\nprint_inverted_pyramid(n)\n",
  "scala": "// Write a Scala program to print inverted pyramid pattern\n\nobject InvertedPyramidPattern {\n  def main(args: Array[String]): Unit = {\n    print(\"Input: \")\n    val n = scala.io.StdIn.readInt()\n    print (n)\n    print(\"\\n\")\n    printInvertedPyramid(n)\n  }\n\n  def printInvertedPyramid(n: Int): Unit = {\n    for (i <- n to 1 by -1) {\n      for (j <- 1 to i) {\n        print(j + \" \")\n      }\n      println()\n    }\n  }\n}\n",
  "dart": "void main() {\n  int n = 5;\n  for (int i = n; i >= 1; i--) {\n    final list = [];\n    for (int j = 1; j <= i; j++) {\n      list.add(j);\n    }\n    print(list.join(' '));\n  }\n}\n",
  "go": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar rows int\n\tfmt.Print(\"Input: \")\n\tfmt.Scanln(&rows)\n\n\tfor i := rows; i >= 1; i-- {\n\t\tfor j := 1; j <= i; j++ {\n\t\t\tfmt.Print(j, \" \")\n\t\t}\n\t\tfmt.Println(\"\")\n\t}\n}\n",
  "haskell": "main = do\n  let n = 5\n  mapM_ (putStrLn . unwords . map show) [[1..x] | x <- [n,n-1..1]]\n",
  "php": "<?php\n    // The for loop is used to echo the inverted pyramid.\n    // The if statement is purely to let a user put in a value of choice\n\n    // In the for loop I use $i as the index, the value of $i is the user input. As long as $i is bigger than 0 it will substract 1 from the value of $i\n    for ($i = 5; $i > 0; $i--) {\n\n        // In the for loop I use $j as the index.\n        // $j has a base value of 1. As long as $j is smaller or equal to $i it will add 1 to the base value of $j.\n        for ($j = 1; $j <= $i; $j++) {\n\n            // Here $j will be outputting the number 1 (Base value of $j) to the number that is the base value of $i\n            echo \"$j \";\n        }\n\n        // The echo \"<br>\" is used to put everything on seperated lines\n        echo \"\\n\";\n    }\n\n?>\n",
  "perl": "print \"Enter a number: \";\n$number = <STDIN>;\nchomp($number);\n\n$limitNumber = $number;\n\nfor ($i = 1; $i <= $number; $i++) {\n    for ($j = 1; $j <= $limitNumber; $j++) {\n        print \"$j \";\n    }\n    print \"\\n\";\n    $limitNumber--;\n}\n",
  "python": "# print inverted pyramid pattern\n\n\ndef printInvertedPyramidPattern(number: int):\n    endNumber = number\n\n    for i in range(0, number):\n        for j in range(1, endNumber + 1):\n            print(j, end=\" \")\n\n        print(\"\")\n        endNumber = endNumber - 1\n\n\nif __name__ == \"__main__\":\n    number = int(input(\"type a number:\"))\n    printInvertedPyramidPattern(number)\n",
  "rust": "//  \tRust function to print an inverted pyramid pattern\n//Example:\n//  Input   : 5\n//  Output : \n//\t1 2 3 4 5\n//\t1 2 3 4 \n//\t1 2 3\n//\t1 2\n//\t1\n\nuse std::io;\n\nfn print_inverted_triangle(n: u32) {\n\n    let mut limit = n+1;\n    \n    for _i in 1 .. n+1 {\n\n        for j in 1 .. limit {\n            print!(\"{} \", j);\n        }\n\n\tlimit = limit - 1;\n        println!();\n    }\n}\n\nfn main() {\n\n\t// the input string and this main function can be removed. This is simply for testing\n\n\tprintln!(\"Enter the number of levels to print\");\n\tlet mut input_num = String::new();\n\tlet _rtrn = io::stdin().read_line(&mut input_num);\n\tlet n: u32 = input_num.trim().parse().expect(\"Input not an integer\");\t\n\t\t\n\t// example of how to call the function and print out the results of the inverted pyramid.\n    \tprint_inverted_triangle(n);\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "rust"
  ]
}