{
  "slug": "print-floyds-triangle",
  "title": "Print Floyds Triangle",
  "c": "#include <stdio.h>\nint main() {\n int n,i,j,k = 1;\n n = 5;\n\n for(i = 1; i <= n; i++) {\n    for(j=1;j <= i; j++)\n         printf(\"%3d\", k++);\n\n      printf(\"\\n\");\n  }\n   \n return 0;\n}\n",
  "c-plus-plus": "#include <bits/stdc++.h>\nusing namespace std;\n \nvoid printFloydTriangle(int n)\n{\n    int i, j, val = 1;\n    for (i = 1; i <= n; i++)\n    {\n        for (j = 1; j <= i; j++)\n            cout << val++ << \" \";\n        cout << endl;\n    }\n}\n \nint main()\n{\n    printFloydTriangle(5);\n    return 0;\n}\n",
  "c-sharp": "using System;\n\nnamespace FloydsTriangle\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.Write(\"Enter the number of rows:\\t\");\n            int row = int.Parse(Console.ReadLine());\n            int i, j, value = 1; \n            for (i = 1; i <= row; i++) \n            { \n                for (j = 1; j <= i; j++) \n                { \n                    Console.Write(value + \" \"); \n                    value++; \n                } \n                Console.WriteLine();\n            }\n        }\n    }\n}\n",
  "f-sharp": "let printFloydsTriangle n =\n    let mutable count = 1\n    for i = 1 to n do\n        for j = 1 to i do\n            printf \"%d \" count\n            count <- count + 1\n        printfn \"\"\n\n// Example usage with input 5\nprintFloydsTriangle 5",
  "java": "import java.util.Scanner;\nclass FloydTriangleExample\n{\n    public static void main(String args[])\n    {\n       int rows, number = 1, counter, j;\n       Scanner input = new Scanner(System.in);\n       System.out.println(\"Enter the number of rows for floyd's triangle\");\n       rows = input.nextInt();\n       System.out.println(\"Floyd's triangle\");\n       System.out.println(\"****************\");\n       for ( counter = 1 ; counter <= rows ; counter++ )\n       {\n           for ( j = 1 ; j <= counter ; j++ )\n           {\n                System.out.print(number+\" \");\n                number++;\n           }\n           System.out.println();\n       }\n   }\n}\n",
  "javascript": "let printFloydsTriangle = (num) => {\n  let count = 1;\n\n  for (let i = 1; i <= num; i++) {\n    let str = \"\";\n\n    for (let j = 1; j <= i; j++) {\n      str = str + count + \" \";\n      count++;\n    }\n    console.log(str.trim());\n  }\n};\n\nprintFloydsTriangle(5);\n",
  "kotlin": "fun main() {\n    printFlyod(5);\n}\n\nfun printFlyod(rows: Int){\n    var number = 1\n    for (i in 1..rows) {\n        for (j in 1..i) {\n            print(\"$number \")\n            ++number\n        }\n        println()\n    }\n}\n",
  "ruby": "def floydsTriangle(rows)\n  max = (rows * (rows + 1)) / 2\n  widths = ((max - rows + 1)..max).map {|n| n.to_s.length + 1}\n  n = 0\n  rows.times do |r|\n   puts (0..r).map {|i| n += 1; \"%#{widths[i]}d\" % n}.join\n  end\nend\n\nfloydsTriangle(5)\n",
  "swift": "//program to print Floyd's triangle in swift lang.\nlet row=7  // change row value to see the change in Floyd's triangle length\nvar num=1  // initialize the number to be 1 \nfor x in 1...row{\n  for _ in 1...x{\n    //print and iterate num value\n    print(num,terminator:\" \")\n    num+=1 \n  }\n  //move to next line\n  print(\"\")\n}",
  "typescript": "\"use strict\";\nconst floydsTriangle = (n: number): void => {\n  let count = 1;\n  for (let i = 1; i <= n; i++) {\n    let str = \"\";\n    for (let j = 1; j <= i; j++) {\n      str = str + count + \" \";\n      count++;\n    }\n    console.log(str.trim());\n  }\n};\n\nfloydsTriangle(5);\n",
  "description": "\n## Write a program to print floyd's triangle\n\nFloyd's triangle is a right-angled triangle of natural numbers, used in computer science as an example of a space-filling curve. It is named after Robert Floyd. It is defined by filling the rows of the triangle with consecutive numbers, starting with a 1 in the top left corner.\n\n```txt\nInput  : 5\n\nOutput :\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n```\n\n---\n",
  "trackId": 5487,
  "lastUpdated": "2023-11-07T16:19:56Z",
  "contributors": [
    "harshraj8843"
  ],
  "julia": "function createFlyodTriangle(numberOfRows)\n printNo =1;\n for a=0:numberOfRows\n    for b=1:a\n     print(printNo,\" \")\n     printNo= printNo+1\n    end\n println(\" \")\n end\nend\n\ncreateFlyodTriangle(5)\n",
  "scala": "object FloydsTraingle {\n    def main(args: Array[String]): Unit = {\n        //Ask the user for the number of rows\n        println(\"Enter the number of rows for Floydâ€™s Traingle:\")\n        val numRows = scala.io.StdIn.readInt()\n        var num = 1\n        for (i <- 1 to numRows) {\n            for (j <- 1 to i) {\n                print(s\"$num \")\n                num += 1\n            }\n            println()\n        }\n    }\n}",
  "dart": "import \"dart:io\";\n\nvoid printFloydsTriangle(int rows) {\n  int n = 1;\n  for (int i = 1; i <= rows; i++) {\n    for (int j = 1; j <= i; j++) {\n      stdout.write(\"$n \");\n      n++;\n    }\n    print(\"\");\n  }\n}\n\nvoid main() {\n  printFloydsTriangle(5);\n}\n",
  "go": "package main\nimport \"fmt\"\n\nfunc printFloydsTriangle(num int) {\n\tstart := 1\n\n\tfor i := 1; i <= num; i++ {\n\t\tfor j := 1; j <= i; j++ {\n\t\t\tfmt.Print(start, \" \")\n\t\t\tstart++\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n\nfunc main(){\n\tprintFloydsTriangle(3)\n}",
  "haskell": "floyd :: Int -> IO ()\nfloyd n = mapM_ putStrLn [concatMap showWithSpace [k..k+i] | (i,k) <- zip [0..n-1] (scanl (+) 1 [1..n-1])]\n  where showWithSpace x = show x ++ \" \"\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter the number of rows:\"\n  n <- readLn\n  floyd n\n",
  "php": "<?php\n\nfunction floydsTriangle($n)\n{\n    $val = 1;\n     \n    for($i = 1; $i <= $n; $i++)\n    {\n        for($j = 1; $j <= $i; $j++)\n        {\n            print($val.\" \");\n            $val++;\n        }\n        print(\"\\n\");\n    }\n}\n \n\nfloydsTriangle(5);\n\n?>\n",
  "perl": "use strict;\nuse warnings;\n\nsub displayFloydTriangle {\n  my $numRows = shift;\n  print \"\\ndisplaying a $numRows row Floyd's triangle:\\n\\n\";\n  my $maxVal = int($numRows * ($numRows + 1) / 2); \n  my $digit = 0;\n  foreach my $row (1 .. $numRows) {\n    my $col = 0;\n    my $output = '';\n    foreach (1 .. $row) {\n      ++$digit;\n      ++$col;\n      my $colMaxDigit = $maxVal - $numRows + $col;\n      $output .= sprintf \" %*d\", length($colMaxDigit), $digit;\n    }\n    print \"$output\\n\";\n  }\n  return;\n}\n\nmy @counts;\n@counts = @ARGV;\n@counts = (5) unless @ARGV;\n\nforeach my $count (@counts) {\n  displayFloydTriangle($count);\n}\n",
  "python": "rows = int(input(\"Enter no. of rows \"))\n\nnum = 1\nfor i in range(1, rows + 1):\n    for j in range(1, i + 1):\n        print(num, end=\" \")\n        num += 1\n    print()\n",
  "r": "print_floyds_triangle <- function(n) {\n  num <- 1\n  for(i in 1:n) {\n    for(j in 1:i) {\n      cat(num, \" \")\n      num <- num + 1\n    }\n    cat(\"\\n\")\n  }\n}\n\n# Example usage\nn <- 5\nprint_floyds_triangle(n)\n",
  "rust": "fn print_triangle(n: u32) {\n    let mut current = 1;\n    \n    for i in 1 ..= n {\n        for _ in 0 .. i {\n            print!(\"{} \", current);\n            current = current + 1;\n        }\n        println!(\"\");\n    }\n}\n\nfn main() {\n    let n = 5;\n\n    print_triangle(n);\n}",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}