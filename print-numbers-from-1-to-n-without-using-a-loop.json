{
  "slug": "print-numbers-from-1-to-n-without-using-a-loop",
  "title": "Print Numbers From 1 To N Without Using A Loop",
  "c": "#include <stdio.h>\n\nvoid printNumbersFromOneToN(int n)\n{\n\n    if (n <= 0)\n    {\n        return;\n    }\n\n    printNumbersFromOneToN(n - 1);\n\n    printf(\"%d \", n);\n}\n\nint main()\n{\n    int input;\n\n    printf(\"Enter an Integer: \\n\");\n    scanf(\"%d\", &input);\n\n    printNumbersFromOneToN(input);\n\n    return 0;\n}\n\n/*\n  Contributed by Medmly20208\n*/\n",
  "c-plus-plus": "// CPP Program to print 1 to N\n// without loops and recursion\n#include <iostream>\n#define ll long long\nusing namespace std;\n\nclass A {\npublic:\n    static ll a;\n    A() { cout << a++ <<\" \"; }\n};\n \nll A::a = 1;\n \n// Driver Code\nint main()\n{\n    ll N;  cin>>N;\n    A obj[N];\n}\n\n/*\nContributed by : Kartikeya Saini\n*/",
  "c-sharp": "using System;\nnamespace PrintNumbers{\n    class Program{\n        static void Main(string[] args){\n            int number = int.Parse(Console.ReadLine());\n            PrintByRecursion(number, 1);\n        } \n         private static void PrintByRecursion(int number, int currentNumber){\n            if(currentNumber == number)\n                Console.WriteLine($\"{currentNumber}\");\n            else{\n                Console.Write($\"{currentNumber} \");\n                PrintByRecursion(number, ++currentNumber);\n            }\n        }\n    }\n}",
  "f-sharp": "let rec printNumbers n =\n    if n > 0 then\n        printNumbers (n - 1)\n        printf \"%d \" n\n    else\n        ()\n\n// Read input from the user\nprintf \"Enter a number: \"\nlet input = Console.ReadLine()\nlet n = int input\n\n// Call the function to print numbers\nprintNumbers n\n",
  "javascript": "function printNumbers(n) {\n  if (n === 0) {\n    return;\n  }\n  printNumbers(n - 1);\n  console.log(n);\n}\n\nprintNumbers(5);\n",
  "kotlin": "fun main() {\n  print(\"Enter number : \")\n  println()\n  var input = readLine()\n  printNumber(input!!.toInt(), input!!.toInt()-1)\n}\n\nfun printNumber(originalNum: Int, num: Int): Int {\n  println(originalNum-num)\n  if (num == 0) {\n   return originalNum\n  }\n  return printNumber(originalNum, num-1)\n}\n",
  "ruby": "def printNumber(num)\n  if num > 0\n    printNumber(num - 1)\n    print(\"#{num} \") \n  end\nend\n\nputs printNumber(5)",
  "swift": "import Swift\nimport Foundation\n\nfunc printNumber(original:Int, n: Int) -> Int {\n   print(original - n)\n   if(n == 0) {\n     return 0\n   }\n   return printNumber(original: original, n: n-1)\n}\n\nvar num = 15\nvar result1 = printNumber(original: num, n: num-1)\n",
  "typescript": "const print1ToN = (n: number): number => {\n  n > 1 && print1ToN(n - 1);\n  console.log(n);\n};\n\nprint1ToN(5);\n",
  "description": "\n## Write a program to print numbers from 1 to n without using a loop\n\n```txt\nInput  : 5\nOutput : 1 2 3 4 5\n```\n\n---\n",
  "trackId": 5076,
  "lastUpdated": "2023-12-02T16:20:24Z",
  "contributors": [
    "SaideepKondur",
    "swapnilmukherjee",
    "shaurya-clemson",
    "sahanasurapureddy",
    "namrata18s",
    "Rohan-Kalgutkar",
    "MaryamMansour",
    "harshraj8843",
    "vedantpople4",
    "esivakumar26",
    "sancoLgates",
    "anandfresh",
    "AviadCohen24",
    "SarthakSanjay",
    "hi-Kartik2004",
    "Medmly20208",
    "jfinley6",
    "loesking"
  ],
  "julia": "function print_numbers_recursive(current, n)\n  if n<1\n    println(-1)\n    return\n  end\n  \n  if current > n\n      return\n  end\n  println(current)\n  print_numbers_recursive(current + 1, n)\nend\n\n# passing parameters to the recursive function\nn = 10\nprint_numbers_recursive(1, n)\n",
  "scala": "// Write a Scala program to print numbers from 1 to n\n// Input  : 5\n// Output : 1 2 3 4 5\n\nobject PrintNumbers extends App {\n  def printNumbers(n: Int): Unit = {\n    if (n > 0) {\n      printNumbers(n - 1)  \n      print(s\"$n \")      \n    }\n  }\n  print(\"Enter a number (n): \")\n  val n = scala.io.StdIn.readInt()\n  printNumbers(n)\n}",
  "dart": "import 'dart:io';\n\nvoid printNumbers(int n) {\n  if (n > 0) {\n    printNumbers(n - 1);\n    print(n);\n  }\n}\n\nvoid main() {\n  stdout.write('Enter a number: ');\n  int n = int.parse(stdin.readLineSync()!);\n  printNumbers(n);\n}",
  "go": "package main\n\nimport \"fmt\"\n\nfunc printNumbers(nums int) {\n\tif (nums <= 0) {\n\t\treturn\n\t}\n\tprintNumbers(nums-1)\n\tfmt.Println(nums)\n}\n\nfunc main() {\n\tprintNumbers(5)\n}\n",
  "haskell": "printNumbers :: Int -> IO ()\nprintNumbers n = go 1\n  where\n    go :: Int -> IO ()\n    go current\n      | current > n = return ()\n      | otherwise = do\n        putStrLn $ show current\n        go (current + 1)\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter a number:\"\n  input <- getLine\n  let n = read input :: Int\n  printNumbers n",
  "php": "<?php\nfunction print1ToN($n) {\n print implode(\"\\n\", range(1, $n)); \n}\n\nprint1ToN(5);\n\n?>\n",
  "perl": "#!/usr/bin/perl\nuse strict;\nuse warnings;\n\n# Function to print numbers from 1 to n without loop\nsub print_numbers {\n    my ($n) = @_;\n\n    # Base case\n    if ($n == 0) {\n        return;\n    }\n\n    # Recursive call\n    print_numbers($n - 1);\n\n    # Print the current number\n    print \"$n \";\n}\n\n# Main Program\nprint \"Enter a number: \";\nmy $num = <STDIN>;\nchomp $num;\n\n# Error handling for invalid input\nif ($num !~ /^\\d+$/ || $num < 1) {\n    print \"Please enter a positive integer.\\n\";\n} else {\n    print_numbers($num);\n    print \"\\n\";\n}\n",
  "python": "def print_numbers(n: int) -> None:\n    if n <= 0:\n        return\n\n    print_numbers(n - 1)\n\n    print(n)\n\n\nuser_input = int(input(\"Enter the value for n: \"))\nprint_numbers(user_input)\n",
  "r": "printNumbers <- function(n) {\n  \n  numbers <- seq(1, n)\n  \n  \n  cat(\"Output:\", numbers, \"\\n\")\n}\n\n\nn <- 5\nprintNumbers(n)\n",
  "rust": "fn print_numbers(n : i32){\n    if n>0 {\n        print_numbers(n-1);\n        println!(\"{}\", n);\n    }\n}\n\nfn main(){\n    let n = 5;\n    print_numbers(n);\n}",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}