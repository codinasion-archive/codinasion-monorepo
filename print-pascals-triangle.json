{
  "slug": "print-pascals-triangle",
  "title": "Print Pascals Triangle",
  "c": "#include<stdio.h>\nvoid printPascal(int n)\n{\n  // An auxiliary array to store\n  // generated pascal triangle values\n  int arr[n][n];\n    \n  // Iterate through every line and \n  // print integer(s) in it\n  for (int line = 0; line < n; line++)\n  {\n    // Every line has number of integers\n    // equal to line number\n    for (int i = 0; i <= line; i++)\n    {\n      // First and last values in \n      // every row are 1\n      if (line == i || i == 0)\n        arr[line][i] = 1;\n        \n      // Other values are sum of values \n      // just above and left of above\n      else\n        arr[line][i] = (arr[line - 1][i - 1] + \n                        arr[line - 1][i]);\n      printf(\"%d \", \n              arr[line][i]);\n    }\n    printf(\"\\n\");\n  }\n}\n  \n// Driver code\nint main()\n{\n  int n = 5;\n  printPascal(n);\n  return 0;\n}\n",
  "c-plus-plus": "#include<iostream>\n#include<iomanip>\nusing namespace std;\nlong fact(long n){\n   int i, fact = 1;\n   for(i = n; i>1; i--)\n      fact *= i;\n   return fact;//factorial of given number\n}\nlong nCr(long n, long r){\n   long nume = 1, i;\n   for(i = n; i>r; i--)\n      nume *= i;\n   return long(nume/fact(n-r));//generate result of nCr\n}\nvoid genPascalsTriangle(long n){\n   for(int i = 0; i<n; i++){\n      for(int j = 0; j<(n-i-1); j++)\n         cout <<setw(3)<< \" \";//printing space to show triangular form\n      for(int j = 0; j<(i+1); j++)\n         cout <<setw(3)<< nCr(i, j) <<setw(3)<< \" \";\n      cout << endl;\n   }\n}\nmain(){\n   int n;\n   cout << \"Enter Number of lines: \"; cin >> n;\n   genPascalsTriangle(n);\n}\n",
  "c-sharp": "using System;\n\nnamespace PascalTriangle {\n   class PascalTriangle {\n      public static void Main() {\n         int rows = 5, val = 1, blank, i, j;\n         Console.WriteLine(\"Pascal's triangle\");\n         for(i = 0; i<rows; i++) {\n            for(blank = 1; blank <= rows-i; blank++)\n            Console.Write(\" \");\n            for(j = 0; j <= i; j++) {\n               if (j == 0||i == 0)\n               val = 1;\n               else\n               val = val*(i-j+1)/j;\n               Console.Write(val + \" \");\n            }\n            Console.WriteLine();\n         }\n      }\n   }\n}\n",
  "java": "/**\n * CONTRIBUTOR: JASMIN, RAMON EMMIEL P.\n * COUNTRY: PHILIPPINES\n * DATE: FEBRUARY 14, 2023\n */\n\npublic class PrintPascalTriangle{\n    public static void main(String[] args) {\n        pascalTriangle(5);\n    }\n\n    public static void pascalTriangle(int rows){\n        for (int line = 1; line <= rows; line++) {\n            for (int j = 0; j <= rows - line; j++) {\n                System.out.print(\" \");\n            }\n            int C = 1;\n            for (int i = 1; i <= line; i++) {\n                System.out.print(C + \" \");\n                C = C * (line - i) / i;\n            }\n            System.out.println();\n        }\n    }\n}",
  "javascript": "function pascalTriangle(num) {\n  const arr = [];\n\n  for (let i = 0; i < num; i++) {\n    const row = [1];\n\n    for (let j = 1; j < i; j++) {\n      row.push(arr[i - 1][j - 1] + arr[i - 1][j]);\n    }\n\n    if (i > 0) row.push(1);\n\n    arr.push(row);\n  }\n\n  return arr;\n}\n\nconsole.log(pascalTriangle(5));\n",
  "kotlin": "import java.util.*\n\nfun printPascalTriangle(n: Int) {\n    val triangle = Array(n) { IntArray(it + 1) }\n\n    for (i in 0 until n) {\n        for (j in 0..i) {\n            if (j == 0 || j == i) {\n                triangle[i][j] = 1\n            } else {\n                triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j]\n            }\n        }\n    }\n\n    val maxWidth = n * 2\n    for (i in 0 until n) {\n        val spaces = \" \".repeat((maxWidth - (i * 2 + 1)) / 2)\n        print(spaces)\n        for (j in 0..i) {\n            print(\"${triangle[i][j]} \")\n        }\n        println()\n    }\n}\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    val n = scanner.nextInt()\n    println(\"Input  : $n\")\n    println(\"Output : \")\n    printPascalTriangle(n)\n}\n",
  "ruby": "def print_pascals_triangle(n)\n    triangle = []\n  \n    #Generates Pascal's triangle\n    (0...n).each do |row|\n        #Creates an empty array for the current row  \n        triangle[row] = []  \n        (0..row).each do |col|\n            if col.zero? || col == row\n            #Sets the boundary elements to 1  \n            triangle[row][col] = 1\n            else\n            #Calculates the current element by summing the two elements above it\n            triangle[row][col] = triangle[row - 1][col - 1] + triangle[row - 1][col]\n            end\n        end\n    end\n  \n    #Prints Pascal's triangle\n    triangle.each do |row|\n        #Adds leading spaces to align rows based on the number of elements  \n        print ' ' * (n - row.length)\n        row.each do |num|\n            #Prints each number followed by a space\n            print \"#{num} \"\n        end\n        #Moves to the next line after printing a row\n        puts  \n    end\nend\n  \n#Test\nn = 5\nprint_pascals_triangle(n)\n",
  "typescript": "function pascalTriangle(num: number) {\n  const arr = [];\n\n  for (let i = 0; i < num; i++) {\n    const row = [1];\n\n    for (let j = 1; j < i; j++) {\n      row.push(arr[i - 1][j - 1] + arr[i - 1][j]);\n    }\n\n    if (i > 0) row.push(1);\n\n    arr.push(row);\n  }\n\n  return arr;\n}\n\nconsole.log(pascalTriangle(5));\n",
  "description": "\n## Write a program to print pascal's triangle\n\nPascal's triangle is a triangular array of the binomial coefficients. Write a function that takes an integer value `n` as input and prints first `n` lines of the Pascal's triangle.\n\n```txt\nInput  : 5\n\nOutput :\n        1\n       1 1\n      1 2 1\n     1 3 3 1\n    1 4 6 4 1\n```\n\n---\n",
  "trackId": 3988,
  "lastUpdated": "2024-03-23T06:48:37Z",
  "contributors": [
    "harshraj8843",
    "Sheventon",
    "kenroulier"
  ],
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc PrintPascalTriangle(n int) {\n\tfmt.Print(strings.Repeat(\" \", (n-1)*3))\n\tfmt.Printf(\"%6d \\n\", 1)\n\n\tprev_row := []int{1}\n\tfor i := 1; i < n; i++ {\n\t\tnew_row := make([]int, i+1, i+1)\n\t\tnew_row[0] = 1\n\t\tnew_row[i] = 1\n\n\t\tfor j := 1; j < i; j++ {\n\t\t\tnew_row[j] = prev_row[j-1] + prev_row[j]\n\t\t}\n\n\t\tfmt.Print(strings.Repeat(\" \", (n-i-1)*3))\n\t\tfor j := 0; j < i+1; j++ {\n\t\t\tfmt.Printf(\"%6d \", new_row[j])\n\t\t}\n\t\tfmt.Println()\n\n\t\tprev_row = new_row\n\t}\n}\n\nfunc main() {\n\tvar input int\n\tfmt.Scan(&input)\n\tPrintPascalTriangle(input)\n}\n",
  "php": "<?php\n\n    echo \"Output :\\n\\n\";\n\n    $rows = 5;\n\n    for ($i = 0; $i < $rows; $i++) {\n        $num = 1;\n        \n        for ($j = $rows; $j > $i; $j--) {\n            // Adds spacing around the triangle to get a nice visual representation\n            echo \" \";\n        }\n\n        for ($k = 0; $k <= $i; $k++) {\n            echo \"$num\";\n\n            if ($k < $i) {\n                // Adds spacing around the triangle to get a nice visual representation\n                echo \" \";\n            }\n            $num = $num * ($i - $k) / ($k + 1);\n        }\n        \n        echo \"\\n\";\n    }\n?>\n",
  "perl": "use strict;\nuse warnings;\n\nsub fact {\n  my $n = shift;\n  return 1 if $n < 1;\n  return $n * fact($n - 1);\n}\n\nsub n_over_k {\n  my $n = shift;\n  my $k = shift;\n  return fact($n) / ( fact($k) * fact($n - $k) );\n}\n\nsub pascal_row {\n  my $n = shift;\n  return map { n_over_k($n - 1, $_) } (0 .. $n - 1);\n}\n\nmy $n = shift || 5;\n\nmy $max = 0;\nmap { $max = $_ if $_ > $max } pascal_row($n);\nmy $maxw = length('' . $max);\n$maxw += ($maxw + 1) % 2;\n\nforeach my $i (1..$n) {\n  print ' ' x ( ( $maxw + 1 ) * ($n - $i) / 2 );\n  foreach my $j ( pascal_row($i) ) {\n    printf \"%${maxw}d \", $j;\n  }\n  print \"\\n\";\n}\n",
  "python": "n = int(input())\ntriangle = [[1], [1, 1], [1, 2, 1]]\nfor i in range(4, n + 1):\n    line = [1]\n    for j in range(i - 2):\n        line.append(triangle[i - 2][j] + triangle[i - 2][j + 1])\n    line.append(1)\n    triangle.append(line)\n\nfor line in triangle[:n]:\n    print(\"\")\n    for number in line:\n        print(number, end=\" \")\n",
  "rust": "//Rust program to print pascal's triangle\n//\n//Pascal's triangle is a triangular array of the binomial coefficients. Write a function that takes an\n// integer value n as input and prints first n lines of the Pascal's triangle.\n//\n//Input  : 5\n//\n//Output : \n//        1\n//       1 1\n//      1 2 1\n//     1 3 3 1\n//    1 4 6 4 1\n\nuse std::io;\n\nfn print_pascals_triangle(levels: u32)\n{\n\n\t// outer loop to go through all the levels\n  \tfor row in 0..levels {\n\n    \t\tlet mut print_num = 1;\t//start every row with \"1\"\n    \n    \t\t//print spaces out before row based on num of levels\n\n    \t\tfor _j in 1..2*(levels-1-row)+1 {\n      \t\tprint!(\" \");\n    \t\t}\n    \n    \t\t// calculate binomial coefficients ==> p = p * ((row-col)/(col+1))\n\n    \t\tfor calc_col in 0..row+1 {\n      \t\t\tprint!(\"{:3} \", print_num);\n      \t\t\tprint_num = print_num * (row-calc_col)/(calc_col+1);\n    \t\t}\n    \n    \t\tprintln!(); //insert a newline to start the next line to print\n  \t}\n}\n\nfn main() {\n\n\t// the input string and this main function can be removed. This is simply for testing\n\n\tprintln!(\"Enter the number of levels to print\");\n\tlet mut input_num = String::new();\n\tlet _rtrn = io::stdin().read_line(&mut input_num);\n\tlet n: u32 = input_num.trim().parse().expect(\"Input not an integer\");\t\n\t\t\n\t// example of how to call the function and print out the results of the inverted pyramid.\n    \tprint_pascals_triangle(n);\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "typescript",
    "go",
    "php",
    "perl",
    "python",
    "rust"
  ]
}