{
  "slug": "convert-binary-to-octal",
  "title": "Convert Binary To Octal",
  "c": "#include <stdio.h>\n#include <string.h>\n\n// This gives value of char in decimal\nint NumberCharToValue(char ch, int base)\n{\n    if (ch >= '0' && ch <= '9')\n    {\n        return (int)(ch - '0');\n    }\n    // next will be A,B,C....\n    return ((int)(ch - 'A') + 10);\n}\n// This gives char of value in decimal\nchar NumberValueToChar(int num, int base)\n{\n    if (num <= 9)\n    {\n        return (char)('0' + num);\n    }\n    // num will be 10,11,12 ...\n    return (char)(num - 10 + 'A');\n}\n// idea is to convert input to decimal then from decimal to output\nvoid convertNumberSystem(char *input, char *output, int fromBase, int toBase)\n{\n    // convert input to decimal\n    int inputLength = strlen(input);\n    long long decimal = 0, digitPower = 1;\n\n    for (int i = inputLength - 1; i >= 0; i--)\n    {\n        decimal += NumberCharToValue(input[i], fromBase) * digitPower;\n        digitPower *= fromBase;\n    }\n    // convert decimal to reversed output\n    int outputIndex = 0;\n    while (decimal != 0)\n    {\n        output[outputIndex++] = NumberValueToChar(decimal % toBase, toBase);\n        decimal /= toBase;\n    }\n\n    // reverse the output to get actual output\n    for (int i = 0; i < outputIndex / 2; i++)\n    {\n        int temp = output[i];\n        output[i] = output[outputIndex - i - 1];\n        output[outputIndex - i - 1] = temp;\n    }\n}\n\nint main()\n{\n\n    char input[10000], output[10000];\n\n    scanf(\"%s\", input);\n\n    convertNumberSystem(input, output, 2, 8); // This function can convert from a number from any base to another base\n\n    printf(\"%s\\n\", output);\n\n    return 0;\n}",
  "c-plus-plus": "#include <iostream>\n//#include <cmath>\n\nusing namespace std;\n\nint  convertBinarytoOctal(long long binaryNumber)\n{\n    int octalNumber = 0, decimalNumber = 0, i = 0;\n\t//Converting Binary to Decimal\n    while(binaryNumber != 0) {\n    \tint remainder = binaryNumber%10;\n    \tif(remainder != 0 && remainder != 1) return -1;\n        decimalNumber += remainder * (1<<i);\n        binaryNumber/=10;\n        i++;\n    }\n\n    i = 1;\n\t//Converting  Decimal to Octal\n    while (decimalNumber != 0)\n    {\n        octalNumber += (decimalNumber % 8) * i;\n        decimalNumber /= 8;\n        i *= 10;\n    }\n\n    return octalNumber;\n}\n\nint main()\n{\n    long long binary=0;\n\n    cout << \"Enter a binary number: \";\n    cin>>binary;\n    \n    int octal = convertBinarytoOctal(binary);\n    if(octal!=-1)\n    \tcout<<\"binary \"<<binary<<\" = \"<<octal<<\" in octal\"<<endl;\n\telse \n\t\tcout<<binary<<\" is not a binary number!!\"<<endl;\n    return 0;\n}\n\n\n",
  "c-sharp": "using System;  \npublic class Binary\n{  \n    public static void Main()\n{       int n1, n,p=1;\n\t    int dec=0,i=1,j,d;\n        int octno=0;\n\t\t\n\n\tConsole.Write(\"Enter a binary number : \");\n    n = Convert.ToInt32(Console.ReadLine());\t\n\tn1=n;\n\tfor (j=n;j>0;j=j/10)\n\t{  \n          d = j % 10;\n            if(i==1)\n                  p=p*1;\n            else\n                 p=p*2;\n\n\t   dec=dec+(d*p);\n\t   i++;\n\t}\n \n     i=1;\n\n      for(j=dec;j>0;j=j/8)\n       {\n        octno=octno+(j % 8)*i;\n        i=i*10;\n        n=n/8;\n       }\n   \n        Console.Write(\"\\nThe equivalent Octal number : {1} \\n\\n\",n1,octno);\n}\n}\n",
  "java": "import java.util.Scanner;\n\npublic class ConvertBinaryToOctal{\n    public static void main(String[] args){\n        Scanner input = new Scanner(System.in);\n\n        System.out.println(\"Enter a binary number\");\n        String binaryNum = input.nextLine();\n\n        int decimalNum = Integer.parseInt(binaryNum, 2);\n        String OctalNum = Integer.toOctalString(decimalNum);\n\n        System.out.println(\"Octal Number    :       \" + OctalNum);\n\n        input.close();\n    }\n} \n",
  "javascript": "function binaryToOctal(num) {\n  let octalValue = parseInt(num, 2).toString(8);\n  return octalValue;\n}\n\nbinaryToOctal(1010);\n\nconsole.log(\"Binary to Octal\", binaryToOctal(1010));\n",
  "kotlin": "fun main() {\n\n    val n: Long = 101001\n\n    var binary = n\n    var octal = 0\n    var decimal = 0\n\n    var i = 0\n\n    while (binary.toInt() != 0) {\n        decimal += (binary % 10 * Math.pow(2.0, i.toDouble())).toInt()\n        ++i\n        binary /= 10\n    }\n\n    i = 1\n\n    while (decimal != 0) {\n        octal += decimal % 8 * i\n        decimal /= 8\n        i *= 10\n    }\n\n    println(\"$n = $octal\")\n}",
  "ruby": "def binary_to_decimal(binary)\n  decimal = 0\n  binary.reverse.each_char.with_index do |bit, index|\n    decimal += bit.to_i * (2**index)\n  end\n  return decimal\nend\n\ndef decimal_to_octal(decimal)\n  octal = ''\n  while decimal > 0\n    remainder = decimal % 8\n    octal = remainder.to_s + octal\n    decimal /= 8\n  end\n  return octal\nend\n\nputs \"Enter a binary number: \"\nbinary_number = gets.chomp\n\nif binary_number.match(/^[01]+$/)\n  decimal_number = binary_to_decimal(binary_number)\n  octal_number = decimal_to_octal(decimal_number)\n  puts \"Octal equivalent: #{octal_number}\"\nelse\n  puts \"Invalid binary input. Please enter a valid binary number.\"\nend\n",
  "swift": "import Foundation\n\nfunc binaryToOctal(_ binaryString: String) -> String {\n    guard let decimalValue = Int(binaryString, radix: 2) else {\n        return \"Invalid binary number\"\n    }\n    return String(decimalValue, radix: 8)\n}\n\n// Example\nlet binaryNumber = \"1010\"\nlet octalNumber = binaryToOctal(binaryNumber)\nprint(\"Binary \\(binaryNumber) in octal is \\(octalNumber)\")\n",
  "typescript": "const binaryToDecimal = (input: number): number => {\n  return parseInt(input.toString(), 2);\n};\n\nexport const binaryToOctal = (input: number): number => {\n  const decimal = binaryToDecimal(input);\n  return Number(decimal.toString(8));\n};\n",
  "description": "\n## Write a program to convert binary to octal\n\nBinary is a base-2 number system. It uses only two digits: 0 and 1. The digits are called bits. A bit is the smallest unit of information in a computer. A bit can be either 0 or 1. A bit can be used to represent a single value, such as 0 or 1, or it can be used to represent a single state, such as on or off.\n\nOctal is a base-8 number system. It uses only eight digits: 0, 1, 2, 3, 4, 5, 6, and 7. The digits are called octits. An octit is the smallest unit of information in a computer. An octit can be used to represent a single value, such as 0, 1, 2, 3, 4, 5, 6, or 7, or it can be used to represent a single state, such as on or off.\n\nTo convert a binary number to octal, we can use the following algorithm:\n\n1. Convert the binary number to decimal.\n2. Convert the decimal number to octal.\n\n```txt\nInput  : 1010\nOutput : 12\n```\n\n---\n",
  "trackId": 508,
  "lastUpdated": "2024-03-20T17:31:10Z",
  "contributors": [
    "bulutg",
    "MadhuS-1605",
    "anandfresh",
    "AshitaSingamsetty",
    "harshraj8843",
    "RiteshK-611",
    "AdityaNarayanPradhan",
    "roshan798",
    "pokharel-nishan",
    "joao-vitor-souza",
    "greeshma-d",
    "vishal2376",
    "iresh96"
  ],
  "julia": "println(\"Enter a binay number: \") \nx = readline()\ny = parse(Int, x, base=2)\ny = string(y, base=8)\nprintln(\"Octal of \", x, \": \", y)",
  "go": "package main\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\nfunc binaryToOctal(binary string) string {\n\tdecimal, _ := strconv.ParseInt(binary, 2, 64)\n\treturn strconv.FormatInt(decimal,8)\n}\nfunc main() {\n\tvar binaryInput string\n\tfmt.Print(\"Input : \")\n\tfmt.Scanln(&binaryInput)\n\toctalOutput := binaryToOctal(binaryInput)\n\tfmt.Print(\"Output : \", octalOutput)\n}",
  "php": "<?php\n\n$binary = readline();\n$possibleChars = [\"0\", \"1\"];\n\n$decimal = 0;\n\nforeach (str_split($binary) as $key => $value) {\n    if (!in_array($value, $possibleChars)) {\n        exit(\"Input contains an invalid value: \" . $value . \"\\n\");\n    } else {\n        $decimal += $value * pow(2, (int) (strlen($binary) - $key - 1));\n    }\n}\n\n$octal = \"\";\n\nwhile (true) {\n    $quocient = floor($decimal / 8);\n    if ($quocient < 1) {\n        $octal .= $decimal;\n        break;\n    }\n    $remainder = $decimal % 8;\n    $decimal = $quocient;\n    $octal .= $remainder;\n}\n\necho strrev($octal) . \"\\n\";\n\n?>",
  "perl": "print \"Enter the binary value : \";\nmy $bin_value = oct(\"0b\".<STDIN>);\nprintf(\"Equivalent Octal value : %o\\n\",$bin_value);\n",
  "python": "binary_number = int(input(\"Enter the binary number : \"))\r\n\r\ni, j, b, octal = 0, 0, 0, 0\r\nwhile binary_number != 0:\r\n    b += (binary_number % 10) * (2**i)\r\n    i += 1\r\n    binary_number = binary_number // 10\r\n\r\nwhile b != 0:\r\n    octal += (b % 8) * (10**j)\r\n    j += 1\r\n    b = b // 10\r\n\r\nprint(\"The octal conversion of binary number is \", octal)\r\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "go",
    "php",
    "perl",
    "python"
  ]
}