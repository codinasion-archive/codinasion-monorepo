{
  "slug": "print-reverse-of-a-number",
  "title": "Print Reverse Of A Number",
  "c": "#include <stdio.h>\n\nint reverse(int n) {\n\tint reverseNumber = 0;\n\twhile(n) {\n\t\treverseNumber = reverseNumber * 10 + (n%10);\n\t\tn/=10;\n\t}\n\treturn reverseNumber;\n}\nint main(){\n\tint n;\n\tprintf(\"Enter a number :\");\n\tscanf(\"%d\",&n);\n\tprintf(\"Number in reverse : %d\", reverse(n));\n}",
  "c-plus-plus": "#include<iostream>\nusing namespace std;\nint reverse(int n) {\n\tint reverseNumber = 0;\n\twhile(n) {\n\t\treverseNumber = reverseNumber * 10 + (n%10);\n\t\tn/=10;\n\t}\n\treturn reverseNumber;\n}\nint main(){\n\tint n;\n\tcout<<\"Enter a number :\";\n\tcin>>n;\n\tcout<<\"Number in reverse : \"<<reverse(n)<<endl;\n}\n\n",
  "c-sharp": "using System;  \n  public class ReverseInteger \n   {  \n     public static void Main(string[] args)  \n      {  \n       int  n, reverse=0, rem;           \n       Console.Write(\"Enter a number: \");      \n       n= int.Parse(Console.ReadLine());     \n       while(n!=0)      \n       {      \n        rem=n%10;        \n        reverse=reverse*10+rem;      \n        n/=10;      \n       }      \n       Console.Write(\"Reversed Number: \"+reverse);       \n    }  \n  }  \n",
  "java": "import java.util.*;\nimport java.io.*;\nimport java.text.*;\npublic class Main\n{\n    public static int ReverseNo(int n){\n        int rev=0;\n        for(int i=n;i>0;i=i/10){\n            int mod=i%10;\n            rev=rev*10+mod;\n        }\n        return rev;\n    }\n    \n\tpublic static void main(String[] args) {\n\t    Scanner sc=new Scanner(System.in);\n\t    int n=sc.nextInt();\n\t\tSystem.out.println(ReverseNo(n));\n\t}\n}\n\n// Contributed by Raghav Garg (@grraghav120)\n",
  "javascript": "let rev = 0;\nlet num = 123;\nlet lastDigit;\n\nwhile (num != 0) {\n  lastDigit = num % 10;\n  rev = rev * 10 + lastDigit;\n  num = Math.floor(num / 10);\n}\n\nconsole.log(+rev);\n",
  "kotlin": "import java.util.Scanner\n\nfun main() {\n    print(\"Enter number : \")\n    println()\n    var min = readLine()\n\n    println(\"Reversed Number: \" + ReverseNumber(min!!.toInt()))\n\n}\n\nprivate fun ReverseNumber(num: Int): Int {\n    var reversed = 0\n    var num2= num\n\n    while (num2 != 0) {\n        val digit = num2 % 10\n        reversed = reversed * 10 + digit\n        num2 /= 10\n    }\n\n    return  reversed\n}\n",
  "ruby": "# reverse of a number\nputs \"Write a number to reverse: \"\nnumber_input = gets.chomp\nresult = number_input.to_s.reverse.to_i\n\nputs \"Here's your reversed number: #{result}\"\n",
  "swift": "import Swift\nimport Foundation\n\nprint(\"Enter a number\")\nvar number = Int(readLine()!)!\nvar reverseNum = 0\n\nprint(\"Original number: \", number)\n\nwhile(number != 0){\n   reverseNum = reverseNum * 10\n   reverseNum = reverseNum + number % 10\n   number = number/10\n}\nprint(\"Reversed number: \", reverseNum)\n",
  "typescript": "const reverseNumber = (n: number) => {\n  const reversedNumber = n.toString().split(\"\").reverse().join(\"\");\n\n  return parseFloat(reversedNumber) * Math.sign(n);\n};\n\nconsole.log(reverseNumber(123));\n",
  "description": "\n## Write a program to print reverse of a number\n\nReverse of a number is the number obtained by reversing the digits of the original number. For example, the reverse of 123 is 321. The reverse of 100 is 1. The reverse of 1000 is 1.\n\n```txt\nInput  : 123\nOutput : 321\n```\n\n---\n",
  "trackId": 3468,
  "lastUpdated": "2024-06-16T16:59:29Z",
  "contributors": [
    "harshraj8843",
    "Varshitha-vankadaru",
    "anandfresh",
    "PavanKumarCB",
    "esivakumar26",
    "roshan798",
    "lukaszmielczarekdev",
    "hi-Kartik2004",
    "rafaover",
    "rksp25",
    "joao-vitor-souza",
    "devkansara",
    "grraghav120",
    "CodingWithHardik",
    "ba-ppp"
  ],
  "julia": "# Write a Julia program to print reverse of a number\n\nprintln(reverse(\"GFG\"))\nprintln(reverse(\"gfg\"))\nprintln(reverse(\"Geeks\"))\nprintln(reverse(\"GeeksforGeeks\"))\n",
  "scala": "object HelloWorld {\n\tdef main(args: Array[String]): Unit = {\n\t var num = scala.io.StdIn.readInt();\n\t \n\t if (num > 0) println(num.toString.reverse.toInt )\n\t else println(-1 * ((num * -1).toString.reverse.toInt))\n\t}\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc reverse(s string) string {\n\trns := []rune(s)\n\tfor i, j := 0, len(rns)-1; i < j; i, j = i+1, j-1 {\n\n\t\trns[i], rns[j] = rns[j], rns[i]\n\t}\n\n\treturn string(rns)\n}\n\nfunc main() {\n\n\tvar revnum string\n\n\tfmt.Print(\"Enter the Number to Reverse = \")\n\tfmt.Scanln(&revnum)\n\n\treverse := reverse(revnum)\n\n\tfmt.Println(\"The Reverse of the Given Number = \", reverse)\n}\n",
  "php": "<?php\n\t$num = readline('Enter a number: ');\n\t$x = 0;\n  $n =$num;\n   \n  while(floor($num))\n  {  \n    $mod = $num%10;\n    $x = $x * 10 + $mod;  \n    $num = $num/10;\n  }  \n  echo \"Reverse of $n is $x.\";\n?>\n",
  "perl": "use strict;\nuse warnings;\nuse 5.010;\n\nprint \"Please enter a number : \";\nmy $n = <STDIN>;\n$n=~s/0+$//;\nmy $u = reverse $n;\nprint \"Reverse of given number : \".$u;\n",
  "python": "def reverse_number(num):\n    # Convert the number to a string\n    str_num = str(num)\n\n    # Check if the number is negative\n    if str_num[0] == \"-\":\n        # Reverse the number part and keep the '-' sign at the front\n        reversed_num = int(\"-\" + str_num[:0:-1])\n    else:\n        # Reverse the string and convert it back to an integer\n        reversed_num = int(str_num[::-1])\n\n    return reversed_num\n\n\n# Example usage\nnumber = int(input(\"Enter a number to reverse: \"))\nreversed_number = reverse_number(number)\nprint(f\"The reversed number is: {reversed_number}\")\n",
  "rust": "fn main() {\n    let nums = 1000;\n\n    // convert number to string\n    let str_nums = nums.to_string();\n\n    // reverse the string\n    let rev_str = str_nums.chars().rev().collect::<String>();\n\n    // convert string to number\n    let result = rev_str.parse::<i32>().unwrap();\n    \n    println!(\"{}\", result);\n}",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "go",
    "php",
    "perl",
    "python",
    "rust"
  ]
}