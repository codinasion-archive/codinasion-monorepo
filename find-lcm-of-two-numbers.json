{
  "slug": "find-lcm-of-two-numbers",
  "title": "Find Lcm Of Two Numbers",
  "c": "#include <stdio.h>\n\nint find_gcd(int a,int b){\n    int gcd=0;\n    for(int i=1;i<=a && i<=b;i++){\n        if(a%i==0 && b%i==0) gcd=i;\n    }\n    return gcd;\n}\nint main(){\n    \n    int a,b,gcd=0;\n    scanf(\"%d %d\",&a,&b);\n    gcd=find_gcd(a,b);\n    int res=(a*b)/gcd;\n    printf(\"%d\",res);\n    return 0;\n}\n\n//Contributed by Raghav Garg",
  "c-plus-plus": "/*\nAuthor -> Abhinav Prabhat\nDate   -> 29-01-2023\n*/\n\n#include <iostream>\n\nusing namespace std;\n\nint hcf_calc(int a, int b)\n{\n\n    if (a == 0)\n    {\n        return b;\n    }\n    if (b == 0)\n    {\n        return a;\n    }\n\n    while (a != b)\n    {\n        if (a > b)\n        {\n            a -= b;\n        }\n\n        else\n        {\n            b -= a;\n        }\n    }\n\n    return a;\n}\n\nint main()\n{\n\n    int num1, num2;\n\n    cout << \"\\n\\nEnter two numbers whose LCM you want -> \";\n    cin >> num1 >> num2;\n\n    int hcf = hcf_calc(num1, num2);\n\n    int lcm = (num1 * num2) / hcf;\n\n    cout << \"\\n\\nLCM of \" << num1 << \" & \" << num2 << \" is -> \" << lcm << endl\n         << endl;\n    return 0;\n}",
  "c-sharp": "using System;  \npublic class Exercise45\n{  \n    public static void Main() \n{  \n    int i, n1, n2, max, lcm=1;  \n\tConsole.Write(\"\\n\\n\");\n    Console.Write(\"Determine the LCM of two numbers:\\n\");\n    Console.Write(\"-----------------------------------\");\n    Console.Write(\"\\n\\n\");\t\n    Console.Write(\"Input 1st number for LCM: \");  \n    n1 = Convert.ToInt32(Console.ReadLine());\t\n    Console.Write(\"Input 2nd number for LCM: \");  \n    n2 = Convert.ToInt32(Console.ReadLine());\t\n    max = (n1>n2) ? n1 : n2;  \n    for(i=max;  ; i+=max)  \n    {  \n        if(i%n1==0 && i%n2==0)  \n        {  \n            lcm = i;  \n            break;  \n        }  \n    }  \n    Console.Write(\"\\nLCM of {0} and {1} = {2}\\n\\n\", n1, n2, lcm);  \n }\n}\n",
  "java": "import java.util.Scanner;\n\npublic class findlcmoftwonumbers {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        System.out.print(\"Input : \");\n        int num1 = input.nextInt();\n        int num2 = input.nextInt();\n        int min = 0 ;\n        int max = 0;\n        if (num1<num2) {\n            min = num1;\n            max = num2;\n        }\n        else {\n            min = num2;\n            max = num1;\n        }\n        for (int i = 1; i < max+1; i++) {\n            if ((min*i)%max==0) {\n                System.out.println(\"Output : \"+min*i);\n                break;\n            }\n\n        }\n    }\n}\n",
  "javascript": "let FindLcmOfTwoNumbers = (n1, n2) => {\n  let lar = Math.max(n1, n2);\n  let small = Math.min(n1, n2);\n\n  let i = lar;\n\n  while (i % small !== 0) {\n    i += lar;\n  }\n\n  return i;\n};\n\nconst n1 = 12;\nconst n2 = 18;\nconsole.log(\"Inputs  :\", n1, n2);\nconsole.log(\"Output :\", FindLcmOfTwoNumbers(n1, n2));\n",
  "kotlin": "import java.util.Scanner\n\nfun main(args: Array<String>) {\n  val scanner = Scanner(System.`in`)\n  val input1 = scanner.nextInt();\n  val input2 = scanner.nextInt();\n  var myResult: Int\n\n   myResult = if (input1 > input2) input1 else input2\n\n   while (true) {\n      if (myResult % input1 == 0 && myResult % input2 == 0) {\n         println(\"The LCM is $myResult.\")\n         break\n      }\n      ++myResult\n   }\n}\n",
  "ruby": "def findLCMOfTwoNumbers num1, num2\n    puts num1.lcm(num2)\nend\n\nfindLCMOfTwoNumbers 12, 18",
  "swift": "import Swift\nimport Foundation\n\n// Function to find gcd of two numbers\nfunc findGCD(_ num1: Int, _ num2: Int) -> Int {\n   var x = 0\n\n   // Finding maximum number\n   var y: Int = max(num1, num2)\n\n   // Finding minimum number\n   var z: Int = min(num1, num2)\n\n   while z != 0 {\n      x = y\n      y = z\n      z = x % y\n   }\n   return y\n}\n\n// Function to find lcm of two numbers\nfunc findLCM(n1: Int, n2: Int)->Int{\n   return (n1 * n2/findGCD(n1, n2))\n}\n\n// Calling Function\nvar result = findLCM(n1: 12, n2:18)\nprint(\"LCM of 12 and 18 is \",result)\n",
  "typescript": "const number1: number = 10;\nconst number2: number = 12;\n\nfunction findLcm(number1: number, number2: number): number {\n  let temp: number = 0;\n  let val1: number = number1;\n  let val2: number = number2;\n\n  // Find the greatest common denominator\n  while (val2) {\n    temp = val2;\n    val2 = val1 % val2;\n    val1 = temp;\n  }\n  const GCD: number = val1;\n\n  return (number1 * number2) / GCD;\n}\n\nfindLcm(number1, number2);\n",
  "description": "\n## Write a program to find lcm of two numbers\n\nLCM (Least Common Multiple) of two numbers is the smallest number which can be divided by both numbers. For example, the LCM of 15 and 20 is 60 and LCM of 10 and 15 is 30.\n\n```txt\nInput  : 12 18\nOutput : 36\n```\n\n---\n",
  "trackId": 1208,
  "lastUpdated": "2023-11-29T12:09:25Z",
  "contributors": [
    "VinayReddy-vr",
    "anandfresh",
    "harshraj8843",
    "AshitaSingamsetty",
    "esivakumar26",
    "jfinley6",
    "joao-vitor-souza",
    "Khushi260",
    "Vignesh-dev07",
    "grraghav120",
    "djharshit",
    "rahmat-dev",
    "nickdark",
    "Farelion"
  ],
  "scala": "def findLcm(number1: Int, number2: Int): Int = {\n  var temp = 0\n  var val1 = number1\n  var val2 = number2\n\n  while(val2 != 0) {\n    temp = val2\n    val2 = val1 % val2\n    val1 = temp\n  }\n  val GCM = val1\n\n  number1 * number2 / GCM\n}\n\nprint(findLcm(10, 12))",
  "go": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc gcd(a,b int) int{\n    if b == 0 {\n        return a\n    }\n    return gcd(b,a%b)\n}\nfunc main(){\n    var num1, num2 int\n    fmt.Print(\"Input 1st number for LCM : \")\n    fmt.Scanln(&num1)\n    fmt.Print(\"Input 2nd number for LCM : \")\n    fmt.Scanln(&num2)\n\n    lcm := (num1*num2)/gcd(num1,num2)\n    fmt.Print(\"Output : \",lcm)\n}",
  "php": "<?php\n\nfunction find_lcm_of_two_numbers($n1, $n2)\n{\n\tif ($n1 > $n2) {\n\t\t$temp = $n1;\n\t\t$n1 = $n2;\n\t\t$n2 = $temp;\n\t}\n\n\tfor ($i = 1; $i < ($n1 + 1); $i++) {\n\t\tif ($n1 % $i == 0 && $n2 % $i == 0)\n\t\t\t$gcd = $i;\n\t}\n\n\t$lcm = ($n1 * $n2) / $gcd;\n\treturn $lcm;\n}\n\necho find_lcm_of_two_numbers(12, 18);\n",
  "perl": "sub findLcm {    \n    my ($a, $b) = @_;    \n    my $greater = $a > $b ? $a : $b;   \n    my $lcm = $greater;    \n    while (1) {        \n        if ($lcm % $a == 0 && $lcm % $b == 0) {            \n            return $lcm;        \n            \n        }        \n        $lcm += $greater;    \n    }\n}\n\nprint \"Enter the first number : \";\nmy $a = <STDIN>;\nprint \"Enter the second number : \";\nmy $b = <STDIN>;\nmy $result = findLcm($a, $b);\nprint \"LCM of $a and $b is $result\\n\";\n",
  "python": "def findGCD(x, y):\n    while x != y:\n        if x > y:\n            x = x - y\n        elif x < y:\n            y = y - x\n    return x\n\n\ndef findLCM(x, y):\n    z = x * y\n    gcd = findGCD(x, y)\n    lcm = int(z / gcd)\n    return lcm\n\n\nx = int(input(\"n1: \"))\ny = int(input(\"n2: \"))\nprint(f\"LCM of {x} and {y} : {findLCM(x,y)}\")\n",
  "r": "# Function to find the GCD (Greatest Common Divisor) of two numbers\ngcd <- function(a, b) {\n  while (b != 0) {\n    remainder <- a %% b\n    a <- b\n    b <- remainder\n  }\n  return(a)\n}\n\n# Function to find the LCM (Least Common Multiple) of two numbers\nlcm <- function(a, b) {\n  return(abs(a * b) / gcd(a, b))\n}\n\n# Example usage\nnumber1 <- 4\nnumber2 <- 5\nlcmResult <- lcm(number1, number2)\n\ncat(\"LCM of\", number1, \"and\", number2, \"is\", lcmResult, \"\\n\")\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "scala",
    "go",
    "php",
    "perl",
    "python",
    "r"
  ]
}