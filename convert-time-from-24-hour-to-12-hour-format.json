{
  "slug": "convert-time-from-24-hour-to-12-hour-format",
  "title": "Convert Time From 24 Hour To 12 Hour Format",
  "c-plus-plus": " \r\n#include <bits/stdc++.h>\r\n \r\nusing namespace std;\r\n \r\n// Convert Function which takes in\r\n// 24hour time and convert it to\r\n// 12 hour format\r\nvoid convert12(string str)\r\n{\r\n    // Get Hours\r\n    int h1 = (int)str[0] - '0';\r\n    int h2 = (int)str[1] - '0';\r\n \r\n    int hh = h1 * 10 + h2;\r\n \r\n    // Finding out the Meridien of time\r\n    // ie. AM or PM\r\n    string Meridien;\r\n    if (hh < 12) {\r\n        Meridien = \"AM\";\r\n    }\r\n    else\r\n        Meridien = \"PM\";\r\n \r\n    hh %= 12;\r\n \r\n    // Handle 00 and 12 case separately\r\n    if (hh == 0) {\r\n        cout << \"12\";\r\n \r\n        // Printing minutes and seconds\r\n        for (int i = 2; i < 8; ++i) {\r\n            cout << str[i];\r\n        }\r\n    }\r\n    else {\r\n        cout << hh;\r\n        // Printing minutes and seconds\r\n        for (int i = 2; i < 8; ++i) {\r\n            cout << str[i];\r\n        }\r\n    }\r\n \r\n    // After time is printed\r\n    // cout Meridien\r\n    cout << \" \" << Meridien << '\\n';\r\n}\r\n \r\nint main()\r\n{\r\n    // 24 hour format\r\n    string str = \"12:05:45\";\r\n    convert12(str);\r\n    return 0;\r\n}",
  "c-sharp": "using System;\nclass GFG\n{\n  \nstatic void TwelveHourFormat(string str)\n{\n    int h1 = (int)str[0] - '0';\n    int h2 = (int)str[1]- '0';\n  \n    int hh = h1 * 10 + h2;\n  \n    string Meridien;\n    if (hh < 12) {\n        Meridien = \"AM\";\n    }\n    else\n        Meridien = \"PM\";\n  \n    hh %= 12;\n\n    if (hh == 0) {\n        Console.Write(\"12\");\n\n        for (int i = 2; i < 8; ++i) {\n        Console.Write(str[i]);\n        }\n    }\n    else {\n        Console.Write(hh);\n        for (int i = 2; i < 8; ++i) {\n        Console.Write(str[i]);\n        }\n    }\n\nConsole.WriteLine(\" \"+Meridien);\n}\n  \npublic static void Main()\n{\n    string str = \"12:05:45\";\n    TwelveHourFormat(str);\n  \n}\n}\n",
  "f-sharp": "let convertTo12HourFormat (time : string) =\n    let parts = time.Split(':')\n    let hour = int parts.[0]\n    let minute = parts.[1]\n    let second = parts.[2]\n    let meridiem = \n        if hour < 12 then \"AM\"\n        else \"PM\"\n    let hourIn12HourFormat = \n        if hour = 0 then 12\n        elif hour > 12 then hour - 12\n        else hour\n    sprintf \"%d:%s:%s%s\" hourIn12HourFormat minute second meridiem\n\nlet conversion = convertTo12HourFormat \"12:05:45\"\nprintfn \"%s\" conversion\n",
  "java": "import java.util.Scanner;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class convert_time_from_24_hour_to_12_hour_format {\n\n    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter hours: \");\n        String input = sc.next();\n        String[] time = input.split(\":\");\n        sc.close();\n        String twentyFourHoursTime = \"\";\n        try {\n            switch(time.length) {\n                case 1: \n                    twentyFourHoursTime = time[0]+\":00:00\";\n                    break;\n                case 2: \n                    twentyFourHoursTime = time[0]+\":\"+time[1]+\":00\";\n                    break;\n                default: \n                    twentyFourHoursTime = input;\n                    break;\n            }\n            SimpleDateFormat df = new SimpleDateFormat(\"HH:mm:ss\");\n            Date date = df.parse(twentyFourHoursTime);\n            System.out.println(\"Output : \" + new SimpleDateFormat(\"hh:mm:ssaa\").format(date));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
  "javascript": "function convertTime(time) {\n  let splitTime = time.split(\":\");\n  let hours = Number(splitTime[0]);\n  let minutes;\n  if (splitTime[1]) {\n    minutes = splitTime[1];\n  } else {\n    minutes = \"00\";\n  }\n  if (hours < Number(\"12\")) {\n    if (hours === Number(\"0\")) {\n      hours = \"12\";\n    }\n    return hours + \":\" + minutes + \" AM\";\n  } else if (hours === Number(\"12\")) {\n    return hours + \":\" + minutes + \" PM\";\n  } else {\n    hours = hours - \"12\";\n    if (hours === Number(\"12\")) {\n      return hours + \":\" + minutes + \" AM\";\n    }\n    return hours + \":\" + minutes + \" PM\";\n  }\n}\n\nconsole.log(convertTime(\"0:05\"));\nconsole.log(convertTime(\"1:45\"));\nconsole.log(convertTime(\"13\"));\nconsole.log(convertTime(\"1:24\"));\nconsole.log(convertTime(\"22\"));\n",
  "kotlin": "fun convertTo12HourFormat(time: String): String {\n    //Splits time into hours, minutes and seconds and extracts them\n    val parts = time.split(\":\")\n    val hour = parts[0].toInt()\n    val minute = parts[1]\n    val second = parts[2]\n\n    //Initializes the converted hour with original hour and the period as \"AM\"\n    var convertedHour = hour\n    var period = \"AM\"\n\n    //Sets period to \"PM\" if hour is greater or equal to 12\n    //Substracts 12 of hour if hour is greater than 12 to convert to 12-hour format\n    if (hour >= 12) {\n        period = \"PM\"\n        if (hour > 12) {\n            convertedHour -= 12\n        }\n    } \n    //Sets hour to 12 if the hour is 0 to convert to 12-hour format\n    else if (hour == 0) {\n        convertedHour = 12\n    }\n\n    //Formats the converted time into a string and returns this\n    val convertedTime = String.format(\"%02d:%s:%s%s\", convertedHour, minute, second, period)\n    return convertedTime\n}\n\nfun main() {\n    val time24Hour = \"12:05:45\"\n    val time12Hour = convertTo12HourFormat(time24Hour)\n    println(\"Input: $time24Hour\")\n    println(\"Output: $time12Hour\")\n}",
  "perl": "my $hour_24 =  <STDIN>; #stors\nmy ($hour , $minute, $second) = split(':', $hour_24);\nmy $time = ($hour > 11)? \"PM\" : \"AM\";\nif($hour > 12)\n{\n    $hour = $hour - 12;\n}\nprint \"Output: \",$hour,\":\",$minute,\":\",$second,$time;",
  "ruby": "require 'time'\n\nputs \"Add a 24h format time (hh:mm:ss): \"\nhour = gets.chomp\n\nputs Time.strptime(hour, \"%H:%M:%S\").strftime('%l:%M:%S %p')\n",
  "swift": "/**\n Converts time from 24h format into 12h format.\n\n This function takes a time between 00:00:00 and 23:59:59 and converts it into its corresponding time between 12:00:00 and 11:59:59, AM or PM.\n\n - Parameters:\n    - timeIn24H: A string holding the 24-hour-formatted time, e.g. \"15:46:13\".\n\n - Returns: A new Optional string holding the corresponding 12-hout-formatted time, e.g. \"3:46:13PM\", or nil if the input string is bad.\n\n - Note: This function does not change the original string.\n\n - Example:\n let timeIn12H = convert24hto12h(\"23:52:14\") // \"11:52:14PM\"\n - Author: Levent Ã‡elik\n - Since: December 2023\n - Version: 1.0\n */\n\nfunc convert24hto12h(_ timeIn24H: String) -> String? {\n    let time = timeIn24H.split(separator: \":\")\n    guard time.count == 3 else {\n        print(\"Invalid Input: (not HH:MM:SS).\")\n        return nil\n    }\n    guard let hour = Int(time[0]), hour >= 0 && hour <= 23 else {\n        print(\"Invalid Time: hour out of range (00:00:00 - 23:59:59).\")\n        return nil\n    }\n    guard let minute = Int(time[1]), minute >= 0 && minute <= 59 else {\n        print(\"Invalid Time: minute out of range (0 - 59).\")\n        return nil\n    }\n    guard let second = Int(time[2]), second >= 0 && second <= 59 else {\n            print(\"Invalid Time: second out of range (0 - 59).\")\n            return nil\n    }\n    if hour == 0 {\n        return \"12:\\(time[1]):\\(time[2])AM\"\n    }\n    if hour < 12 {\n            return \"\\(hour):\\(time[1]):\\(time[2])AM\"\n    }\n    if hour == 12 {\n            return \"\\(hour):\\(time[1]):\\(time[2])PM\"\n    }\n    return \"\\(hour-12):\\(time[1]):\\(time[2])PM\"\n}\n\n// Test Function\nfunc testConvert24hto12h() {\n    print(\"Testing convert24hto12h function\")\n\n    // Function to run a test case\n    func runTestCase(input: String, expectedOutput: String?) {\n        let actualOutput = convert24hto12h(input)\n        assert(actualOutput == expectedOutput, \"Test Failed: \\(input) should be \\(expectedOutput ?? \"nil\"), but was \\(actualOutput ?? \"nil\")\")\n    }\n\n    // Midnight and Noon Edge Cases\n    runTestCase(input: \"00:00:00\", expectedOutput: \"12:00:00AM\")\n    runTestCase(input: \"12:00:00\", expectedOutput: \"12:00:00PM\")\n\n    // Before Noon\n    runTestCase(input: \"01:30:45\", expectedOutput: \"1:30:45AM\")\n    runTestCase(input: \"11:59:59\", expectedOutput: \"11:59:59AM\")\n\n    // After Noon\n    runTestCase(input: \"13:00:00\", expectedOutput: \"1:00:00PM\")\n    runTestCase(input: \"23:45:30\", expectedOutput: \"11:45:30PM\")\n\n    // Boundary Times (Transition Between AM and PM)\n    runTestCase(input: \"12:00:01\", expectedOutput: \"12:00:01PM\")\n    runTestCase(input: \"11:59:59\", expectedOutput: \"11:59:59AM\")\n\n    // Invalid Inputs\n    runTestCase(input: \"24:00:00\", expectedOutput: nil)\n    runTestCase(input: \"12:60:00\", expectedOutput: nil)\n    runTestCase(input: \"00:00:60\", expectedOutput: nil)\n    runTestCase(input: \"Not a time\", expectedOutput: nil)\n\n    // Edge of Valid Range\n    runTestCase(input: \"23:59:59\", expectedOutput: \"11:59:59PM\")\n\n    print(\"All tests passed!\")\n}\n\n// Call the test function\ntestConvert24hto12h()\n\n\n",
  "typescript": "function convertTimeTo12Hours(time: string) {\n  const splitDate = time.split(\":\");\n  const parsedDate = parseInt(splitDate[0]);\n  const ampm = splitDate[2].replace(/[^a-zA-Z]+/g, \"\");\n  let convertedDate = 0;\n\n  if (ampm === \"PM\") {\n    if (parsedDate == 12) {\n      convertedDate = 12;\n    }\n    if (parsedDate > 12) {\n      console.log(\"true\");\n      convertedDate = parsedDate - 12;\n    }\n  }\n  if (ampm === \"AM\") {\n    if (parsedDate == 12) {\n      convertedDate = 0;\n    } else {\n      convertedDate = parsedDate;\n    }\n  }\n\n  console.log(convertedDate + `:${splitDate[1]}:${splitDate[2]}`);\n}\n\nconvertTimeTo12Hours(\"12:05:45PM\");\n",
  "description": "\n## Write a program to convert time from 24-hour to 12-hour format\n\n```txt\nInput  : 12:05:45\nOutput : 12:05:45PM\n```\n\n---\n",
  "trackId": 4286,
  "lastUpdated": "2024-01-06T10:06:42Z",
  "contributors": [
    "harshraj8843",
    "lookwhoshere99",
    "LeventCelik",
    "ShounaKulkarni",
    "SaideepKondur",
    "AshitaSingamsetty",
    "rsitters",
    "ddinh0411",
    "Preetiraj3697",
    "anandfresh",
    "rafaover",
    "hi-Kartik2004",
    "joao-vitor-souza",
    "Aditya449930",
    "reinem",
    "sarahloher",
    "greeshma-d"
  ],
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"strconv\"\n)\n\nfunc convertTimeTo12HourFormat(time string) string{\n\tparts := strings.Split(time, \":\")\n\thour := parts[0]\n\tmeridiem := \"AM\"\n\n\th, _ := strconv.Atoi(hour)\n\tif h>=12 {\n\t\tmeridiem = \"PM\"\n\t}\n\n\tif h := h%12 ; h==0{\n\t\th = 12\n\t}\n\n\treturn fmt.Sprintf(\"%02d:%s:%s%s\",h,parts[1],parts[2],meridiem)\n}\n\nfunc main(){\n\tvar time string\n\tfmt.Print(\"Input : \")\n\tfmt.Scanln(&time)\n\n\tconvertedTime := convertTimeTo12HourFormat(time)\n\tfmt.Println(\"Output : \",convertedTime)\n}",
  "haskell": "import Text.Printf (printf)\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter time in 24-hour format (HH:MM:SS):\"\n    input <- getLine\n    let result = convertTo12HourFormat input\n    case result of\n        Just time12 -> putStrLn $ \"Time in 12-hour format: \" ++ time12\n        Nothing     -> putStrLn \"Invalid input. Please enter time in the format HH:MM:SS.\"\n\nconvertTo12HourFormat :: String -> Maybe String\nconvertTo12HourFormat input = do\n    let components = map read $ splitOn ':' input\n    case components of\n        [hour, minute, second] | isValidTime hour minute second -> Just $ format12HourTime hour minute second\n        _                                                        -> Nothing\n\nisValidTime :: Int -> Int -> Int -> Bool\nisValidTime hour minute second =\n    hour >= 0 && hour <= 23 && minute >= 0 && minute <= 59 && second >= 0 && second <= 59\n\nformat12HourTime :: Int -> Int -> Int -> String\nformat12HourTime hour minute second =\n    let period = if hour < 12 then \"AM\" else \"PM\"\n        adjustedHour = if hour == 0 then 12 else if hour <= 12 then hour else hour - 12\n    in printf \"%02d:%02d:%02d %s\" adjustedHour minute second period\n\nsplitOn :: Eq a => a -> [a] -> [[a]]\nsplitOn _ [] = []\nsplitOn delimiter list =\n    let (first, rest) = break (== delimiter) list\n    in first : case rest of\n        []     -> []\n        (_:xs) -> splitOn delimiter xs\n",
  "php": "<?php\n\nfunction twelveHourFormat($time) {\n $date = new DateTime($time);\n return $date->format('h:i:s A') ;\n}\n\necho twelveHourFormat('12:05:45');\n\n?>\n",
  "python": "full_hour = input()\n\nhour, minute, second = full_hour.split(\":\")\nhour = int(hour)\nif hour >= 0 and hour < 12:\n    period = \"AM\"\nelif hour > 12 and hour <= 23:\n    hour -= 12\n    period = \"PM\"\nelif hour == 24:\n    hour = 0\n    period = \"AM\"\nelif hour == 12:\n    period = \"PM\"\n\nprint(f\"{hour}:{minute}:{second}{period}\")\n",
  "r": "# Function to convert 24-hour format to 12-hour format\nconvert_time <- function(time) {\n    time_24hr <- strptime(time, format = \"%H:%M:%S\")\n    time_12hr <- format(time_24hr, format = \"%I:%M:%S%p\")\n    return(time_12hr)\n}\n\n# Taking input from the user\ncat(\"Enter time in 24-hour format (HH:MM:SS): \")\ninput_time <- readline()\n\n# Converting and displaying the output\noutput_time <- convert_time(input_time)\ncat(\"Time in 12-hour format: \", output_time, \"\\n\")\n",
  "rust": "use std::io;\n\nfn main() {\n    // Read input time from the user\n    let mut input_time = String::new();\n    println!(\"Enter time in 24-hour format (HH:MM:SS):\");\n    io::stdin().read_line(&mut input_time).expect(\"Failed to read line\");\n\n    // Parse the input time\n    let parts: Vec<&str> = input_time.trim().split(':').collect();\n    if parts.len() != 3 {\n        println!(\"Error: Invalid input format. Please use HH:MM:SS\");\n        return;\n    }\n\n    // Validate and parse hours, minutes, and seconds\n    let hour: u32 = match parts[0].parse() {\n        Ok(value) if value <= 23 => value,\n        _ => {\n            println!(\"Error: Invalid hour\");\n            return;\n        }\n    };\n\n    let minute: u32 = match parts[1].parse() {\n        Ok(value) if value <= 59 => value,\n        _ => {\n            println!(\"Error: Invalid minute. Please use minutes between 0 and 59\");\n            return;\n        }\n    };\n\n    let second: u32 = match parts[2].parse() {\n        Ok(value) if value <= 59 => value,\n        _ => {\n            println!(\"Error: Invalid second. Please use seconds between 0 and 59\");\n            return;\n        }\n    };\n\n    // Convert to 12-hour format\n    let mut formatted_hour = hour % 12;\n    if formatted_hour == 0 {\n        formatted_hour = 12;\n    }\n\n    // Determine AM or PM\n    let period = if hour < 12 { \"AM\" } else { \"PM\" };\n\n    // Display the result\n    println!(\n        \"Converted time: {:02}:{:02}:{:02}{}\",\n        formatted_hour, minute, second, period\n    );\n}\n",
  "languages": [
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "perl",
    "ruby",
    "swift",
    "typescript",
    "go",
    "haskell",
    "php",
    "python",
    "r",
    "rust"
  ]
}