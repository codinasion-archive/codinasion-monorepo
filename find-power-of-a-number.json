{
  "slug": "find-power-of-a-number",
  "title": "Find Power Of A Number",
  "c": "#include <stdio.h> /* printf, scanf */\n\n/* According to issue example, \nassuming that both num and expo are positive natural numbers*/\n\nint PowerOf(int num, int expo);\n\n\nint main()\n{\n    int num = 0;\n    int expo = 0;\n\n    int is_good =scanf(\"%d%d\",&num,&expo);\n\n    if(is_good != 2)\n    {\n        printf(\"scanf failed\\n\");\n        return -1;\n    }\n\n    printf(\"%d\\n\",PowerOf(num,expo));\n\n    return 0;\n}\n\n\nint PowerOf(int num, int expo)\n{\n    int ret = 1;\n    while(expo >= 1)\n    {\n        ret *= num;\n        --expo;\n    }\n\n    return ret;\n}",
  "c-plus-plus": "// To find the power of a number...\n#include <bits/stdc++.h>\n#define ll long long // For typing ease.\nusing namespace std;\n\nint main(){\n    ll n;   cin>>n; //Base\n    ll p;   cin>>p; //Power\n\n    //Using std function:\n    // cout<<pow(n,p)<<endl;\n\n    // Using loops:\n    ll product = 1;\n    for(int i=0;i<p;i++){\n        product *= n;\n    }\n    cout<<product<<endl;\n    return 0;\n}\n\n/*\nAuthor : Kartikeya Saini\n*/",
  "c-sharp": "using System;\nnamespace FindPowerOfANumber{\n    class PowerOfANumber{\n        static void Main(string[] args){\n            Console.WriteLine(\"Enter the base number\");\n            int baseNum = int.Parse(Console.ReadLine());\n            Console.WriteLine(\"Enter the power number\");\n            int powerNum = int.Parse(Console.ReadLine());\n            Console.WriteLine(Math.Pow(baseNum, powerNum));\n        }\n    }\n}",
  "f-sharp": "let number = 2\nlet power = pown number 3\nprintfn \"%A\" power\n",
  "java": "import java.util.Scanner;\n\nclass FindPowerOfANumber {\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the number: \");\n        int number = scanner.nextInt();\n        System.out.print(\"Enter the power: \");\n        int power = scanner.nextInt();\n\n        if(power < 0 || number < 0){\n            System.out.println(\"Invalid input/Power can't be negative\");\n        } else {\n\n            System.out.println(number + \"^\" + power + \" = \" + findPower(number, power));\n        }\n    }\n\n    private static long findPower(int number, int power) {\n        if(power == 0){\n            return 1;\n        } else {\n            return (long) Math.pow(number, power);\n        }\n    }\n}",
  "javascript": "const powerOfNumber = (num, power) => {\n  if (power < 0 || num < 0) {\n    return \"Invalid Input\";\n  } else if (power == 0) {\n    return 1;\n  } else {\n    return Math.pow(num, power);\n  }\n};\n\nconsole.log(powerOfNumber(2, 3));\nconsole.log(powerOfNumber(2, 0));\nconsole.log(powerOfNumber(2, -3));\n",
  "kotlin": "fun main(args: Array<String>) {\n    val base = 2\n    val powerRaised = 3\n    val result = power(base, powerRaised)\n\n    println(\"$base^$powerRaised = $result\")\n}\n\nfun power(base: Int, powerRaised: Int): Int {\n    if (powerRaised != 0)\n        return base * power(base, powerRaised - 1)\n    else\n        return 1\n}\n",
  "ruby": "module Power\n\n  def self.power(num, pow)\n    num**pow\n    \n    # # Another Way\n    # result = num\n    # (pow-1).times { |i| result *= num }\n    # result\n  end\n  \nend\n\nputs Power.power(2, 3) # => 8\n",
  "swift": "import Swift\nimport Foundation\n\nprint(\"Enter number: \")\nvar number = Int(readLine()!)!\n\nprint(\"Enter power: \")\nvar power = Int(readLine()!)!\n\nvar result = 1\nfor val in 1...power {\n  result = result * number\n}\n\nprint(\"Result: \", result)\n",
  "typescript": "const powerOfNumber = (num: number, power: number): number => {\n  return Math.pow(num, power);\n};\n\nconsole.log(powerOfNumber(2, 3));\n",
  "description": "\n## Write a program to find power of a number\n\nPower of a number is the result of multiplying a number by itself a certain number of times. For example, 2^3 = 2 _ 2 _ 2 = 8. The number 2 is the base and 3 is the exponent.\n\n```txt\nInput  : 2 3\nOutput : 8\n```\n\n---\n",
  "trackId": 5098,
  "lastUpdated": "2023-08-03T20:39:16Z",
  "contributors": [
    "harshraj8843",
    "esivakumar26",
    "anandfresh",
    "Osher160",
    "Fukurokudzu",
    "vedantpople4",
    "AviadCohen24",
    "vipulkmr02",
    "harsha-desaraju",
    "hi-Kartik2004",
    "hugosmoreira"
  ],
  "julia": "print(\"Enter first number : \")\na = parse(Int, readline(stdin))\nprint(\"Enter second number : \")\nb = parse(Int, readline(stdin))\nprintln(\"Power of given number: \", a ^ b)\n",
  "scala": "import scala.io.StdIn._;\n\nobject powerOfNumber {\n    def main(args:Array[String]):Unit={\n        println(\"Enter a number : \");\n        var n = readLine().toInt;\n        println(\"Enter the power : \");\n        var p = readLine().toInt;\n        var result = scala.math.pow(n,p);\n        println(\"Power of the given number : \"+result);\n    }\n}\n",
  "dart": "import 'dart:math';\nvoid main() {\n  print(pow(2, 3));\n}\n",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tvar base int\n\tvar exponent int\n\tfmt.Scanf(\"%d\", &base)\n\tfmt.Scanf(\"%d\", &exponent)\n\tanswer := math.Pow(float64(base), float64(exponent))\n\tfmt.Println(answer)\n}\n",
  "haskell": "main :: IO()\nmain = do\n   let base = 2\n   let expo = 3\n   print (show base ++ \" raised to the power of \" ++ show expo ++ \" is:\")\n   print (base^expo)\n",
  "php": "<?php\n\nfunction powerOfNumber($num, $power) {\n  if($num < 0 || $power < 0) {\n    return \"Invalid Input\";\n  } else if ($power == 0) {\n    return 1;\n  } else {\n    return pow($num, $power);\n  }\n}\n\necho powerOfNumber(2, 3);\necho powerOfNumber(2, -3);\necho powerOfNumber(2, 0);\n\n?>\n",
  "perl": "#!/usr/bin/perl\nuse warnings;\nuse strict;\nprint \"Enter a number : \";\nmy $number = <STDIN>;\nprint \"Enter the power : \";\nmy $power = <STDIN>;\nprint $number**$power, \"\\n\";\n",
  "python": "# Program for finding the power of number\n\n# Input a- number , n-power\n# Output a^n\n\nimport math\n\na, n = list(map(float, input().split()))\n\nprint(round(math.pow(a, n), 3))\n",
  "r": "x = 2\ny = 3\ncat(\"Power of the given number  : \", x**y)\n",
  "rust": "fn main() {\n    // Get the base and exponent from the user\n    let base = 2;\n    let exponent = 3;\n\n    // Calculate the result\n    let result = base.pow(exponent);\n\n    // Print the result\n    println!(\"{}^{} = {}\", base, exponent, result);\n}\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "scala",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}