{
  "slug": "check-valid-date",
  "title": "Check Valid Date",
  "c": "#include <stdio.h>\n\nint is_leap_year(int year) {\n    return (year % 4 == 0 );\n}\n\nint is_valid_date(int day, int month, int year) {\n    int days_in_month[] = {31, is_leap_year(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    if (month < 1 || month > 12) {\n        return 0; \n    }\n    if (day < 1 || day > days_in_month[month - 1]) {\n        return 0; \n    }\n    return 1;\n}\n\nint main() {\n    int day, month, year;\n    printf(\"Enter a date (dd/mm/yyyy): \");\n    scanf(\"%d/%d/%d\", &day, &month, &year);\n    if (is_valid_date(day, month, year)) {\n        printf(\"Valid date\\n\");\n    } else {\n        printf(\"Invalid date\\n\");\n    }\n    return 0;\n}\n",
  "c-plus-plus": "#include <iostream>\nvoid Isvalid(int dd, int mm, int yy)\n{\n  \n    if(yy>=1999 || yy<=2023)\n    {\n         if (mm>=1 || mm<=12){\n             \n             if((dd>=1 || dd<=31) && (mm==1 || mm==3 || mm==5 || mm==7 || mm==8 || mm==10 || mm==12))\n             std::cout<<\"date is valid this month contain 31 days\";\n             else if((dd>=1 && dd<=30) && (mm==4 || mm==6 || mm==9 || mm==11))\n             std::cout<<\"Date is valid this month contain 30 days\";\n             else if((dd>=1 && dd<=28) && (mm==2))\n             std::cout<<\"Date is valid it's feb\";\n             else if(dd==29 && mm==2 &&(yy%4==0))\n             std::cout<<\"Date is valid and it's a leap year\";\n             else \n             std::cout<<\"Date is not valid\";\n         }\n         else {\n         std::cout<<\"Month is not valid\";\n         }\n    }\nelse {\n    std::cout<<\"Year is not valid\";\n}\n}\nint main()\n{\n    int a,b,c;\n    std::cout<<\"Enter date:\";\n    std::cin>>a;\n    std::cout<<\"Enter month\";\n    std::cin>>b;\n    std::cout<<\"Enter year\";\n    std::cin>>c;\n    \n  Isvalid(a,b,c);\n    return 0;\n}\n",
  "c-sharp": "using System;\nusing System.Globalization;\n\nnamespace DateValidation {\n   class Program {\n      static void Main(string[] args) {\n         DateTime d;\n         bool chValidity = DateTime.TryParseExact(\n         \"2019-02-29\",\n         \"MM/dd/yyyy\",\n         CultureInfo.InvariantCulture,\n         DateTimeStyles.None,\n         out d);\n         Console.WriteLine(chValidity);\n      }\n   }\n}\n",
  "java": "import java.time.LocalDate;\nimport java.time.format.DateTimeParseException;\nimport java.util.Scanner;\n\npublic class CheckValidDate {\n\n    public static boolean isDateValid(String input) {\n        try {\n            LocalDate.parse(input);\n            return true;\n        } catch (DateTimeParseException e) {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter a date in the format 'yyyy-mm-dd':\");\n        String input = scanner.nextLine();\n\n        if (isDateValid(input)) {\n            System.out.println(\"True\");\n        } else {\n            System.out.println(\"False\");\n        }\n    }\n}\n",
  "javascript": "let date = prompt(\"Enter a date (YYYY-MM-DD): \");\n\nfunction isValidDate(date) {\n  return (\n    date &&\n    Object.prototype.toString.call(date) === \"[object Date]\" &&\n    !isNaN(date)\n  );\n}\n\ndate = new Date(date);\n\nif (isValidDate(date)) {\n  console.log(\"True\");\n} else {\n  console.log(\"False\");\n}\n",
  "kotlin": "import java.util.Scanner\nimport java.time.format.DateTimeFormatter\n\nfun main() {\n    print(\"Enter valid date format in yyyy-mm-dd : \")\n    println()\n    var input = readLine()\n\n    try {\n        println(\"Is $input valid date?: \" + CheckValidDate(input!!))\n    } catch (exception: Exception) {\n        println(\"Is $input valid date?: \" + false)\n    }\n\n}\n\nprivate fun CheckValidDate(date: String): Boolean {\n    val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")\n    val formatted = formatter.parse(date)\n\n    return true\n}\n",
  "ruby": "# frozen_string_literal: true\n\nrequire 'date'\n\ndef check_valid_date(date)\n  Date.parse(date)\n  true\nrescue ArgumentError\n  false\nend\n\nif $PROGRAM_NAME == __FILE__\n  print 'Input  : '\n  date = gets.chomp\n  # Match the regular expression for a date\n  if date =~ /\\d{4}-\\d{2}-\\d{2}/\n    puts \"Output : #{check_valid_date(date)}\"\n  else\n    puts 'Output : Invalid date. Date must be in the format YYYY-MM-DD.'\n  end\nend\n",
  "swift": "import Foundation\n\nfunc isValidDate(_ dateString: String) -> Bool {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"yyyy-MM-dd\"\n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n    dateFormatter.timeZone = TimeZone(secondsFromGMT: 0)\n    dateFormatter.isLenient = false\n    return dateFormatter.date(from: dateString) != nil\n}\n\n// Example usage\nlet inputDate = \"2019-02-29\"\nlet result = isValidDate(inputDate)\nprint(\"Output: \\(result)\")\n",
  "typescript": "function isValidDate(d: string | number | any): boolean {\n  if (Object.prototype.toString.call(d) === \"[object Date]\") {\n    // it is a date\n    if (isNaN(d)) {\n      // d.getTime() or d.valueOf() will also work\n      // date object is not valid\n      return false;\n    } else {\n      // date object is valid\n      return true;\n    }\n  } else {\n    return false;\n    // not a date object\n  }\n}\n\nconsole.log(isValidDate(new Date()));\n",
  "description": "\n## Write a program to check valid date\n\nCheck if a given date is valid or not.\n\n```txt\nInput  : 2019-02-29\nOutput : False\n```\n\n---\n",
  "trackId": 3694,
  "lastUpdated": "2024-04-11T18:13:34Z",
  "contributors": [
    "bulutg",
    "anandfresh",
    "harshraj8843",
    "esivakumar26",
    "pokharel-nishan",
    "mitrofmep",
    "harmanbatheja15",
    "rksp25",
    "joao-vitor-souza",
    "jaypavasiya",
    "PoweredByCaffein",
    "GalaxyLittlepaws",
    "ahasunos"
  ],
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tvar input string\n\tfmt.Printf(\"Enter date in YYYY-MM-DD format: \")\n\tfmt.Scan(&input)\n\n\t_, err := time.Parse(\"2006-01-02\", input)\n\tif err != nil {\n\t\tfmt.Println(\"Invalid Date\")\n\t} else {\n\t\tfmt.Println(\"Valid Date\")\n\t}\n\n}\n",
  "php": "<?php\n// variables\n$day = 0;\n$month = 0;\n$year = 0;\n\n// turn yyyy-mm-dd into variables\nif (isset($_GET['date'])) {\n    $date = $_GET['date'];\n    $date = explode('-', $date);\n    $year = $date[0];\n    $month = $date[1];\n    $day = $date[2];\n}\n\n//if month is valid\nif ($month > 0 && $month < 13) {\n    // if day is valid\n    if ($day > 0 && $day < 32) {\n        // if year is valid\n        if ($year > 0 && $year < 9999) {\n            // if day is valid for month\n            if ($month == 2) {\n                if ($day < 30 || ($day == 29 && $year % 4 == 0)) {\n                    echo 'True';\n                } else {\n                    echo 'False';\n                }\n            } else if ($month == 4 || $month == 6 || $month == 9 || $month == 11) {\n                if ($day < 31) {\n                    echo 'True';\n                } else {\n                    echo 'False';\n                }\n            } else {\n                echo 'True';\n            }\n        } else {\n            echo 'False';\n        }\n    } else {\n        echo 'False';\n    }\n} else {\n    echo 'False';\n}\n",
  "perl": "sub isvaliddate {\n  my $input = shift;\n  if ($input =~ m!^((?:19|20)\\d\\d)[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$!) {\n    # At this point, $1 holds the year, $2 the month and $3 the day of the date entered\n    if ($3 == 31 and ($2 == 4 or $2 == 6 or $2 == 9 or $2 == 11)) {\n      return 'False';\n    } elsif ($3 >= 30 and $2 == 2) {\n      return 'False';\n    } elsif ($2 == 2 and $3 == 29 and not ($1 % 4 == 0 and ($1 % 100 != 0 or $1 % 400 == 0))) {\n      return 'False';\n    } else {\n      return 'True';\n    }\n  } else {\n    return 'False';\n  }\n}\n\nprint isvaliddate('2019-02-29');\n",
  "python": "from datetime import date\n\ntry:\n    year, month, day = tuple(map(int, input().split(\"-\")))\n    date(year=year, month=month, day=day)\nexcept ValueError:\n    print(\"False\")\nelse:\n    print(\"True\")\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "go",
    "php",
    "perl",
    "python"
  ]
}