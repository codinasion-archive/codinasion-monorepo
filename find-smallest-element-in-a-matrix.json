{
  "slug": "find-smallest-element-in-a-matrix",
  "title": "Find Smallest Element In A Matrix",
  "c": "#include<stdio.h>\nint main()\n{\n int i,j,m,n;\n float a[10][10], sm;\n printf(\"Enter row and column size:\\n\");\n scanf(\"%d%d\", &m, &n);\n printf(\"Enter matrix elements:\\n\");\n for(i=0;i< m;i++)\n {\n  for(j=0;j< n;j++)\n  {\n   printf(\"a[%d][%d]=\",i,j);\n   scanf(\"%f\", &a[i][j]);\n  }\n }\n sm = a[0][0];\n for(i=0;i< m;i++)\n {\n  for(j=0;j< n;j++)\n  {\n   if(a[i][j]< sm)\n   {\n    sm = a[i][j];\n   }\n  }\n }\n printf(\"Smallest element = %f\\n\", sm);\n\n}\n",
  "c-plus-plus": "// programme to find the smallest element of the inputted matrix\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\n\nint main(){\n\n    // Taking the input of count of rows and columns;\n    ll a,b;\n    cout<<\"Enter the number of rows of the matrix :\";\n    cin>>a;\n    cout<<\"Enter the number of columns of the matrix :\";\n    cin>>b;\n\n    // Taking the matrix element inputs;\n    ll arr[a][b];\n    for(ll i=0;i<a;i++){\n        for(ll j=0;j<b;j++){\n            cin>>arr[i][j];\n        }\n    }\n\n    // Finding the smallest element in the matrix;\n    ll mini = INT_MAX;\n    for(ll i=0;i<a;i++){\n        for(ll j=0;j<b;j++){\n            if(arr[i][j]<mini){\n                mini = arr[i][j];\n            }\n        }\n    }\n\n    \n    //Printing the result\n    cout<<\"The smallest element of the inputted \"<<a<<\"X\"<<b<<\" matrix is : \"<<mini<<endl;\n    return 0;\n}",
  "c-sharp": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nclass matrix\n{\n        int[,]x;\n        matrix()\n        {\n            x = new int[,] { { 4, 7, 3 }, { 9, 4, 2 }, { 0, 6, 4 } };\n        }\n        void printarray()\n        {\n            Console.WriteLine(\"Elements in the given Matrix : \");\n            for (int i = 0; i < 3; i++)\n            {\n                for (int j = 0; j < 3; j++)\n                {\n                    Console.Write(x[i, j] + \"\\t\");\n                }\n                Console.WriteLine(\"\\n\");\n            } \n        }\n        int max()\n        {\n            int small = x[0, 0];\n            for (int i = 0; i < 3; i++)\n            {\n                for (int j = 0; j < 3; j++)\n                {\n                    if (small > x[i, j])\n                    {\n                        small = x[i, j];\n                    }\n                }\n            }\n            return small;\n        }\n        public static void Main()\n        {\n            matrix obj = new matrix();\n            obj.printarray();\n            Console.WriteLine(\"Smallest Element in the Matrix : {0}\", obj.max());\n            Console.ReadLine();\n        }\n }\n",
  "f-sharp": "let findSmallestElement (matrix: int[][]) =\n    let numRows = matrix.Length\n    let numCols = matrix.[0].Length\n    \n    let mutable smallest = matrix.[0].[0]\n\n    for i in 0 .. numRows - 1 do\n        for j in 0 .. numCols - 1 do\n            if matrix.[i].[j] < smallest then\n                smallest <- matrix.[i].[j]\n\n    smallest\n\n// Example usage\nlet matrix : int[][] = [|\n    [|4; 7; 3|];\n    [|9; 4; 2|];\n    [|0; 6; 4|];\n|]\n\nlet smallestElement = findSmallestElement matrix\nprintfn \"The smallest element in the matrix is: %d\" smallestElement",
  "java": "import java.util.Scanner;\n\npublic class FindSmallestElementInAMatrix {\n    public static void main(String[] args) {\n\n        Scanner scnr = new Scanner(System.in);\n        int i, j, k =0;\n        int smallest = 0;\n        int arr[][] = new int[3][3];\n        System.out.println(\"Enter the input values\");\n        for (i = 0; i < 3; i++) {\n            for (j = 0; j < 3; j++) {\n                arr[i][j] = scnr.nextInt();\n            }\n        }\n        for (i = 0; i < 3; i++) {\n            for (j = 0; j < 3; j++) {\n                if (j == 0 && i == 0) {\n                    k = arr[0][0];\n                    continue;\n                }\n                if (k < arr[i][j]) {\n                    smallest = k;\n                }\n                else {\n                    smallest = arr[i][j];\n                }\n                k = smallest;\n            }\n        }\n        System.out.println(smallest);\n    }\n}\n",
  "javascript": "const smallestElementInMatrix = (matrix) => {\n  let small = matrix[0][0];\n  matrix.forEach((arr) => {\n    if (small > Math.min(...arr)) {\n      small = Math.min(...arr);\n    }\n  });\n  return small;\n};\n\nconsole.log(\n  smallestElementInMatrix([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n  ]),\n);\n",
  "kotlin": "fun main() {\n    println(\"Enter the number of rows: \")\n    val rows = readLine()?.toIntOrNull() ?: 0\n\n    if (rows <= 0) {\n        println(\"Invalid number of rows.\")\n        return\n    }\n\n    println(\"Enter the number of columns: \")\n    val columns = readLine()?.toIntOrNull() ?: 0\n\n    if (columns <= 0) {\n        println(\"Invalid number of columns.\")\n        return\n    }\n\n    val matrix = Array(rows) { IntArray(columns) }\n\n    println(\"Enter the elements of the matrix:\")\n    for (i in 0 until rows) {\n        for (j in 0 until columns) {\n            matrix[i][j] = readLine()?.toIntOrNull() ?: 0\n        }\n    }\n\n    val smallestElement = findSmallestElement(matrix)\n\n    println(\"Smallest Element in the Matrix: $smallestElement\")\n}\n\nfun findSmallestElement(matrix: Array<IntArray>): Int {\n    if (matrix.isEmpty() || matrix[0].isEmpty()) {\n        return 0\n    }\n    \n    var smallest = matrix[0][0]\n    \n    for (row in matrix) {\n        for (element in row) {\n            if (element < smallest) {\n                smallest = element\n            }\n        }\n    }\n    \n    return smallest\n}\n",
  "ruby": "puts [[4, 7, 3], [9, 4, 2], [0, 6, 4]].flatten.min\n",
  "swift": "import Foundation\n/*\nThis Swift program computes the smallest element in a matrix entered by the user. \nThe user is prompted to specify the number of rows and columns for the matrix and then input all matrix elements in a single row, separated by spaces. \nThe program validates the input, constructs the matrix, and calculates the smallest element within it. Upon completion, the program immediately displays the smallest element found.\nThis straightforward implementation serves as an example of user-input handling, matrix creation, and basic element processing in Swift.\n\nSample Input:\nEnter the number of rows:\n2\nEnter the number of columns:\n3\nEnter all elements of the matrix separated by spaces:\n4 7 3 9 4 2\n\nSample Output:\nSmallest Element in the Matrix: 2\n\n*/\n\n// Function to find the smallest element in a matrix\nfunc findSmallestElement(matrix: [[Int]]) -> Int? {\n    guard let firstRow = matrix.first, !firstRow.isEmpty else {\n        return nil\n    }\n\n    var smallest = firstRow[0]\n\n    for row in matrix {\n        for element in row {\n            if element < smallest {\n                smallest = element\n            }\n        }\n    }\n\n    return smallest\n}\n\n// Read the number of rows and columns\nprint(\"Enter the number of rows:\")\nguard let rows = Int(readLine() ?? \"\"), rows > 0 else {\n    print(\"Invalid input for the number of rows.\")\n    exit(1)\n}\n\nprint(\"Enter the number of columns:\")\nguard let columns = Int(readLine() ?? \"\"), columns > 0 else {\n    print(\"Invalid input for the number of columns.\")\n    exit(1)\n}\n\n// Read all matrix elements in a single row\nprint(\"Enter all elements of the matrix separated by spaces:\")\nguard let input = readLine(), !input.isEmpty else {\n    print(\"Invalid input for matrix elements.\")\n    exit(1)\n}\n\n// Parse the input and create the matrix\nlet elements = input.components(separatedBy: \" \").compactMap { Int($0) }\nguard elements.count == rows * columns else {\n    print(\"Invalid number of elements.\")\n    exit(1)\n}\n\nvar matrix = [[Int]]()\nfor i in 0..<rows {\n    matrix.append(Array(elements[i * columns..<(i + 1) * columns]))\n}\n\n// Find and print the smallest element\nif let smallestElement = findSmallestElement(matrix: matrix) {\n    print(\"Smallest Element in the Matrix: \\(smallestElement)\")\n} else {\n    print(\"The matrix is empty.\")\n}\n",
  "typescript": "const FindSmallestElementInAMatrix = (matrix: number[][]): number => {\n  let currSmall: number = matrix[0][0];\n  matrix.forEach((arr) => {\n    if (currSmall > Math.min(...arr)) {\n      currSmall = Math.min(...arr);\n    }\n  });\n  return currSmall;\n};\n\nFindSmallestElementInAMatrix([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n]);\n\nconsole.log(\n  FindSmallestElementInAMatrix([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n  ]),\n);\nconsole.log(\n  FindSmallestElementInAMatrix([\n    [9, 8, 7],\n    [6, 5, 4],\n    [3, 2, 1],\n  ]),\n);\nconsole.log(\n  FindSmallestElementInAMatrix([\n    [10, 222, 43],\n    [0, 15, 336],\n    [437, 854, 49],\n  ]),\n);\n",
  "description": "\n## Write a program to find smallest element in a matrix\n\n```txt\nInput :\n4 7 3\n9 4 2\n0 6 4\n\nOutput : 0\n```\n\n---\n",
  "trackId": 5121,
  "lastUpdated": "2024-06-16T13:55:26Z",
  "contributors": [
    "harshraj8843",
    "sricharan200",
    "Shubham-2110",
    "vinodr03",
    "anejman",
    "akshithagunupati",
    "bhushanmarathe",
    "anandfresh",
    "vedantpople4",
    "Tushar12222",
    "Sri01729",
    "hi-Kartik2004",
    "Medmly20208",
    "Sdfeagt"
  ],
  "julia": "function find_smallest_element(matrix)\r\n    min_val = minimum(matrix)\r\n    return min_val\r\nend\r\n\r\n# Example matrix\r\nmatrix = [4 7 3;\r\n          9 4 2;\r\n          0 6 4]\r\n\r\nsmallest_element = find_smallest_element(matrix)\r\nprintln(\"The smallest element in the matrix is: \", smallest_element)\r\n",
  "dart": "void smallestInMatrix(List<List<int>> mat){\n  int smallest = mat[0][0];\n  for(var i = 0 ; i < mat.length ; i++){\n    for(var j = 0 ; j < mat[i].length ; j++){\n      if(mat[i][j] < smallest){\n        smallest = mat[i][j];\n      }\n    }\n  }\n  print(smallest);\n}\n\nvoid main() {\n  smallestInMatrix([[1,2,3,4,5],[0,-1,-6,-9,0]]);\n}",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n)\n\nfunc makematrix(size int) [][]int {\n\tm := make([][]int, size)\n\tfor i := 0; i < size; i++ {\n\t\tfor j := 0; j < size; j++ {\n\t\t\tm[i] = append(m[i], rand.Intn(10)-rand.Intn(9))\n\t\t}\n\t\tfmt.Println(m[i], \" \")\n\t}\n\treturn m\n}\n\nfunc main() {\n\tvar size int\n\tfmt.Scanf(\"%d\", &size)\n\tx := makematrix(size)\n\tvar mini int\n\tfor i := 0; i < size; i++ {\n\t\tfor j := 0; j < size; j++ {\n\t\t\tif x[i][j] < mini {\n\t\t\t\tmini = x[i][j]\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(mini)\n\n}\n",
  "haskell": "-- Define a type alias for clarity\r\ntype Matrix a = [[a]]\r\n\r\n-- Function to find the smallest element in a matrix\r\nsmallestElement :: (Ord a) => Matrix a -> a\r\nsmallestElement matrix = minimum $ concat matrix\r\n\r\n-- Main function for testing\r\nmain :: IO ()\r\nmain = do\r\n  -- Define a test matrix\r\n  let matrix = [[4, 7, 3], [9, 4, 2], [0, 6, 4]]\r\n  \r\n  -- Print the smallest element\r\n  print $ smallestElement matrix\r\n",
  "php": "<?php\n\nfunction smallestElementInMatrix($matrix) {\n  $small = $matrix[0][0];\n  foreach($matrix as $arr) {\n    if($small > min($arr))\n        $small = min($arr);\n }\nreturn $small;\n}\n\n\necho smallestElementInMatrix([[1,2,3],[4,5,6],[7,8,9]])\n\n?>\n",
  "perl": "#!/usr/bin/perl\nuse strict;\nuse warnings;\nuse List::Util qw(min max);\nmy @items = ( [4, 7, 3],\n              [9, 4, 2],\n              [0, 6, 4] );\n\nmy @min_array = ();\npush (@min_array, min(@{$items[0]}));\npush (@min_array, min(@{$items[1]}));\npush (@min_array, min(@{$items[2]}));\nprint min(@min_array), \"\\n\";\n",
  "python": "# smallest element in a matrix\n\n\ndef findSmallestElementInAMatrix(matrix):\n    smallestElement = min(matrix[0])\n\n    for i in range(1, len(matrix)):\n        if min(matrix[i]) < smallestElement:\n            smallestElement = min(matrix[i])\n\n    return smallestElement\n\n\nif __name__ == \"__main__\":\n    print(findSmallestElementInAMatrix([[10, 222, 43], [0, -15, 336], [437, 854, 49]]))\n",
  "r": "# Function to find the smallest element in a matrix\nfind_smallest_element <- function(matrix_data) {\n  min_value <- min(matrix_data)\n  return(min_value)\n}\n\n# User input for matrix dimensions\nrows <- as.integer(readline(prompt = \"Enter the number of rows: \"))\ncols <- as.integer(readline(prompt = \"Enter the number of columns: \"))\n\n# Create an empty matrix to store user input\nmatrix_input <- matrix(0, nrow = rows, ncol = cols)\n\n# Input matrix elements\nfor (i in 1:rows) {\n  for (j in 1:cols) {\n    matrix_input[i, j] <- as.integer(readline(prompt = paste(\"Enter element at [\", i, \",\", j, \"]: \")))\n  }\n}\n\n# Display input matrix\ncat(\"Entered matrix:\\n\")\nprint(matrix_input)\n\n# Find the smallest element in the matrix\nsmallest_element <- find_smallest_element(matrix_input)\n\n# Display the smallest element\ncat(\"\\nThe smallest element in the matrix is:\", smallest_element, \"\\n\")\n",
  "rust": "fn main(){\n    let mat = vec![\n                    vec![67,28,33],\n                    vec![44,15,19],        \n                    vec![7,58,29],];\n    let mut small = i32::MAX;\n    for row in mat{\n        for num in row{\n           if num < small {\n               small = num;\n           }\n        }\n    }\n    println!(\"{small}\");\n}",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "dart",
    "go",
    "haskell",
    "php",
    "perl",
    "python",
    "r",
    "rust"
  ]
}