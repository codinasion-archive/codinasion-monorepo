{
  "slug": "convert-string-to-pascalcase",
  "title": "Convert String To Pascalcase",
  "c": "#include<stdio.h>\n#include<string.h>\n#include<ctype.h> \nchar* toPascalCase(char *str){\n\tint flag = 1,index = 0;\n\tfor(int i=0;i<strlen(str);i++) {\n\t\tif(str[i]==' '){\n\t\t\tflag = 1;\n\t\t}\n\t\telse if(flag == 1){\n\t\t\tflag = 0;\n\t\t\tstr[index++] = toupper(str[i]);\n\t\t}\n\t\telse {\n\t\t\tstr[index++] = tolower(str[i]);\n\t\t}\n\t}\n\tstr[index] = '\\n';\n\treturn str;\n}\nvoid main(){\n\tchar str[1000];\n\tprintf(\"Enter a string: \");\n\tfgets(str,1000,stdin);\n\tprintf(\"Input string: %s\",str);\n\tprintf(\"Input string in Pascal Case : %s\",toPascalCase(str));\n}\n",
  "c-plus-plus": "#include <string>\n#include <cctype>\n#include <iostream>\n\nstd::string convertToPascalCase(std::string input_str){\n    std::string pascalCaseStr;\n\n    size_t pos = 0;\n    size_t beg = 0;\n    while( pos  != input_str.npos)\n    {\n        pos = input_str.find(\" \", beg);\n        std::string word = input_str.substr(beg, pos - beg );\n        beg = pos + 1;\n        word.front() = static_cast<char>(std::toupper(static_cast<unsigned char>(word.front())));\n        pascalCaseStr.append(word);\n    }\n    return pascalCaseStr;\n}\n\n\nint main()\n{\n    std::cout << \"Hello world and universe --> \" << convertToPascalCase(\"Hello world and universe\") << std::endl;\n}",
  "c-sharp": "using System;\nusing System.Globalization;\n\npublic class ConvertStringToPascalCase{\n    public static void Main(){\n        Console.WriteLine(\"Enter a string to convert it to PascalCase: \");\n        string demoInput = Console.ReadLine();\n        Console.WriteLine(converStringToPascalCase(demoInput).Replace(\" \",\"\"));\n    }\n    \n    static string converStringToPascalCase(string s){\n        TextInfo myTI = new CultureInfo(\"en-US\",false).TextInfo;\n        return myTI.ToTitleCase(s);\n    }\n}\n",
  "f-sharp": "open System\nopen System.Globalization\n\n\nlet convertStringToPascalCase (s: string) =\n    let myTI = CultureInfo(\"en-US\", false).TextInfo\n    myTI.ToTitleCase(s).Split(' ') |> Array.map (fun x -> x.Trim())\n\n[<EntryPoint>]\nlet main argv =\n    printfn \"Enter a string to convert it to PascalCase: \"\n    let demoInput = Console.ReadLine()\n    let pascalCaseString = convertStringToPascalCase demoInput |> String.concat \"\"\n    printfn \"%s\" pascalCaseString\n    0\n",
  "java": "import java.util.Scanner;\n\npublic class ConvertStringToPascalcase {\n\n    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"saisir le mot ou la phrase : \");\n        String a = sc.nextLine();\n        System.out.println(\"RÃ©sultat : \" + toTitleCase(a));\n    }\n\n    public static String toTitleCase(String input) {\n        StringBuilder titleCase = new StringBuilder(input.length());\n        boolean nextTitleCase = true;\n\n        for (char c : input.toCharArray()) {\n            if (Character.isSpaceChar(c)) {\n                nextTitleCase = true;\n            } else if (nextTitleCase) {\n                c = Character.toTitleCase(c);\n                nextTitleCase = false;\n            }\n\n            titleCase.append(c);\n        }\n\n        return titleCase.toString().replaceAll(\"\\\\s\", \"\");\n    }\n\n}\n",
  "javascript": "const pascalCase = (string) => {\n  function toPascalCase(string) {\n    return `${string}`\n      .replace(new RegExp(/[-_]+/, \"g\"), \" \")\n      .replace(new RegExp(/[^\\w\\s]/, \"g\"), \"\")\n      .replace(\n        new RegExp(/\\s+(.)(\\w*)/, \"g\"),\n        ($1, $2, $3) => `${$2.toUpperCase() + $3.toLowerCase()}`,\n      )\n      .replace(new RegExp(/\\w/), (s) => s.toUpperCase());\n  }\n  const newText = toPascalCase(string);\n\n  return newText;\n};\n",
  "kotlin": "import java.util.Scanner\n\nfun main() {\n    print(\"Enter String : \")\n    println()\n    var min = readLine()\n\n    println(\"Pascal Case: \" + ConvertStringToPascalcase(min!!.split(\" \")))\n\n}\n\nprivate fun ConvertStringToPascalcase(args: List<String>): String {\n    val buffer = StringBuffer()\n    for((index,day) in args.withIndex()){\n        if(index == 0) {\n            buffer.append(day.get(0).uppercase()).append(day.subSequence(1,day.length))\n        } else {\n            buffer.append(\" \").append(day.get(0).uppercase()).append(day.subSequence(1,day.length))\n        }\n    }\n\n    return buffer.toString()\n}\n",
  "ruby": "puts \"Please, insert your string: \"\nuser_input = gets.chomp\nresult = user_input.split(' ').map { |word| word.capitalize }.join\nputs result\n",
  "swift": "import Foundation\n\nfunc convertToPascalCase(_ input: String) -> String {\n    // Split the string into words separated by spaces or punctuation using a character set\n    let words = input.components(separatedBy: CharacterSet.alphanumerics.inverted).filter { !$0.isEmpty }\n    \n    // Capitalize the first letter of each word and concatenate them\n    let pascalCase = words.map { $0.capitalized }.joined()\n    \n    return pascalCase\n}\n\n// Taking input from the user\nprint(\"Please enter a string to convert to PascalCase:\")\nif let input = readLine() {\n    let pascalCaseOutput = convertToPascalCase(input)\n    print(\"PascalCase Output: \\(pascalCaseOutput)\")\n} else {\n    print(\"Failed to read input.\")\n}\n",
  "typescript": "const toPascalCase = (str) =>\n  (str.match(/[a-zA-Z0-9]+/g) || [])\n    .map((w) => `${w.charAt(0).toUpperCase()}${w.slice(1)}`)\n    .join(\"\");\n\nconsole.log(toPascalCase(\"hello world\"));\n",
  "description": "\n## Write a program to convert string to pascalcase\n\nPascalcase is a style of writing in which the first letter of each word is capitalized.\n\n```txt\nInput  : \"hello world\"\nOutput : \"HelloWorld\"\n```\n\n---\n",
  "trackId": 4085,
  "lastUpdated": "2024-05-01T08:16:55Z",
  "contributors": [
    "pramod-karkhani",
    "charan-hash",
    "anandfresh",
    "ApurvaR1",
    "harshraj8843",
    "apurvagandhi",
    "akkshayTandon",
    "RiteshK-611",
    "Bogumil-Sapinski-Mobica",
    "roshan798",
    "hi-Kartik2004",
    "rafaover",
    "rksp25",
    "joao-vitor-souza",
    "Avicenne-b",
    "Dheeraj0014",
    "Arbaz23",
    "VasireddyGanesh"
  ],
  "julia": "println(\"Enter a string: \")\nsub = split(readline(), \" \")\ns = \"\"\n\nfor i in sub\n global s = s * titlecase(i)\nend\n\nprintln(\"Given string in pascalcase: \", s)",
  "go": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc toPascalCase(str string) string {\n\twords := strings.Split(str, \" \")\n\tnewWords := []string{}\n\tfor _, word := range words {\n\t\tfirstLetter := word[0]\n\t\trestOfWord := word[1:]\n\t\tnewWord := strings.ToUpper(string(firstLetter)) + restOfWord\n\t\tnewWords = append(newWords, newWord)\n\t}\n\treturn strings.Join(newWords, \"\")\n}\n\nfunc main() {\n\tstr := \"hello world\"\n\tfmt.Println(\"Input string:\", str)\n\tfmt.Println(\"PascalCase string:\", toPascalCase(str))\n}\n",
  "php": "<?php\n\nfunction pascalCase($string, $capitalizeFirstChar = false) {\n   $str = str_replace(' ', '', ucwords($string, ' '));\n   if (!$capitalizeFirstChar) {\n      $str = lcfirst($str);\n   }\n   return $str;\n}\necho pascalCase('hello world');\n\n?>\n",
  "perl": "my $str = 'hello world';\n$_ = $str;\n$_ = ucfirst;\ns/(?<=[^\\W_]) +([^\\W_])|_+/\\U$1/g;\nprint;\n",
  "python": "input_string = input()\noutput_string = \"\"\nfor word in input_string.split(\" \"):\n    # capitalize() is a buit-in function in python that converts first character in String to uppercase and remaining characters to lowercase\n    output_string += word.capitalize()\nprint(output_string)\n",
  "r": "convertToPascalCase <- function(str) {\n  words <- unlist(strsplit(str, \" \"))  # Split the string into words\n  words <- sapply(words, function(word) {\n    if (nchar(word) > 0) {\n      paste0(toupper(substr(word, 1, 1)), tolower(substr(word, 2, nchar(word))))\n    } else {\n      \"\"\n    }\n  })\n  return(paste0(words, collapse = \"\"))\n}\n\n# Test the function with the input \"hello world\"\ninput_str <- \"hello world\"\noutput_str <- convertToPascalCase(input_str)\nprint(output_str)\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "f-sharp",
    "java",
    "javascript",
    "kotlin",
    "ruby",
    "swift",
    "typescript",
    "julia",
    "go",
    "php",
    "perl",
    "python",
    "r"
  ]
}