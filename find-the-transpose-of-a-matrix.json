{
  "slug": "find-the-transpose-of-a-matrix",
  "title": "Find The Transpose Of A Matrix",
  "c": "#include <stdio.h>\n#include <stdlib.h>\n\n#define ROW_COUNT 3\n#define COL_COUNT 3\n\n\nvoid print_matrix(int **matrix)\n{\n\tint i = 0, j = 0;\n\tfor ( ; i < ROW_COUNT; ++i) {\n\t\tfor (j = 0; j < COL_COUNT; ++j)\n\t\t\tprintf(\"%d \", matrix[i][j]);\n\t\tprintf(\"\\n\");\n\t}\n\n\treturn;\n}\n\nint **transpose(int **a)\n{\n\tint i = 0, j = 0;\n\n\tint **ret = malloc(sizeof(int *)*ROW_COUNT);\n\tfor (i = 0; i < ROW_COUNT; ++i) {\n\t\tret[i] = malloc(sizeof(int) * COL_COUNT);\n\t}\n\t\n\tfor (i =0 ; i < ROW_COUNT; ++i) {\n\t\tfor (j = 0; j < COL_COUNT; ++j)\n\t\t\tret[j][i] = a[i][j];\n\t}\n\n\treturn ret;\n}\n\n\nint main()\n{\n\tint count = 1;\n\tint i = 0, j = 0;\n\tint **matrix;\n\tmatrix = malloc(ROW_COUNT * sizeof(int *));\n\tfor ( ; i < ROW_COUNT; ++i) {\n\t\tmatrix[i] = malloc(COL_COUNT * sizeof(int));\n\t\tfor (j = 0; j < COL_COUNT; ++j)\n\t\t\tmatrix[i][j] = count++;\n\t}\n\n\tprintf(\"Input:\\n\");\n\tprint_matrix(matrix);\n\n\tprintf(\"\\nOutput:\\n\");\n\tint **ret_matrix = transpose(matrix);\n\tprint_matrix(ret_matrix);\n\n\treturn 0;\t\n}\n",
  "c-plus-plus": "#include <iostream>\nusing namespace std;\n\nvoid printMatrix(int a[3][3])\n{\n    for (int i = 0; i < 3; i++)\n    {\n        for (int j = 0; j < 3; j++)\n        {\n            printf(\"%d \", a[i][j]);\n        }\n        if (i != 2)\n        {\n            printf(\"\\n\");\n        }\n    }\n\n    printf(\"\\n\");\n}\n\nvoid transposeMatrix(int input[3][3], int output[3][3])\n{\n    for (int i = 0; i < 3; i++)\n    {\n        for (int j = 0; j < 3; j++)\n        {\n            output[j][i] = input[i][j];\n        }\n    }\n}\n\nint main()\n{\n    int input[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n\n    int transpose[3][3];\n    transposeMatrix(input, transpose);\n\n    printMatrix(transpose);\n}",
  "c-sharp": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n \nnamespace Program\n{\n    class Program\n    {\n        public static void Main(string[] args)\n        {\n            int m, n, i, j;\n            Console.Write(\"Enter the order of the Matrix : \");\n            m = Convert.ToInt16(Console.ReadLine());\n            n = Convert.ToInt16(Console.ReadLine());\n            int[,] A = new int[10, 10];\n            Console.Write(\"\\nEnter The Matrix Elements : \");\n            for (i = 0; i < m; i++)\n            {\n                for (j = 0; j < n; j++)\n                {\n                    A[i, j] = Convert.ToInt16(Console.ReadLine());\n                }\n            }\n            Console.Clear();\n            Console.WriteLine(\"\\nGiven Matrix : \");\n            for (i = 0; i < m; i++)\n            {\n                for (j = 0; j < n; j++)\n                {\n                    Console.Write(A[i, j] + \"\\t\");\n \n                }\n                Console.WriteLine();\n            }\n            Console.WriteLine(\"Transpose Matrix : \");\n \n           for (i = 0; i < m; i++)\n            {\n                for (j = 0; j < n; j++)\n                {\n                    Console.Write(A[j, i] + \"\\t\");\n \n                }\n                Console.WriteLine();\n            }\n            Console.Read();\n        }\n    }\n}\n",
  "java": "class FindTheTransposeOfAMatrix {\n    public static void main(String[] args) {\n        int matrix[][] = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };\n        int size = matrix.length;\n\n        for (int i = 0; i < size; i++)\n            for (int j = i + 1; j < size; j++) {\n                int help = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = help;\n            }\n\n        for (int i = 0; i < size; i++) {\n            for (int j = 0; j < size; j++)\n                System.out.print(matrix[i][j] + \" \");\n            System.out.println(\"\");\n        }\n    }\n}",
  "javascript": "function transposeOfMatrix(arr) {\n  console.log(\"before arr\", arr);\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      let tmp = arr[i][j];\n      arr[i][j] = arr[j][i];\n      arr[j][i] = tmp;\n    }\n  }\n\n  console.log(\"after arr\", arr);\n}\n\ntransposeOfMatrix([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n]);\n",
  "kotlin": "fun main(args: Array<String>) {\n    val row = 2\n    val column = 3\n    val matrix = arrayOf(intArrayOf(2, 3, 4), intArrayOf(5, 6, 4))\n\n\n    display(matrix)\n\n    // Transpose the matrix\n    val transpose = Array(column) { IntArray(row) }\n    for (i in 0..row - 1) {\n        for (j in 0..column - 1) {\n            transpose[j][i] = matrix[i][j]\n        }\n    }\n\n    display(transpose)\n}\n\nfun display(matrix: Array<IntArray>) {\n    println(\"The matrix is: \")\n    for (row in matrix) {\n        for (column in row) {\n            print(\"$column    \")\n        }\n        println()\n    }\n}\n",
  "swift": "func transpose(matrix: [[Int]]) -> [[Int]] {\n    // Guard against empty matrix\n    guard !matrix.isEmpty else { return [[]] }\n\n    let rowCount = matrix.count\n    let colCount = matrix[0].count\n\n    // Initialize an empty matrix for the transpose\n    var transposedMatrix = Array(repeating: Array(repeating: 0, count: rowCount), count: colCount)\n\n    // Iterate through the matrix and swap rows with columns\n    for row in 0..<rowCount {\n        for col in 0..<colCount {\n            transposedMatrix[col][row] = matrix[row][col]\n        }\n    }\n\n    return transposedMatrix\n}\n\n// Example usage\nlet inputMatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nlet outputMatrix = transpose(matrix: inputMatrix)\nprint(\"Output:\")\nfor row in outputMatrix {\n    print(row.map { String($0) }.joined(separator: \" \"))\n}\n",
  "typescript": "function transposeOfMatrix(arr: Array<Array<number>>) {\n  console.log(\"before arr\", arr);\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      const tmp = arr[i][j];\n      arr[i][j] = arr[j][i];\n      arr[j][i] = tmp;\n    }\n  }\n\n  console.log(\"after arr\", arr);\n}\n\ntransposeOfMatrix([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n]);\n",
  "description": "\n## Write a program to find the transpose of a matrix\n\nThe transpose of a matrix is an operator which flips a matrix over its diagonal, that is it switches the row and column indices of the matrix by producing another matrix denoted as A<sup>T</sup>.\n\n```txt\nInput  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n1 4 7\n2 5 8\n3 6 9\n```\n\n---\n",
  "trackId": 3142,
  "lastUpdated": "2024-06-03T04:47:43Z",
  "contributors": [
    "BatinSimsek",
    "bulutg",
    "anandfresh",
    "harshraj8843",
    "MadhuS-1605",
    "pandfun",
    "AdityaNarayanPradhan",
    "lukastomcisak",
    "anshu-6537",
    "greeshma-d"
  ],
  "julia": "A = [1 2 3; 4 5 6; 7 8 9]\nprint((A'))\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc transpose(matrix [][]int) [][]int {\n\trows := len(matrix)\n\tcols := len(matrix[0])\n\n\ttransposed := make([][]int, cols)\n\tfor i := 0; i < cols; i++ {\n\t\ttransposed[i] = make([]int, rows)\n\t}\n\n\tfor i := 0; i < rows; i++ {\n\t\tfor j := 0; j < cols; j++ {\n\t\t\ttransposed[j][i] = matrix[i][j]\n\t\t}\n\t}\n\n\treturn transposed\n}\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{1, 2, 3},\n\t\t{4, 5, 6},\n\t\t{7, 8, 9},\n\t}\n\n\ttransposed := transpose(matrix)\n\n\tfmt.Println(\"Original Matrix:\")\n\tprintMatrix(matrix)\n\n\tfmt.Println(\"\\nTransposed Matrix:\")\n\tprintMatrix(transposed)\n}\n\nfunc printMatrix(matrix [][]int) {\n\tfor _, row := range matrix {\n\t\tfor _, val := range row {\n\t\t\tfmt.Printf(\"%d\\t\", val)\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n",
  "php": "<?php\r\n\r\nfunction transpose($matrix) {\r\n    $result = [];\r\n    foreach ($matrix as $rowIndex => $row) {\r\n        foreach ($row as $colIndex => $value) {\r\n            $result[$colIndex][$rowIndex] = $value;\r\n        }\r\n    }\r\n    return $result;\r\n}\r\n\r\n$matrix = [\r\n    [1, 2, 3],\r\n    [4, 5, 6],\r\n    [7, 8, 9]\r\n];\r\n\r\n$transposedMatrix = transpose($matrix);\r\nforeach ($transposedMatrix as $row) {\r\n    echo implode(' ', $row) . \"\\n\";\r\n}\r\n",
  "python": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nrows = len(matrix)\ncolumns = len(matrix[0])\n\ntransposed_matrix = [[0 for x in range(rows)] for y in range(columns)]\n\nfor i in range(columns):\n    for j in range(rows):\n        transposed_matrix[i][j] = matrix[j][i]\n\nfor i in range(columns):\n    for j in range(rows):\n        print(transposed_matrix[i][j], \" \", end=\"\")\n    print()\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "typescript",
    "julia",
    "go",
    "php",
    "python"
  ]
}